<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>列表排序</title>
      <link href="/2021/07081.html"/>
      <url>/2021/07081.html</url>
      
        <content type="html"><![CDATA[<h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h5><ul><li><p>列表相邻的两个数，如果前面比后面大，交换这两个数</p></li><li><p>一趟排序完成后，无序列表区减一，有序列表区加一</p></li><li><p>时间复杂度：O(n^2)</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        exchange <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment" spellcheck="true">#优化：减少排序次数</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                li<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>li<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                exchange <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 每一次拍完序打印</span>        <span class="token keyword">if</span> <span class="token operator">not</span> exchange<span class="token punctuation">:</span>            <span class="token keyword">return</span>  <span class="token comment" spellcheck="true"># 如果已经排序完成，后面都是有序，则不用继续比对，继续排列 如 [9,6,1,2,3,4,5],只比对前三个，减少时间提高效率</span>li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>bubble_sort<span class="token punctuation">(</span>li<span class="token punctuation">)</span></code></pre></li></ul><h5 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h5><ul><li><p>遍历记录最小的数放在第一位</p></li><li><p>再一趟排序记录列表区最小的数，放在第二个位置</p></li><li><p>算法关键点：有序区，无序区最小数的位置</p></li><li><p>时间复杂度：O(n^2)</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">select_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        min_loc <span class="token operator">=</span> i        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> li<span class="token punctuation">[</span>min_loc<span class="token punctuation">]</span><span class="token punctuation">:</span>                min_loc <span class="token operator">=</span> j        li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>li<span class="token punctuation">[</span>min_loc<span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>min_loc<span class="token punctuation">]</span><span class="token punctuation">,</span>li<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>select_sort<span class="token punctuation">(</span>li<span class="token punctuation">)</span></code></pre></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法入门</title>
      <link href="/2021/070610717.html"/>
      <url>/2021/070610717.html</url>
      
        <content type="html"><![CDATA[<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>一个计算过程，解决问题的方法</p><p>“程序=数据结构+算法”</p><h5 id="时间复杂度-小结"><a href="#时间复杂度-小结" class="headerlink" title="时间复杂度-小结"></a>时间复杂度-小结</h5><ul><li>时间复杂度用来估计算法运行时间的一个式子（单位）。</li><li>一般来说，时间复杂度高的算法比复杂度低的算法慢</li><li>常见的时间复杂度（按效率排序）<ul><li>O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n^2)&lt;O(n^2logn)&lt;O(n^3)</li></ul></li><li>复杂问题的时间复杂度<ul><li>O(n!) O(2^n) O(n^n)</li></ul></li></ul><h4 id="如何简单快速地判断算法复杂度"><a href="#如何简单快速地判断算法复杂度" class="headerlink" title="如何简单快速地判断算法复杂度"></a>如何简单快速地判断算法复杂度</h4><ul><li><p>快速判断算法复杂度（适用绝大多数简单情况）：\</p><ul><li>确定问题规模n</li><li>循环减半过程——logn</li><li>k层关于n的循环——n^k</li></ul></li><li><p>复杂情况：根据算法执行过程判断</p></li></ul><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><ul><li>用来评估算法内存占用大小的式子</li><li>空间复杂度的表示方式与时间复杂度完全一样<ul><li>算法使用几个变量：O(1)</li><li>算法使用了长度为n的一堆列表：O(n)</li><li>算法使用了m行n列的二维列表：O(mn)   </li></ul></li><li>”空间换时间“：宁可占用多的空间来提升时间</li></ul><p><img src="http://pic.ihcnb.cn/iHcnb/258f323facada.png" alt="1625539849122.png"></p><h4 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h4><p><img src="http://pic.ihcnb.cn/iHcnb/696c369b60ff9.png" alt="1625626707071.png"></p><ul><li><p>顺序查找（线性查找）：从第一个元素往下找，直到找到或者搜索到列表最后一个元素为止</p></li><li><p>时间复杂度：O(n)</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">linear_search</span><span class="token punctuation">(</span>data_set<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    :param data_set: 列表    :param value: 要查的数据    :return:循环找到需要的数据，返回下标    '''</span>    <span class="token keyword">for</span> ind<span class="token punctuation">,</span>v <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>data_set<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> v <span class="token operator">==</span> value<span class="token punctuation">:</span>            <span class="token keyword">return</span> ind    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> None</code></pre></li><li><p>二分查找</p></li><li><p>时间复杂度：O(logn) </p><ul><li>比O(n)也就是线性查找快得多</li></ul></li><li><p><img src="http://pic.ihcnb.cn/iHcnb/0e1893fc35e35.png" alt="1625625711331.png"></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#二分查找</span><span class="token keyword">def</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    :param li: 列表    :param val: 需要查找的数    :return:    '''</span>    left <span class="token operator">=</span> <span class="token number">0</span>    right <span class="token operator">=</span> len<span class="token punctuation">(</span>li<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">while</span> left<span class="token operator">&lt;=</span>right<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 候选区有值</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span> <span class="token operator">//</span><span class="token number">2</span>  <span class="token comment" spellcheck="true"># 找到候选区中间值</span>        <span class="token keyword">if</span> li<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> val<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果直接找到要找的值，返回</span>            <span class="token keyword">return</span> mid        <span class="token keyword">elif</span> li<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span>val<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 查找值在mid左侧</span>            right <span class="token operator">=</span> mid<span class="token number">-1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># li[mid]&lt;val 带查找的值在mid右侧</span>            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> None</code></pre><h6 id="python内置列表查找函数：index-运用线性查找，因为二分查找一大特点列表必须是有序列表"><a href="#python内置列表查找函数：index-运用线性查找，因为二分查找一大特点列表必须是有序列表" class="headerlink" title="*python内置列表查找函数：index()运用线性查找，因为二分查找一大特点列表必须是有序列表"></a>*python内置列表查找函数：index()运用线性查找，因为二分查找一大特点列表必须是有序列表</h6></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python创建一个学生字典并可以查询其中信息</title>
      <link href="/2021/07051.html"/>
      <url>/2021/07051.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python创建一个学生字典并可以查询其中信息"><a href="#Python创建一个学生字典并可以查询其中信息" class="headerlink" title="Python创建一个学生字典并可以查询其中信息"></a>Python创建一个学生字典并可以查询其中信息</h1><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个字典，存放单个学生信息</span>stuInfo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>stuInfo<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> namestuInfo<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> stuIdstuInfo<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> age<span class="token comment" spellcheck="true"># 单个学生信息放入列表</span>students<span class="token punctuation">.</span>append<span class="token punctuation">(</span>stuInfo<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"添加成功！"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#查询单个学生的信息</span><span class="token keyword">global</span> studentssearchID<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"请输入你要查询学生的学号:"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#验证是否有此学号</span>i <span class="token operator">=</span> <span class="token number">0</span>leap <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> temp <span class="token keyword">in</span> students<span class="token punctuation">:</span>    <span class="token keyword">if</span> temp<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">==</span> searchID<span class="token punctuation">:</span>        leap <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> leap <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有此学生学号，查询失败！"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"找到此学生，信息如下："</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"学号：%s\n姓名：%s\n年龄：%s\n"</span><span class="token operator">%</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>temp<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>temp<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pycharm 配置git工具</title>
      <link href="/2021/07011.html"/>
      <url>/2021/07011.html</url>
      
        <content type="html"><![CDATA[<p><strong>配置git工具</strong></p><p>首先确保安装git服务</p><p>打开pycharm</p><p><img src="http://pic.ihcnb.cn/iHcnb/5631641e003ed.png" alt="clipboard.png"></p><p><img src="http://pic.ihcnb.cn/iHcnb/1582db1661bf8.png" alt="clipboard.png"></p><p>点击<a href="https://github.com/settings/tokens/new%E8%BF%99%E4%B8%AA%E8%B6%85%E9%93%BE%E6%8E%A5%EF%BC%8C%E5%B0%B1%E6%98%AF%E5%88%9B%E5%BB%BA%E4%BD%A0%E7%9A%84token%E3%80%82">https://github.com/settings/tokens/new这个超链接，就是创建你的token。</a></p><p><img src="http://pic.ihcnb.cn/iHcnb/d27d3ee9133c3.png" alt="clipboard.png"></p><p>全选，然后复制令牌，粘贴在pycharm</p><p><img src="http://pic.ihcnb.cn/iHcnb/53999a444daab.png" alt="clipboard.png"></p><p><strong>操作</strong></p><p>项目从本地库上传到远程库</p><p><img src="http://pic.ihcnb.cn/iHcnb/002dbc91c5e5d.png" alt="clipboard.png"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pycharm git多人协作开发</title>
      <link href="/2021/07012.html"/>
      <url>/2021/07012.html</url>
      
        <content type="html"><![CDATA[<p>第一步：</p><p>复制合作者项目名</p><p><img src="http://pic.ihcnb.cn/iHcnb/5bb0aafb244f4.png" alt="clipboard.png"></p><p>在你这边搜索</p><p><img src="http://pic.ihcnb.cn/iHcnb/8db34b37a1084.png" alt="clipboard.png"></p><p>打开pycharm</p><p><img src="http://pic.ihcnb.cn/iHcnb/fd0c2dadcd904.png" alt="clipboard.png"></p><p>复制地址输入地址</p><p><img src="http://pic.ihcnb.cn/iHcnb/2de97e3e54a25.png" alt="clipboard.png"></p><p><img src="http://pic.ihcnb.cn/iHcnb/fb45ebea98971.png" alt="clipboard.png"></p><p>此时多人协作已完成文件克隆</p><p>次分支有所改动上传后需要在分支页面确认</p><p><img src="http://pic.ihcnb.cn/iHcnb/a01cbc2626ad6.png" alt="clipboard.png"></p><p>确认后主分支也需要确认，确认后方可修改主分支</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>存储引擎管理常用命令</title>
      <link href="/2021/063014.html"/>
      <url>/2021/063014.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-存储引擎管理"><a href="#1-存储引擎管理" class="headerlink" title="1 *存储引擎管理*"></a><strong>1</strong> <em><strong>*存储引擎管理*</strong></em></h3><h4 id="1-1-查看数据库支持的存储引擎"><a href="#1-1-查看数据库支持的存储引擎" class="headerlink" title="1.1 *查看数据库支持的存储引擎*"></a><strong>1.1</strong> <em><strong>*查看数据库支持的存储引擎*</strong></em></h4><p>show engines</p><h4 id="1-2-查看数据库当前使用的存储引擎"><a href="#1-2-查看数据库当前使用的存储引擎" class="headerlink" title="1.2 *查看数据库当前使用的存储引擎*"></a><strong>1.2</strong> <em><strong>*查看数据库当前使用的存储引擎*</strong></em></h4><p>就是默认引擎是什么。</p><p>show variables like ‘%storage_engine%’</p><p>也可以在MySQL配置文件中查看。 windows - my.ini。 Linux - my.cnf</p><h4 id="1-3-查看数据库表所用的存储引擎"><a href="#1-3-查看数据库表所用的存储引擎" class="headerlink" title="1.3 *查看数据库表所用的存储引擎*"></a><strong>1.3</strong> <em><strong>*查看数据库表所用的存储引擎*</strong></em></h4><p>show create table table_name</p><h4 id="1-4-创建表指定存储引擎"><a href="#1-4-创建表指定存储引擎" class="headerlink" title="1.4 *创建表指定存储引擎*"></a><strong>1.4</strong> <em><strong>*创建表指定存储引擎*</strong></em></h4><p>create table table_name (column_name column_type) engine = engine_name</p><h4 id="1-5-修改表的存储引擎"><a href="#1-5-修改表的存储引擎" class="headerlink" title="1.5 *修改表的存储引擎*"></a><strong>1.5</strong> <em><strong>*修改表的存储引擎*</strong></em></h4><p>alter table table_name engine=engine_name</p><h4 id="1-6-修改默认的存储引擎"><a href="#1-6-修改默认的存储引擎" class="headerlink" title="1.6 *修改默认的存储引擎*"></a><strong>1.6</strong> <em><strong>*修改默认的存储引擎*</strong></em></h4><p>在MySQL配置文件中修改下述内容：</p><p>default-storage-engine=INNODB</p><p>MySQL配置文件：</p><p>windows系统 - MySQL安装目录/my.ini （5.7版本my.ini文件在数据目录中。 C:/programdata/MySQL Server 5.7/mysql/）</p><p>linux系统 - /etc/my.cnf</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql数据库引擎（存储核心）</title>
      <link href="/2021/063016.html"/>
      <url>/2021/063016.html</url>
      
        <content type="html"><![CDATA[<h4 id="mysql数据库引擎（存储核心）："><a href="#mysql数据库引擎（存储核心）：" class="headerlink" title="mysql数据库引擎（存储核心）："></a>mysql数据库引擎（存储核心）：</h4><p><u>一个算法（存数据的方式）和Io（如何访问）的操作方式</u></p><p><strong>ISAM</strong>：读取操作很快，占内存低，但是不支持事务，不能容错（恢复），必须经常备份</p><p><strong>MyISAM</strong>：ISAM的扩展， MyISAM格式的一个重要缺陷就是不能在表损坏后恢复数据，必须经常使用Optimize Table命令清理空间，不支持事务</p><p><strong>InnoDB</strong>：支持事务，支持外键，但是速度比前两个慢，mysql5.5、6、7的默认储存引擎， InnoDB是为处理巨大数据量时的最大性能设计，它的CPU效率可能是任何其它基于磁盘的关系数据库引擎所不能匹敌的。</p><p><strong><em>*InnoDB特点：*</em>*</strong></p><p> <strong><em>*1）、支持事务*</em>*</strong></p><p>**<em>*<em>2）、数据多版本读取（InnoDB+MyISAM+ISAM）*</em>*</em>*</p><p>**<em>*<em>3）、锁定机制的改进*</em>*</em>*</p><p>**<em>*<em>4）、实现外键*</em>*</em>*</p><h5 id="innodb与myisam区别"><a href="#innodb与myisam区别" class="headerlink" title="*innodb与myisam区别*"></a><em><strong>*innodb与myisam区别*</strong></em></h5><p> InnoDB支持事务，MyISAM不支持，</p><p>InnoDB支持外键，而MyISAM不支持</p><p> Innodb不支持全文索引，而MyISAM支持全文索引，查询效率上MyISAM要高</p><p>InnoDB是聚集索引,MyISAM是非聚集索引</p><h5 id="如何选择"><a href="#如何选择" class="headerlink" title="*如何选择*"></a><em><strong>*如何选择*</strong></em></h5><p>支持事务选择lnnoDB，反之MyISAM，</p><p>查询多选择MyISAM，又读又写频繁，选择lnnoDB</p><p>系统崩溃后，MyISAM恢复起来更困难，能否接受； </p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>索引的优点</title>
      <link href="/2021/063015.html"/>
      <url>/2021/063015.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-1-索引的优点"><a href="#1-1-索引的优点" class="headerlink" title="1.1 *索引的优点*"></a><strong>1.1</strong> <em><strong>*索引的优点*</strong></em></h4><p>​    大大提高系统查询效率</p><p>​    第一、通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。 </p><p>​    第二、可以大大加快 数据的检索速度，这也是创建索引的最主要的原因。 </p><p>​    第三、可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。 </p><p>​    第四、在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。 </p><p>​    第五、通过使用索引，可以在查询的过程中，使用查询优化器，提高系统的性能。</p><h4 id="1-2-索引的缺点"><a href="#1-2-索引的缺点" class="headerlink" title="1.2 *索引的缺点*"></a><strong>1.2</strong> <em><strong>*索引的缺点*</strong></em></h4><p>创建索引和维护索引要耗费时间，    随着数据量而增加</p><p>占用物理内存，</p><p>当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，降低了数据的维护速度</p><h4 id="1-3-什么样的字段适合创建索引"><a href="#1-3-什么样的字段适合创建索引" class="headerlink" title="1.3 *什么样的字段适合创建索引*"></a><strong>1.3</strong> <em><strong>*什么样的字段适合创建索引*</strong></em></h4><p>经常用到的（搜索，排序，范围，连接，where）</p><h4 id="1-4-什么样的字段不适合创建索引"><a href="#1-4-什么样的字段不适合创建索引" class="headerlink" title="1.4 *什么样的字段不适合创建索引:*"></a><strong>1.4</strong> <em><strong>*什么样的字段不适合创建索引:*</strong></em></h4><p>用到的概率很低</p><p><strong>MySQL中的索引种</strong></p><p>B-Tree索引，顾名思义，就是所有的索引节点都按照balance tree的数据结构来存储。B-tree结构可以显著减少定位记录时所经历的中间过程，从而加快存取速度。</p><p>B-tree中，每个结点包含：</p><p>1、本结点所含关键字的个数；</p><p>2、指向父结点的指针；</p><p>3、关键字；</p><p>4、指向子结点的指针；</p><p>对于一棵m阶B-tree，每个结点至多可以拥有m个子结点。各结点的关键字和可以拥有的子结点数都有限制，规定m阶B-tree中，根结点至少有2个子结点，除非根结点为叶子节点，相应的，根结点中关键字的个数为1<del>m-1；非根结点至少有[m/2]（[]，向上取整）个子结点，相应的，关键字个数为[m/2]-1</del>m-1。</p><p>B-tree有以下特性：</p><p>1、关键字集合分布在整棵树中；</p><p>2、任何一个关键字出现且只出现在一个结点中；</p><p>3、搜索有可能在非叶子结点结束；</p><p>4、其搜索性能等价于在关键字全集内做一次二分查找；</p><p>5、自动层次控制；</p><p>由于限制了除根结点以外的非叶子结点，至少含有M/2个儿子，确保了结点的至少利用率，其最低搜索性能为：</p><p><a href="https://baike.baidu.com/pic/B-tree/6606402/0/4a77b2afe1e530f67cd92ad0?fr=lemma&amp;ct=single"><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml14936\wps1.png" alt="img"></a></p><p>其中，M为设定的非叶子结点最多子树个数，N为关键字总数；</p><p>所以B-树的性能总是等价于二分查找（与M值无关），也就没有B树平衡的问题；</p><p>由于M/2的限制，在插入结点时，如果结点已满，需要将结点分裂为两个各占M/2的结点；删除结点时，需将两个不足M/2的兄弟结点合并。</p><h4 id="1-1-Full-text索引"><a href="#1-1-Full-text索引" class="headerlink" title="1.1 *Full-text索引*"></a><strong>1.1</strong> <em><strong>*Full-text索引*</strong></em></h4><p>Full-text索引就是我们常说的全文索引，他的存储结构也是b-tree。主要是为了解决在我们需要用like查询的低效问题。只能解决’xxx%’的like查询。如：字段数据为ABCDE，索引建立为- A、AB、ABC、ABCD、ABCDE五个。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中的SQL的常见优化策略</title>
      <link href="/2021/063012.html"/>
      <url>/2021/063012.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-MySQL中的SQL的常见优化策略"><a href="#1-MySQL中的SQL的常见优化策略" class="headerlink" title="1 *MySQL中的SQL的常见优化策略*"></a><strong>1</strong> <em><strong>*MySQL中的SQL的常见优化策略*</strong></em></h3><h4 id="1-1-避免全表扫描"><a href="#1-1-避免全表扫描" class="headerlink" title="1.1 *避免全表扫描*"></a><strong>1.1</strong> <em><strong>*避免全表扫描*</strong></em></h4><p>对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p><h4 id="1-2-避免判断null值"><a href="#1-2-避免判断null值" class="headerlink" title="1.2 *避免判断null值*"></a><strong>1.2</strong> <em><strong>*避免判断null值*</strong></em></h4><p>应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：    </p><p>select id from t where num is null    </p><p>可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：    </p><p>select id from t where num=0    </p><h4 id="1-3-避免不等值判断"><a href="#1-3-避免不等值判断" class="headerlink" title="1.3 *避免不等值判断*"></a><strong>1.3</strong> <em><strong>*避免不等值判断*</strong></em></h4><p>应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则引擎将放弃使用索引而进行全表扫描。</p><h4 id="1-4-避免使用or逻辑"><a href="#1-4-避免使用or逻辑" class="headerlink" title="1.4 *避免使用or逻辑*"></a><strong>1.4</strong> <em><strong>*避免使用or逻辑*</strong></em></h4><p>应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：</p><p>select id from t where num=10 or num=20</p><p>可以这样查询：</p><p>select id from t where num=10</p><p>union all    </p><p>select id from t where num=20    </p><h4 id="1-5-慎用in和not-in逻辑"><a href="#1-5-慎用in和not-in逻辑" class="headerlink" title="1.5 *慎用in和not in逻辑*"></a><strong>1.5</strong> <em><strong>*慎用in和not in逻辑*</strong></em></h4><p>in 和 not in 也要慎用，否则会导致全表扫描，如：</p><p>select id from t1 where num in(select id from t2 where id &gt; 10)</p><p>此时外层查询会全表扫描，不使用索引。可以修改为：</p><p>select id from t1,(select id from t1 where id &gt; 10)t2 where t1.id = t2.id</p><p>此时索引被使用，可以明显提升查询效率。</p><h4 id="1-6-注意模糊查询"><a href="#1-6-注意模糊查询" class="headerlink" title="1.6 *注意模糊查询*"></a><strong>1.6</strong> <em><strong>*注意模糊查询*</strong></em></h4><p>下面的查询也将导致全表扫描：</p><p>select id from t where name like ‘%abc%’</p><p>模糊查询如果是必要条件时，可以使用select id from t where name like ‘abc%’来实现模糊查询，此时索引将被使用。如果头匹配是必要逻辑，建议使用全文搜索引擎（Elastic search、Lucene、Solr等）。</p><h4 id="1-7-避免查询条件中字段计算"><a href="#1-7-避免查询条件中字段计算" class="headerlink" title="1.7 *避免查询条件中字段计算*"></a><strong>1.7</strong> <em><strong>*避免查询条件中字段计算*</strong></em></h4><p>应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p><p>select id from t where num/2=100    </p><p>应改为:    </p><p>select id from t where num=100*2</p><h4 id="1-8-避免查询条件中对字段进行函数操作"><a href="#1-8-避免查询条件中对字段进行函数操作" class="headerlink" title="1.8 *避免查询条件中对字段进行函数操作*"></a><strong>1.8</strong> <em><strong>*避免查询条件中对字段进行函数操作*</strong></em></h4><p>应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：    </p><p>select id from t where substring(name,1,3)=’abc’–name以abc开头的id    </p><p>应改为:    </p><p>select id from t where name like ‘abc%’    </p><h4 id="1-9-WHERE子句“-”左边注意点"><a href="#1-9-WHERE子句“-”左边注意点" class="headerlink" title="1.9 *WHERE子句“=”左边注意点*"></a><strong>1.9</strong> <em><strong>*WHERE子句“=”左边注意点*</strong></em></h4><p>不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p><h4 id="1-10-组合索引使用"><a href="#1-10-组合索引使用" class="headerlink" title="1.10 *组合索引使用*"></a><strong>1.10</strong> <em><strong>*组合索引使用*</strong></em></h4><p>在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</p><h4 id="1-11-不要定义无异议的查询"><a href="#1-11-不要定义无异议的查询" class="headerlink" title="1.11 *不要定义无异议的查询*"></a><strong>1.11</strong> <em><strong>*不要定义无异议的查询*</strong></em></h4><p>不要写一些没有意义的查询，如需要生成一个空表结构：</p><p>select col1,col2 into #t from t where 1=0    </p><p>这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：    </p><p>create table #t(…)    </p><h4 id="1-12-exists"><a href="#1-12-exists" class="headerlink" title="1.12 *exists*"></a><strong>1.12</strong> <em><strong>*exists*</strong></em></h4><p>很多时候用 exists 代替 in 是一个好的选择：</p><p>select num from a where num in(select num from b)</p><p>用下面的语句替换：</p><p>select num from a where exists(select 1 from b where num=a.num)</p><h4 id="1-13-索引也可能失效"><a href="#1-13-索引也可能失效" class="headerlink" title="1.13 *索引也可能失效*"></a><strong>1.13</strong> <em><strong>*索引也可能失效*</strong></em></h4><p>并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</p><h4 id="1-14-表格字段类型选择"><a href="#1-14-表格字段类型选择" class="headerlink" title="1.14 *表格字段类型选择*"></a><strong>1.14</strong> <em><strong>*表格字段类型选择*</strong></em></h4><p>尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p><p>尽可能的使用 varchar 代替 char ，因为首先可变长度字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p><h4 id="1-15-查询语法中的字段"><a href="#1-15-查询语法中的字段" class="headerlink" title="1.15 *查询语法中的字段*"></a><strong>1.15</strong> <em><strong>*查询语法中的字段*</strong></em></h4><p>任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。</p><h4 id="1-16-索引无关优化"><a href="#1-16-索引无关优化" class="headerlink" title="1.16 *索引无关优化*"></a><strong>1.16</strong> <em><strong>*索引无关优化*</strong></em></h4><p>不使用*、尽量不使用union，union all等关键字、尽量不使用or关键字、尽量使用等值判断。</p><p>表连接建议不超过5个。如果超过5个，则考虑表格的设计。（互联网应用中）</p><p>表连接方式使用外联优于内联。</p><p>外连接有基础数据存在。如：A left join B,基础数据是A。  </p><p>A inner join B，没有基础数据的，先使用笛卡尔积完成全连接，在根据连接条件得到内连接结果集。</p><p>大数据量级的表格做分页查询时，如果页码数量过大，则使用子查询配合完成分页逻辑。</p><p>Select * from table limit 1000000, 10</p><p>Select * from table where id in (select pk from table limit 100000, 10)</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中的索引优化</title>
      <link href="/2021/063013.html"/>
      <url>/2021/063013.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-MySQL中的索引优化"><a href="#1-MySQL中的索引优化" class="headerlink" title="1 *MySQL中的索引优化*"></a><strong>1</strong> <em><strong>*MySQL中的索引优化*</strong></em></h3><p>上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点。虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE次数大于查询次数时，放弃索引。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。建立索引会占用磁盘空间的索引文件。一般情况这个问题不太严重，但如果你在一个大表上创建了多种组合索引，索引文件的会膨胀很快。索引只是提高效率的一个因素，如果你的MySQL有大数据量的表，就需要花时间研究建立最优秀的索引，或优化查询语句。</p><h4 id="1-1-索引不会包含有NULL值的列"><a href="#1-1-索引不会包含有NULL值的列" class="headerlink" title="1.1 *索引不会包含有NULL值的列*"></a><strong>1.1</strong> <em><strong>*索引不会包含有NULL值的列*</strong></em></h4><p>只要列中包含有NULL值都将不会被包含在索引中，组合索引中只要有一列含有NULL值，那么这一列对于此组合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为NULL。create table table_name(c1 varchar(32) default ‘0’)</p><h4 id="1-2-使用短索引"><a href="#1-2-使用短索引" class="headerlink" title="1.2 *使用短索引*"></a><strong>1.2</strong> <em><strong>*使用短索引*</strong></em></h4><p>对串列进行索引，如果可能应该指定一个前缀长度。例如，如果有一个CHAR(255)的列，如果在前10个或20个字符内，多数值是惟一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。</p><p>CREATE INDEX index_name ON table_name (column(****<em>length*</em>***))</p><h4 id="1-3-索引列排序"><a href="#1-3-索引列排序" class="headerlink" title="1.3 *索引列排序*"></a><strong>1.3</strong> <em><strong>*索引列排序*</strong></em></h4><p>MySQL查询只使用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引。</p><h4 id="1-4-like语句操作"><a href="#1-4-like语句操作" class="headerlink" title="1.4 *like语句操作*"></a><strong>1.4</strong> <em><strong>*like语句操作*</strong></em></h4><p>一般情况下不鼓励使用like操作，如果非使用不可，如何使用也是一个问题。like “%aaa%” 不会使用索引，而like “aaa%”可以使用索引。</p><h4 id="1-5-不要在列上进行运算"><a href="#1-5-不要在列上进行运算" class="headerlink" title="1.5 *不要在列上进行运算*"></a><strong>1.5</strong> <em><strong>*不要在列上进行运算*</strong></em></h4><p>例如：select * from users where YEAR(adddate)&lt;2007，将在每个行上进行运算，这将导致索引失效而进行全表扫描，因此我们可以改成：select * from users where adddate&lt;’2007-01-01′</p><h3 id="2-索引总结"><a href="#2-索引总结" class="headerlink" title="2 *索引总结*"></a><strong>2</strong> <em><strong>*索引总结*</strong></em></h3><p>最后总结一下，MySQL只对以下操作符才使用索引：&lt;,&lt;=,=,&gt;,&gt;=,between,in,以及某些时候的like(不以通配符%或_开头的情形)。而理论上每张表里面最多可创建16个索引，不过除非是数据量真的很多，否则过多的使用索引也不是那么好玩的。</p><p>建议：一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中的索引管理</title>
      <link href="/2021/063011.html"/>
      <url>/2021/063011.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-MySQL中的索引管理"><a href="#1-MySQL中的索引管理" class="headerlink" title="1 *MySQL中的索引管理*"></a><strong>1</strong> <em><strong>*MySQL中的索引管理*</strong></em></h3><p>在MySQL中，对索引的查看和删除操作是所有索引类型通用的。</p><h4 id="1-1-普通索引"><a href="#1-1-普通索引" class="headerlink" title="1.1 *普通索引*"></a><strong>1.1</strong> <em><strong>*普通索引*</strong></em></h4><p>这是最基本的索引，它没有任何限制MyIASM中默认的BTREE类型的索引，也是我们大多数情况下用到的索引。</p><h5 id="1-1-1-创建索引"><a href="#1-1-1-创建索引" class="headerlink" title="1.1.1 *创建索引*"></a><strong>1.1.1</strong> <em><strong>*创建索引*</strong></em></h5><p>CREATE INDEX index_name ON table_name (column(length))</p><p>ALTER TABLE table_name ADD INDEX index_name (column(length))</p><p>CREATE TABLE table_name (id int not null auto_increment,title varchar(30) ,PRIMARY KEY(id) , INDEX  index_name (title(5)))</p><h5 id="1-1-2-查看索引"><a href="#1-1-2-查看索引" class="headerlink" title="1.1.2 *查看索引*"></a><strong>1.1.2</strong> <em><strong>*查看索引*</strong></em></h5><p>SHOW  INDEX  FROM  [table_name]</p><p>SHOW  KEYS  FROM  [table_name]  # 只在MySQL中可以使用keys关键字。</p><h5 id="1-1-3-删除索引"><a href="#1-1-3-删除索引" class="headerlink" title="1.1.3 *删除索引*"></a><strong>1.1.3</strong> <em><strong>*删除索引*</strong></em></h5><p>DROP INDEX  index_name  ON talbe_name</p><p>ALTER TABLE table_name  DROP INDEX  index_name</p><p>ALTER TABLE table_name DROP PRIMARY KEY</p><h4 id="1-2-唯一索引"><a href="#1-2-唯一索引" class="headerlink" title="1.2 *唯一索引*"></a><strong>1.2</strong> <em><strong>*唯一索引*</strong></em></h4><p>与普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值（注意和主键不同）。如果是组合索引，则列值的组合必须唯一，创建方法和普通索引类似</p><h5 id="1-2-1-创建索引"><a href="#1-2-1-创建索引" class="headerlink" title="1.2.1 *创建索引*"></a><strong>1.2.1</strong> <em><strong>*创建索引*</strong></em></h5><p>CREATE UNIQUE INDEX index_name  ON table_name (column(length))</p><p>ALTER TABLE table_name ADD UNIQUE index_name (column(length))</p><p>CREATE TABLE table_name (id int not null auto_increment,title varchar(30) ,PRIMARY KEY(id) , UNIQUE index_name (title(length)))</p><h4 id="1-3-全文索引（FULLTEXT）"><a href="#1-3-全文索引（FULLTEXT）" class="headerlink" title="1.3 *全文索引（FULLTEXT）*"></a><strong>1.3</strong> <em><strong>*全文索引（FULLTEXT）*</strong></em></h4><p>MySQL从3.23.23版开始支持全文索引和全文检索，**<em>*<em>FULLTEXT索引仅可用于 MyISAM 表*</em>*<strong>；他们可以从</strong></em>*<em>CHAR、VARCHAR或TEXT列*</em>***中作为CREATE TABLE语句的一部分被创建，或是随后使用ALTER TABLE 或CREATE INDEX被添加。</p><p>对于较大的数据集，将你的资料输入一个没有FULLTEXT索引的表中，然后创建索引，其速度比把资料输入现有FULLTEXT索引的速度更为快。不过切记对于大容量的数据表，生成全文索引是一个非常消耗时间非常消耗硬盘空间的做法。</p><h5 id="1-3-1-创建索引"><a href="#1-3-1-创建索引" class="headerlink" title="1.3.1 *创建索引*"></a><strong>1.3.1</strong> <em><strong>*创建索引*</strong></em></h5><p>CREATE FULLTEXT INDEX index_name ON table_name(column(length))</p><p>ALTER TABLE table_name ADD FULLTEXT index_name( column)</p><p>CREATE TABLE table_name (id int not null auto_increment,title varchar(30) ,PRIMARY KEY(id) , FULLTEXT  index_name (title))</p><h4 id="1-4-组合索引（-最左前缀-）"><a href="#1-4-组合索引（-最左前缀-）" class="headerlink" title="1.4 *组合索引（**最左前缀**）*"></a><strong>1.4</strong> <em><strong>*组合索引（*</strong></em><em><strong>*最左前缀*</strong></em><em><strong>*）*</strong></em></h4><p>CREATE TABLE article(id int not null, title varchar(255), time date);</p><p>平时用的SQL查询语句一般都有比较多的限制条件，所以为了进一步榨取MySQL的效率，就要考虑建立组合索引。例如上表中针对title和time建立一个组合索引：ALTER TABLE article ADD INDEX index_title_time (title(50),time(10))。建立这样的组合索引，其实是相当于分别建立了下面两组组合索引：</p><p>–title,time</p><p>–title</p><p>为什么没有time这样的组合索引呢？这是因为MySQL组合索引“最左前缀”的结果。简单的理解就是只从最左面的开始组合。并不是只要包含这两列的查询都会用到该组合索引，如下面的几个SQL所示：</p><p>1，使用到上面的索引</p><p>SELECT * FROM article  WHERE title=’测试’ AND time=1234567890;</p><p>SELECT * FROM article WHERE  title=’测试’;</p><p>2，不使用上面的索引</p><p>SELECT * FROM article WHERE time=1234567890;</p><p>参考：<a href="https://segmentfault.com/a/1190000008131735#articleHeader5">https://segmentfault.com/a/1190000008131735#articleHeader5</a></p><h5 id="1-4-1-创建索引"><a href="#1-4-1-创建索引" class="headerlink" title="1.4.1 *创建索引*"></a><strong>1.4.1</strong> <em><strong>*创建索引*</strong></em></h5><p>CREATE INDEX index_name ON table_name (column_list)</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stark组件</title>
      <link href="/2021/06309.html"/>
      <url>/2021/06309.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-介绍："><a href="#1-介绍：" class="headerlink" title="1.介绍："></a>1.介绍：</h4><p>​    快速完成对N张表增删改查+自定义复杂操作</p><h4 id="2-单例模式"><a href="#2-单例模式" class="headerlink" title="2.单例模式"></a>2.单例模式</h4><p>​    类实例化单个对象</p><pre class=" language-python"><code class="language-python">zhangsen<span class="token punctuation">.</span>py    <span class="token keyword">class</span> <span class="token class-name">AdminSite</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    obj1 <span class="token operator">=</span> AdminSite<span class="token punctuation">(</span><span class="token punctuation">)</span>调用：<span class="token keyword">import</span> zhangsen<span class="token comment" spellcheck="true">#调用多次，只加载一次</span>zhangsen<span class="token punctuation">.</span>object1zhangsen<span class="token punctuation">.</span>object1</code></pre><h4 id="3-启动后、路由加载之前定制一段代码（admin原理）"><a href="#3-启动后、路由加载之前定制一段代码（admin原理）" class="headerlink" title="3.启动后、路由加载之前定制一段代码（admin原理）"></a>3.启动后、路由加载之前定制一段代码（admin原理）</h4><ol><li><p>创建一个app组件</p></li><li><p>在app.py编写ready方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>apps <span class="token keyword">import</span> AppConfig<span class="token keyword">class</span> <span class="token class-name">StarkConfig</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'stark'</span>        <span class="token keyword">def</span> <span class="token function">ready</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>               <span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>module_loading <span class="token keyword">import</span> autodiscover_modules        autodiscover_modules<span class="token punctuation">(</span><span class="token string">'stark'</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#注意：注册路由必须按照django1的注册规范</span><span class="token string">'stark.apps.StarkConfig'</span></code></pre><p>程序启动后，会先去每个app中找stark.py文件并加载。</p></li><li><p>那个app要使用stark组件，只需要创建stark.py</p></li><li><p>写在stark.py里面的内容 程序启动时便会先自动加载 </p></li></ol><p>stark组件执行流程</p><p><img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210518084102125.png" alt="image-20210518084102125"></p><h4 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h4><p>浪费内存，速度慢</p><p><img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210518155144412.png" alt="image-20210518155144412"></p><h5 id="使用yield，提升效率。，循环一次，yield拿一次数据"><a href="#使用yield，提升效率。，循环一次，yield拿一次数据" class="headerlink" title="使用yield，提升效率。，循环一次，yield拿一次数据"></a>使用yield，提升效率。，循环一次，yield拿一次数据</h5><p><img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210518155041685.png" alt="image-20210518155041685"></p><h4 id="基本增删改查功能"><a href="#基本增删改查功能" class="headerlink" title="基本增删改查功能"></a>基本增删改查功能</h4><p>N张表，添加时只需要在相应app下的stark文件添加 <code>site.register(表名,自定制类)</code></p><ul><li><p>可定制：</p><ul><li><p>1，排序规则</p><ul><li><p>第一种方法</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RoleConfig</span><span class="token punctuation">(</span>StarkConfig<span class="token punctuation">)</span><span class="token punctuation">:</span>    order_by <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span>    list_display <span class="token operator">=</span> <span class="token punctuation">[</span>StarkConfig<span class="token punctuation">.</span>display_checkbox<span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">,</span>StarkConfig<span class="token punctuation">.</span>display_edit_del<span class="token punctuation">]</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Role<span class="token punctuation">,</span>RoleConfig<span class="token punctuation">)</span></code></pre></li><li><p>第二种(更灵活)</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RoleConfig</span><span class="token punctuation">(</span>StarkConfig<span class="token punctuation">)</span><span class="token punctuation">:</span>    list_display <span class="token operator">=</span> <span class="token punctuation">[</span>StarkConfig<span class="token punctuation">.</span>display_checkbox<span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">,</span>StarkConfig<span class="token punctuation">.</span>display_edit_del<span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">get_order_by</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'[-id'</span><span class="token punctuation">]</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Role<span class="token punctuation">,</span>RoleConfig<span class="token punctuation">)</span></code></pre></li></ul></li><li><p>2.显示列</p><ul><li><p>第一种</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RoleConfig</span><span class="token punctuation">(</span>StarkConfig<span class="token punctuation">)</span><span class="token punctuation">:</span>    list_display <span class="token operator">=</span> <span class="token punctuation">[</span>StarkConfig<span class="token punctuation">.</span>display_checkbox<span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">,</span>StarkConfig<span class="token punctuation">.</span>display_edit_del<span class="token punctuation">]</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Role<span class="token punctuation">,</span>RoleConfig<span class="token punctuation">)</span></code></pre></li><li><p>第二种(更灵活)</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RoleConfig</span><span class="token punctuation">(</span>StarkConfig<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get_list_display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>StarkConfig<span class="token punctuation">.</span>display_checkbox<span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">,</span>StarkConfig<span class="token punctuation">.</span>display_edit_del<span class="token punctuation">]</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Role<span class="token punctuation">,</span>RoleConfig<span class="token punctuation">)</span></code></pre></li></ul></li><li><p>3.显示添加按钮</p><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RoleConfig</span><span class="token punctuation">(</span>StarkConfig<span class="token punctuation">)</span><span class="token punctuation">:</span>    list_display <span class="token operator">=</span> <span class="token punctuation">[</span>StarkConfig<span class="token punctuation">.</span>display_checkbox<span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">,</span>StarkConfig<span class="token punctuation">.</span>display_edit_del<span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">get_add_btn</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#显示</span>            <span class="token keyword">return</span> mark_safe<span class="token punctuation">(</span><span class="token string">'&lt;a href="%s" class= "btn btn-success">添加&lt;/a>'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>reverse_add_url<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#不显示</span>            <span class="token keyword">return</span> Nonesite<span class="token punctuation">.</span>register<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Role<span class="token punctuation">,</span>RoleConfig<span class="token punctuation">)</span></code></pre></li></ul></li><li><p>4.定制ModelForm</p><ul><li><p>第一种</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DepartModelForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>ModelForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> models<span class="token punctuation">.</span>Depart        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>    <span class="token keyword">def</span> <span class="token function">clean_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>cleaned_data<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">DepConfig</span><span class="token punctuation">(</span>StarkConfig<span class="token punctuation">)</span><span class="token punctuation">:</span>    list_display <span class="token operator">=</span> <span class="token punctuation">[</span>StarkConfig<span class="token punctuation">.</span>display_checkbox <span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">,</span>StarkConfig<span class="token punctuation">.</span>display_edit_del<span class="token punctuation">]</span>    model_form_class <span class="token operator">=</span> DepartModelForm</code></pre></li><li><p>第二种</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DepartModelForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>ModelForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> models<span class="token punctuation">.</span>Depart        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>    <span class="token keyword">def</span> <span class="token function">clean_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>cleaned_data<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">DepConfig</span><span class="token punctuation">(</span>StarkConfig<span class="token punctuation">)</span><span class="token punctuation">:</span>    list_display <span class="token operator">=</span> <span class="token punctuation">[</span>StarkConfig<span class="token punctuation">.</span>display_checkbox <span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">,</span>StarkConfig<span class="token punctuation">.</span>display_edit_del<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">get_model_form_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> DepartModelForm</code></pre></li></ul></li><li><p>5.自定义列表（其他）页面</p><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RoleConfig</span><span class="token punctuation">(</span>StarkConfig<span class="token punctuation">)</span><span class="token punctuation">:</span>    order_by <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span>    list_display <span class="token operator">=</span> <span class="token punctuation">[</span>StarkConfig<span class="token punctuation">.</span>display_checkbox<span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">,</span>StarkConfig<span class="token punctuation">.</span>display_edit_del<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">changelist_view</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'自定制列表'</span><span class="token punctuation">)</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Role<span class="token punctuation">,</span>RoleConfig<span class="token punctuation">)</span></code></pre></li></ul></li><li><p>6.增加URL</p><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RoleConfig</span><span class="token punctuation">(</span>StarkConfig<span class="token punctuation">)</span><span class="token punctuation">:</span>    order_by <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span>    list_display <span class="token operator">=</span> <span class="token punctuation">[</span>StarkConfig<span class="token punctuation">.</span>display_checkbox<span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">,</span>StarkConfig<span class="token punctuation">.</span>display_edit_del<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">extra_url</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">[</span>            path<span class="token punctuation">(</span><span class="token string">'xxx/'</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>xxx<span class="token punctuation">)</span>        <span class="token punctuation">]</span>        <span class="token keyword">return</span> data    <span class="token keyword">def</span> <span class="token function">xxx</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'....'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'xxxx'</span><span class="token punctuation">)</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Role<span class="token punctuation">,</span>RoleConfig<span class="token punctuation">)</span></code></pre></li><li></li></ul></li></ul></li></ul><h4 id="Day13"><a href="#Day13" class="headerlink" title="Day13"></a>Day13</h4><ul><li><p>​    批量操作</p><ul><li><p>反射</p></li><li><p><code>__name__</code> 获取函数名</p></li><li><p>以切皆对象</p></li><li><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">multi_delete</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        pk_list <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>getlist<span class="token punctuation">(</span><span class="token string">'pk'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>model_class<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>pk__in<span class="token operator">=</span>pk_list<span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># return HttpResponse('删除成功')</span>    multi_delete<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'批量删除'</span></code></pre></li></ul></li><li><p>搜索</p><ul><li>Q</li><li>__contains</li></ul></li><li><p>保留搜索原条件</p><ul><li>QueryDict，request.GET/request.POST</li><li>urlencode()</li><li>_mutable = True</li><li>深拷贝</li><li>urllib.parse.urlencode</li></ul></li><li><p>f分页</p><ul><li>保留原条件</li><li>分页组件</li></ul></li><li><p>拆分</p><ul><li>ChangeList类封装</li><li>inclusion_tag</li><li>生成器（yield）</li></ul></li></ul><h4 id="内容回顾"><a href="#内容回顾" class="headerlink" title="内容回顾"></a>内容回顾</h4><ul><li><p>1.三个类</p><ul><li>ChangeList ：由于列表页面视图函数拥到变量太多，所以把一些变量封装到这里面</li><li>StarkConfig ：生成最终URL和视图对应关系 +默认配置</li><li>AdminSite ：路由分发，保存数据库类和处理该数据类的对象的对应关系<ul><li>​                _regirstry = {]</li></ul></li></ul></li><li><p>2.知识点</p><ul><li><p>inclusion_tag</p></li><li><p>urlencode</p></li><li><p>_meta.model_name</p></li><li><p>_meta.model_label</p></li><li><p>深浅拷贝</p></li><li><p>QueryDict对象不可改 _mutable=True才可改</p></li><li><p>生成器</p></li><li><p>路由分发</p><ul><li>include</li><li>（[],None,None）</li></ul></li><li><p>函数和方法的区别</p></li><li><p>Q对象 ：模糊查询，搜索 作用：构造复杂的查询条件</p><ul><li><pre class=" language-python"><code class="language-python">model<span class="token punctuation">.</span>User<span class="token punctuation">.</span>object<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>name__contains<span class="token operator">=</span><span class="token string">'李'</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>User<span class="token punctuation">.</span>object<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>name__contains<span class="token operator">=</span><span class="token string">'李'</span><span class="token punctuation">,</span>email__contains<span class="token operator">=</span><span class="token string">'李'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#不符合搜索条件 构成 and </span></code></pre></li><li><pre class=" language-python"><code class="language-python">使用Q构造<span class="token comment" spellcheck="true">#####构造查询多个字段共有“李”字的数据########</span>c1<span class="token operator">=</span>Q<span class="token punctuation">(</span><span class="token punctuation">)</span>c1<span class="token punctuation">.</span>connector <span class="token operator">=</span> <span class="token string">"OR"</span>c1<span class="token punctuation">.</span>children<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'name__contains'</span><span class="token punctuation">,</span><span class="token string">'李'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c1<span class="token punctuation">.</span>children<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'email__contains'</span><span class="token punctuation">,</span><span class="token string">'李'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>User<span class="token punctuation">.</span>object<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>c1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#####构造查询id>2和age&lt;=5的数据########</span>c2<span class="token operator">=</span>Q<span class="token punctuation">(</span><span class="token punctuation">)</span>c2<span class="token punctuation">.</span>connector <span class="token operator">=</span> <span class="token string">"ADN"</span>c2<span class="token punctuation">.</span>children<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'id__gt'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c2<span class="token punctuation">.</span>children<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'age__lte'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>User<span class="token punctuation">.</span>object<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>c2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#####构造查询 多个字段共有“李”字的数据 和  id>2和age&lt;=5的数据########</span>c1<span class="token operator">=</span>Q<span class="token punctuation">(</span><span class="token punctuation">)</span>c1<span class="token punctuation">.</span>connector <span class="token operator">=</span> <span class="token string">"OR"</span>c1<span class="token punctuation">.</span>children<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'name__contains'</span><span class="token punctuation">,</span><span class="token string">'李'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c1<span class="token punctuation">.</span>children<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'email__contains'</span><span class="token punctuation">,</span><span class="token string">'李'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c2<span class="token operator">=</span>Q<span class="token punctuation">(</span><span class="token punctuation">)</span>c2<span class="token punctuation">.</span>connector <span class="token operator">=</span> <span class="token string">"ADN"</span>c2<span class="token punctuation">.</span>children<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'id__gt'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c2<span class="token punctuation">.</span>children<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'age__lte'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c3<span class="token operator">=</span>Q<span class="token punctuation">(</span><span class="token punctuation">)</span>c3<span class="token punctuation">.</span>connector <span class="token operator">=</span> <span class="token string">"ADN"</span>c3<span class="token punctuation">.</span>add<span class="token punctuation">(</span>c1<span class="token punctuation">,</span><span class="token string">"ADN"</span><span class="token punctuation">)</span>c3<span class="token punctuation">.</span>add<span class="token punctuation">(</span>c2<span class="token punctuation">,</span><span class="token string">"ADN"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#(name='李' or email='李') and (id>2 and age&lt;=5)</span>model<span class="token punctuation">.</span>User<span class="token punctuation">.</span>object<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>c3<span class="token punctuation">)</span> </code></pre></li></ul></li><li><p>反射</p><ul><li><pre class=" language-python"><code class="language-python">list_display    row<span class="token punctuation">.</span>name    getattr<span class="token punctuation">(</span>row<span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">)</span>action<span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre></li></ul></li><li><p>继承</p><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RoleConfig</span><span class="token punctuation">(</span>StarkConfig<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre></li></ul></li><li><p>反向生成url</p><ul><li><pre class=" language-python"><code class="language-python">reverse<span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">)</span>reverse<span class="token punctuation">(</span><span class="token string">'namespace:xxx'</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p>分页（保留搜索条件）</p></li><li><p>ModelForm组件</p></li><li><p>functools.wraps,用于保留原函数的元信息（函数名/函数注释等信息）</p></li><li><p>钩子预留函数（预留可扩展位置）</p></li><li><p>request.GET</p><ul><li> request.GET.get(‘x’)</li><li>request.GET[‘x’]</li><li>request.GET.copy</li><li>request.GET.urlencode（）</li><li>request.GET._mutable = True</li><li>request.GET.getlist(‘xxx’)</li></ul></li><li><p>mark_safe</p><ul><li>xss攻击</li></ul></li><li><p>单例模式</p><ul><li>如果想要做某一件事或者操作某一个数据或者一堆数据用单列</li></ul></li><li><p>获取函数名</p><ul><li><code>__name__</code></li></ul></li><li><p>autodiscover_module  当程序启动起来，去每个app模块下找模块</p></li><li><p>装饰器</p></li></ul></li><li><p>QueryDict对象</p></li><li><p>可迭代对象</p></li><li><p><img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210524092743249.png" alt="image-20210524092743249"> </p></li><li><p>封装</p><ul><li><img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210524094403140.png" alt="image-20210524094403140"></li><li>新封装</li><li><img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210524094326800.png" alt="image-20210524094326800"></li></ul></li><li><p>获取Fk、M2M、o2o、对应的表的所有数据（以Fk举例，其他都是一样的方法）</p><ul><li><p>表关系</p></li><li><p><img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210524095121988.png" alt="image-20210524095121988"></p></li><li><p>函数</p></li><li><p><img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210524095224919.png" alt="image-20210524095224919"></p><ul><li>注意：django版本2.0之前使用 <code>rel</code>  2.0之后使用<code>remote_field</code></li></ul></li></ul></li><li><h4 id="组合搜索"><a href="#组合搜索" class="headerlink" title="组合搜索"></a>组合搜索</h4><p>- </p></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rbac组件</title>
      <link href="/2021/06308.html"/>
      <url>/2021/06308.html</url>
      
        <content type="html"><![CDATA[<h4 id="权限表设计："><a href="#权限表设计：" class="headerlink" title="权限表设计："></a>权限表设计：</h4><ul><li><p>基于角色的权限控制</p><ul><li><p>用户表</p></li><li><table><thead><tr><th align="center">id</th><th align="center">name</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td></tr></tbody></table></li><li><p>角色表</p></li><li><table><thead><tr><th align="center">id</th><th align="center">title</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td></tr></tbody></table></li><li><p>用户角色关系表</p></li><li><table><thead><tr><th align="center">id</th><th align="center">name_id</th><th align="center">title_id</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table></li><li><p>权限表</p></li><li><table><thead><tr><th align="center">id</th><th align="center">url</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td></tr></tbody></table></li><li><p>角色权限关系表</p></li><li><table><thead><tr><th>id</th><th>title_id</th><th>url_id</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table></li></ul></li></ul><h4 id="使用自定义rbac权限组件"><a href="#使用自定义rbac权限组件" class="headerlink" title="使用自定义rbac权限组件"></a>使用自定义rbac权限组件</h4><ol><li><p>拷贝rbac组件</p></li><li><p>清空migration目录</p></li><li><p>在setting注册rbac</p><pre class=" language-python"><code class="language-python"><span class="token string">'rbac'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#django 2.0以上</span></code></pre></li><li><p>数据库迁移录入信息</p></li><li><p>创建超级管理，添加权限信息(组件admin.py已经定制化)</p></li><li><p>用户登录后做权限和菜单的初始化  <code>init_permission</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> web <span class="token keyword">import</span> models<span class="token keyword">from</span> rbac <span class="token keyword">import</span> models<span class="token comment" spellcheck="true">#调用自定义权限和菜单组件</span><span class="token keyword">from</span> rbac<span class="token punctuation">.</span>service<span class="token punctuation">.</span>init_permission <span class="token keyword">import</span> init_permission<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    登录代码，成功后调用init_permission传入request、登录用户信息(obj)    '''</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>       <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'login.html'</span><span class="token punctuation">)</span>    name<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>    pwd<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pwd'</span><span class="token punctuation">)</span>    obj <span class="token operator">=</span> models<span class="token punctuation">.</span>UserInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>name<span class="token operator">=</span>name<span class="token punctuation">,</span>password<span class="token operator">=</span>pwd<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> obj<span class="token punctuation">:</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'login.html'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'msg'</span><span class="token punctuation">:</span><span class="token string">'用户名密码错误'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    request<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'user_info'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span>obj<span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">:</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">}</span>        init_permission<span class="token punctuation">(</span>request<span class="token punctuation">,</span>obj<span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/customer/list/'</span><span class="token punctuation">)</span></code></pre></li><li><p>应用中间件，进行权限校验</p><pre class=" language-python"><code class="language-python"><span class="token string">'rbac.middleware.rbac.RbacMiddleware'</span></code></pre></li><li><p>设置setting配置文件</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#############权限相关#######################</span>PERMISSION_SESSION_KEY <span class="token operator">=</span> <span class="token string">'permissions_list'</span>MENU_SESSION_KEY <span class="token operator">=</span> <span class="token string">'menu_list'</span><span class="token comment" spellcheck="true">#白名单</span>VALID_URL <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'^/login/$'</span><span class="token punctuation">,</span>    <span class="token string">'^/admin/.*'</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre></li><li><p>显示动态菜单（引入静态文件）、在菜单栏  <code>+{% menu  request %}</code>、最上方导入<code>{% load rbac %}</code></p></li><li><p>粒度控制到按钮</p><ol><li><pre class=" language-python"><code class="language-python"> <span class="token comment" spellcheck="true">#加在需要控制的按钮上</span>    <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> request<span class="token operator">|</span>has_permission<span class="token punctuation">:</span><span class="token string">'add'</span> <span class="token operator">%</span><span class="token punctuation">}</span>               <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"{% url 'add' %}"</span><span class="token operator">></span>增加<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>           <span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span></code></pre></li><li></li></ol></li></ol><h4 id="阶段问题"><a href="#阶段问题" class="headerlink" title="阶段问题"></a>阶段问题</h4><ul><li>权限几张表？5张 (用户，角色，权限，用户角色，权限角色)</li><li>简述权限流程<ul><li>粒度控制到了按钮级别的权限控制</li><li>用户登录成功，获取权限信息，存入session，</li><li>每次请求在中间件中做权限校验，中间件中获取用户请求的url，以及当前用户所拥有的所有权限，然后进行比较，</li><li>使用inclusion_tag实现动态菜单</li></ul></li><li>为什么要把权限存入session</li><li>静态文件和模块文件</li><li>相关技术点<ul><li>orm查询  –去空，–去重</li><li>中间件 （用户登录白名单，权限验证）</li><li>inclusion_tag（自定义页面的一块内容，用的时候只需要调用）</li></ul></li><li></li></ul><p><img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210512115130404.png" alt="image-20210512115130404"></p><h4 id="阶段问题总结（面试常问）"><a href="#阶段问题总结（面试常问）" class="headerlink" title="阶段问题总结（面试常问）"></a>阶段问题总结（面试常问）</h4><ol><li>简述权限流程有<ul><li>粒度控制到了按钮级别的权限控制</li><li>用户登录成功，获取权限信息，存入session，</li><li>每次请求，在中间件中做权限校验，</li><li>使用inclusion_tag实现动态菜单</li></ul></li><li>如何实现控制到按钮的<ul><li>用户登录时，用户所拥有的权限，别名==django路由的name构造成了一个字典；（字典快）</li><li>在页面中写了一个django模板的filter来进行判断是否显示</li></ul></li><li>为什么要使用中间件<ul><li>所有请求在达到视图函数之前，必须经过中间件，所有在中间件中对请求做处理比较简单</li></ul></li><li>模板中的特殊方法：inclusion_tag、simpletag、filter</li><li>权限中使用了几张表<ul><li>六张  用户、角色、用户角色、权限、角色权限、菜单</li></ul></li><li>表中的字段（背表）</li><li>写流程（思维导图）</li></ol><p>特殊字典的构造</p><ul><li><pre class=" language-python"><code class="language-python">权限 <span class="token operator">=</span> <span class="token punctuation">{</span>    权限别名：    <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">"title"</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'url'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'pid'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">"title"</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'url'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'pid'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">"title"</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'url'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'pid'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre></li><li><pre class=" language-python"><code class="language-python">    菜单 <span class="token operator">=</span> <span class="token punctuation">{</span>        菜单ID：<span class="token punctuation">{</span>            title<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>            icon<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>            children<span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuejs组件</title>
      <link href="/2021/06307.html"/>
      <url>/2021/06307.html</url>
      
        <content type="html"><![CDATA[<h5 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h5><ul><li><p>操作流程：</p><ul><li><p>1.组件定义</p></li><li><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment" spellcheck="true">// 1.定义全局组件</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>        <span class="token string">'global_component'</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token string">'&lt;h1>臭宝儿&lt;/h1>'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">)</span>    <span class="token keyword">const</span> one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#one'</span><span class="token punctuation">,</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p>2,组件使用</p></li><li><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"one"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">1</span><span class="token punctuation">.</span>使用组件 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>global_component<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>global_component<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre></li></ul></li></ul><h5 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h5><ul><li><p>操作流程</p><ul><li><p>1.组件定义</p></li><li><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token operator">//</span> <span class="token number">1</span><span class="token punctuation">.</span>定义局部组件    var part_component<span class="token operator">=</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token string">'&lt;h1>臭宝儿&lt;/h1>'</span>        <span class="token punctuation">}</span>        const one <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#one'</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span><span class="token punctuation">{</span>            haha<span class="token punctuation">:</span>part_component<span class="token punctuation">,</span>            hehe<span class="token punctuation">:</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token string">'&lt;h1>香宝儿&lt;/h1>'</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p>2,组件使用</p></li><li><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"one"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">.</span>使用组件 <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>    <span class="token operator">&lt;</span>haha<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>haha<span class="token operator">></span>    <span class="token operator">&lt;</span>hehe<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>hehe<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre></li></ul></li></ul><h4 id="全局局部嵌套"><a href="#全局局部嵌套" class="headerlink" title="全局局部嵌套"></a>全局局部嵌套</h4><ul><li><p>操作流程</p><ul><li><p>1.组件定义：</p></li><li><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment" spellcheck="true">//1.定义局部组件</span>    <span class="token keyword">var</span> part1 <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">'&lt;span>胥荣荣&lt;/span>'</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 1.定义全局组件</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>        <span class="token string">'global_component'</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token string">'&lt;div>臭宝儿,&lt;part1>&lt;/part1> &lt;/div>'</span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span><span class="token punctuation">{</span>part1<span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">)</span></code></pre></li></ul></li><li><p>2,组件使用:</p></li><li><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"one"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">1</span><span class="token punctuation">.</span>使用组件 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>global_component<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>global_component<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre></li><li></li></ul><h4 id="组件data"><a href="#组件data" class="headerlink" title="组件data"></a>组件data</h4><ul><li><p>操作流程：</p><ul><li><p>1.组件定义；</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment" spellcheck="true">// 1.定义全局组件</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>        <span class="token string">'global_component'</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token string">'&lt;h1>臭宝儿是{{name}}年龄{{are}}&lt;/h1>'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    name<span class="token punctuation">:</span><span class="token string">'胥荣荣'</span><span class="token punctuation">,</span>                    are<span class="token punctuation">:</span><span class="token string">'19'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">)</span>    <span class="token keyword">const</span> one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#one'</span><span class="token punctuation">,</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><ul><li><p>2,组件使用:</p></li><li><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"one"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">1</span><span class="token punctuation">.</span>使用组件 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>global_component<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>global_component<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vuejs组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视图额外动作</title>
      <link href="/2021/06305.html"/>
      <url>/2021/06305.html</url>
      
        <content type="html"><![CDATA[<h5 id="1-视图额外动作"><a href="#1-视图额外动作" class="headerlink" title="1.视图额外动作"></a>1.视图额外动作</h5><ul><li><p>目的：扩展视图集功能，添加额外动作</p></li><li><p>操作流程</p><ul><li><p>1，路由</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'book/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>BookModelViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'get'</span><span class="token punctuation">:</span> <span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'post'</span><span class="token punctuation">:</span> <span class="token string">'create'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'book/&lt;int:pk>'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>BookModelViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'get'</span><span class="token punctuation">:</span> <span class="token string">'retrieve'</span><span class="token punctuation">,</span> <span class="token string">'put'</span><span class="token punctuation">:</span> <span class="token string">'update'</span><span class="token punctuation">,</span> <span class="token string">'delete'</span><span class="token punctuation">:</span> <span class="token string">'destroy'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'book/bread'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>BookModelViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'get'</span><span class="token punctuation">:</span> <span class="token string">'bread_book'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre></li><li><p>2，视图</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>viewsets <span class="token keyword">import</span> ModelViewSet<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> <span class="token punctuation">.</span>serializers <span class="token keyword">import</span> BookInfoModelSerializer<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token comment" spellcheck="true">#视图集</span><span class="token keyword">class</span> <span class="token class-name">BookModelViewSet</span><span class="token punctuation">(</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> BookInfoModelSerializer    <span class="token comment" spellcheck="true">#获取阅读量大于20的</span>    <span class="token keyword">def</span> <span class="token function">bread_book</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#获取指定书籍</span>        books<span class="token operator">=</span>BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>bread__gt<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#创建序列化器对象</span>        serializer<span class="token operator">=</span>self<span class="token punctuation">.</span>serializer_class<span class="token punctuation">(</span>instance<span class="token operator">=</span>books<span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#返回数据</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span></code></pre></li><li><p>视图集额外动作，partial</p><ul><li><p>1，路由</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    path<span class="token punctuation">(</span><span class="token string">'book/update_book_bread/&lt;int:pk>'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>BookModelViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'put'</span><span class="token punctuation">:</span> <span class="token string">'update_book_bread'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre></li><li><p>视图</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BookModelViewSet</span><span class="token punctuation">(</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> BookInfoModelSerializer    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">update_book_bread</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        book <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#拿到一调数据</span>        data <span class="token operator">=</span> request<span class="token punctuation">.</span>data <span class="token comment" spellcheck="true">#获取页面数据 </span>        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>instance<span class="token operator">=</span>book<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>partial <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#partial同意修改单个</span>         serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#校验</span>        serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#保存</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">,</span>status<span class="token operator">=</span><span class="token number">201</span><span class="token punctuation">)</span> 返回</code></pre></li><li></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模型类序列化器</title>
      <link href="/2021/06304.html"/>
      <url>/2021/06304.html</url>
      
        <content type="html"><![CDATA[<h4 id="ModelSerializer"><a href="#ModelSerializer" class="headerlink" title="ModelSerializer"></a>ModelSerializer</h4><ul><li><p>目的：可以使用ModelSerializer根据模型类生成字段</p></li><li><p>作用：</p><ul><li><p>1.可以参考模型自动生成字段，还可以自己编写字段</p></li><li><p>提供了create方法和update方法</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">class</span> <span class="token class-name">BookModelSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    mobile <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span>min_length<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'手机号'</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> BookInfo  <span class="token comment" spellcheck="true"># 参考模型类生成字段</span>                  fields <span class="token operator">=</span> <span class="token string">'__all__'</span>  <span class="token comment" spellcheck="true">#生成所有字段</span>            fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'btitle'</span><span class="token punctuation">,</span> <span class="token string">'bpub_date'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#指明生成相应字段</span>                exclude <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#使用exclude可以明确排除掉     </span>                read_only_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'bread'</span><span class="token punctuation">,</span> <span class="token string">'bcomment'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#可以通过read_only_fields指明只读字段，即仅用于序列化输出的字段</span>                <span class="token comment" spellcheck="true">#给自动生成的字段添加属性（自动生成字段不满足需求时）</span>         extra_kwargs <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'bread'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'min_value'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'required'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">'bcomment'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'min_value'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'required'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>        </code></pre></li><li><p>视图代码：</p></li><li><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">''''======================模型类序列化器，测试序列化====================================='''</span><span class="token keyword">from</span> book<span class="token punctuation">.</span>models <span class="token keyword">import</span> BookInfo<span class="token keyword">from</span> book<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> BookModelSerializer<span class="token comment" spellcheck="true"># 序列化</span><span class="token comment" spellcheck="true"># １．获取模型类对象</span>book <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>book<span class="token punctuation">.</span>mobile <span class="token operator">=</span> <span class="token string">'17691394303'</span> <span class="token comment" spellcheck="true">#因为mobile 是在序列化器中自定义的字段，数据库没有，所以要用必须指定(或者在序列化器中指定mobile字典：write_only(只写，只进行反序列化))</span><span class="token comment" spellcheck="true"># ２．创建序列化器对象</span>serializer <span class="token operator">=</span> BookModelSerializer<span class="token punctuation">(</span>instance<span class="token operator">=</span>book<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3.输出</span><span class="token keyword">print</span><span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span></code></pre></li><li><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># ======================模型类序列化器，测试反序列化 create添加数据=====================================</span><span class="token keyword">from</span> book<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> BookModelSerializer<span class="token comment" spellcheck="true"># 1.准被数据</span>book_dict <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"btitle"</span><span class="token punctuation">:</span><span class="token string">"三国演义"</span><span class="token punctuation">,</span>    <span class="token string">"bpub_date"</span><span class="token punctuation">:</span><span class="token string">"2019-01-02"</span><span class="token punctuation">,</span>    <span class="token string">"bread"</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">,</span>    <span class="token string">"bcomment"</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># ２．创建序列化器对象</span>serializer <span class="token operator">=</span> BookModelSerializer<span class="token punctuation">(</span>data<span class="token operator">=</span>book_dict<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3.校验,入库</span>serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># ======================模型类序列化器，测试反序列化 update更新数据=====================================</span><span class="token keyword">from</span> book<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> BookModelSerializer<span class="token keyword">from</span> book<span class="token punctuation">.</span>models <span class="token keyword">import</span> BookInfo<span class="token comment" spellcheck="true"># 1.准被数据</span>book_dict <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"btitle"</span><span class="token punctuation">:</span><span class="token string">"红楼梦"</span><span class="token punctuation">,</span>    <span class="token string">"bpub_date"</span><span class="token punctuation">:</span><span class="token string">"2019-01-02"</span><span class="token punctuation">,</span>    <span class="token string">"bread"</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">,</span>    <span class="token string">"bcomment"</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 序列化</span><span class="token comment" spellcheck="true"># １．获取模型类对象</span>book <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ２．创建序列化器对象</span>serializer <span class="token operator">=</span> BookModelSerializer<span class="token punctuation">(</span>data<span class="token operator">=</span>book_dict<span class="token punctuation">,</span>instance<span class="token operator">=</span>book<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3.校验,入库</span>serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><img src="http://pic.ihcnb.cn/iHcnb/ec1f15f47acbd.png" alt="resizeApi.png"></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/06306.html"/>
      <url>/2021/06306.html</url>
      
        <content type="html"><![CDATA[<pre><code>在序列化器重写category（外键）#把 外键category的输出转换成汉字，多对一不需要加  many= true  可以获取到namecategory = serializers.StringRelatedField(read_only=True) 关联GoodsCategory</code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列化器</title>
      <link href="/2021/06303.html"/>
      <url>/2021/06303.html</url>
      
        <content type="html"><![CDATA[<h4 id="序列化器："><a href="#序列化器：" class="headerlink" title="序列化器："></a>序列化器：</h4><p>作用：<img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210416101325153.png" alt="image-20210416101325153"></p><h5 id="序列化："><a href="#序列化：" class="headerlink" title="序列化："></a>序列化：</h5><p>​    数据之间的相互转换，数据结构类型转换为其他格式（字典，JSON，XML等），将Django的模型类对象转换为JSON字符串</p><h5 id="反序列化："><a href="#反序列化：" class="headerlink" title="反序列化："></a>反序列化：</h5><p>​    反之，将其他格式转换为程序整的数据，例如将JSON字符串转换为Django中的模型类对象</p><h5 id="1-1定义："><a href="#1-1定义：" class="headerlink" title="1.1定义："></a>1.1定义：</h5><p>能够参考模型序列化器：</p><pre><code>"""定义序列化器１．定义类，继承自Serializer２．和模型类，字段，类型，选项一样    read_only=True　只读    label　字段说明"""</code></pre><p>代码(book/serializers.py)：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1.定义序列化器</span><span class="token keyword">class</span> <span class="token class-name">BookInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    id <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'id'</span><span class="token punctuation">,</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    btitle <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'名称'</span><span class="token punctuation">)</span>    bpub_date <span class="token operator">=</span> serializers<span class="token punctuation">.</span>DateField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'发布日期'</span><span class="token punctuation">)</span>    bread <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'阅读量'</span><span class="token punctuation">)</span>    bcomment <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'评论数'</span><span class="token punctuation">)</span>    is_delete <span class="token operator">=</span> serializers<span class="token punctuation">.</span>BooleanField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'逻辑删除'</span><span class="token punctuation">)</span></code></pre><p>代码(book/model.py)：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token comment" spellcheck="true">#定义图书模型类</span><span class="token keyword">class</span> <span class="token class-name">BookInfo</span><span class="token punctuation">(</span>models<span class="token punctuation">)</span><span class="token punctuation">:</span>    btitle <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">'名称'</span><span class="token punctuation">)</span>    bpub_date <span class="token operator">=</span> models<span class="token punctuation">.</span>DateField<span class="token punctuation">(</span>verbose_name<span class="token operator">=</span><span class="token string">'发布日期'</span><span class="token punctuation">)</span>    bread <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">'阅读量'</span><span class="token punctuation">)</span>    bcomment <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">'评论数'</span><span class="token punctuation">)</span>    is_delete <span class="token operator">=</span> models<span class="token punctuation">.</span>BooleanField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">'逻辑删除'</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">'tb_books'</span> <span class="token comment" spellcheck="true">#　知名数据库名称</span>        verbose_name <span class="token operator">=</span> <span class="token string">'图书'</span> <span class="token comment" spellcheck="true">#ａｄｍｉｎ站点中显示的名称</span>        verbose_name_plural <span class="token operator">=</span> verbose_name <span class="token comment" spellcheck="true">#显示的复数名称</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''定义每个数据对象的显示信息'''</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>btitle</code></pre><h5 id="1-2序列化器，序列化单个对象"><a href="#1-2序列化器，序列化单个对象" class="headerlink" title="1.2序列化器，序列化单个对象"></a>1.2序列化器，序列化单个对象</h5><p>​    操作流程(book/view.py)</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''===========1.序列化器，序列化单个书籍对象==========='''</span><span class="token keyword">from</span> <span class="token punctuation">.</span>serializers <span class="token keyword">import</span> BookInfoSerializer<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> BookInfo<span class="token comment" spellcheck="true">#1.获取书籍对象</span>book <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2.创建序列化器，instance，表示要序列化的对象</span>serializer <span class="token operator">=</span> BookInfoSerializer<span class="token punctuation">(</span>instance<span class="token operator">=</span>book<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3．转换数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''结果：{'id': 1, 'btitle': '西游记', 'bpub_date': '2021-04-21', 'bread': 30, 'bcomment': 39, 'is_delete': False}'''</span></code></pre><p>注意点：<br>    BookInfoSerializer(instance=book)</p><p>​        instance=book：表示将book序列化</p><p>​    serializer.data：获取序列化的结果</p><h5 id="序列化器，序列化列表"><a href="#序列化器，序列化列表" class="headerlink" title="序列化器，序列化列表"></a>序列化器，序列化列表</h5><p>​    操作流程(book/view.py)</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1.获取书籍对象</span>books <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2.创建序列化器，instance，表示要序列化的对象,many=True　表示序列化多个对象</span>serializer <span class="token operator">=</span> BookInfoSerializer<span class="token punctuation">(</span>instance<span class="token operator">=</span>books<span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3．转换数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''结果：[OrderedDict([('id', 1), ('btitle', '西游记'), ('bpub_date', '2021-04-21'), ('bread', 30), ('bcomment', 39), ('is_delete', False)]), OrderedDict([('id', 2), ('btitle', '水浒传'), ('bpub_date', '2021-04-08'), ('bread', 40), ('bcomment', 30), ('is_delete', False)])]'''</span></code></pre><h5 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h5><p>​    BookInfoSerializer(instance=book,many=True)</p><p>​        many=True：表示序列化多个对象</p><h5 id="英雄序列化器"><a href="#英雄序列化器" class="headerlink" title="英雄序列化器"></a>英雄序列化器</h5><p>​    操作流程(book/serializers.py):</p><p>定义英雄序列化器：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">HeroInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""英雄数据序列化器"""</span>    GENDER_CHOICES <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'male'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'female'</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    id <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'ID'</span><span class="token punctuation">,</span> read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    hname <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'名字'</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>    hgender <span class="token operator">=</span> serializers<span class="token punctuation">.</span>ChoiceField<span class="token punctuation">(</span>choices<span class="token operator">=</span>GENDER_CHOICES<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'性别'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    hcomment <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'描述信息'</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> allow_null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>定义关联字段：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">HeroInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">#1,添加外键,主键表示 必须提供`queryset` 选项, 或者设置 read_only=`True`.显示外键</span>    <span class="token comment" spellcheck="true"># hbook = serializers.PrimaryKeyRelatedField(queryset=BookInfo.objects.all())</span>    <span class="token comment" spellcheck="true"># hbook = serializers.PrimaryKeyRelatedField(read_only=True)</span>    <span class="token comment" spellcheck="true"># 结果：{'id': 1, 'hname': '吴承恩', 'hgender': 1, 'hcomment': '孙悟空', 'hbook': 1}</span>    <span class="token comment" spellcheck="true">#2,添加外键, 来自于关联模型类, __str__的返回值　外键名称</span>    <span class="token comment" spellcheck="true"># hbook = serializers.StringRelatedField(read_only=True)</span>    <span class="token comment" spellcheck="true"># 结果：{'id': 1, 'hname': '吴承恩', 'hgender': 1, 'hcomment': '孙悟空', 'hbook': '西游记'}</span>    <span class="token comment" spellcheck="true">#3,添加外键,关联另外一个序列化器　返回外键关联的所有信息</span>    hbook <span class="token operator">=</span> BookInfoSerializer<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 结果：{'id': 1, 'hname': '吴承恩', 'hgender': 1, 'hcomment': '孙悟空', 'hbook': OrderedDict([('id', 1), ('btitle', '西游记'), ('bpub_date', '2021-04-21'), ('bread', 30), ('bcomment', 39), ('is_delete', False)])}</span></code></pre><h5 id="书籍序列化器，关联many"><a href="#书籍序列化器，关联many" class="headerlink" title="书籍序列化器，关联many"></a>书籍序列化器，关联many</h5><p>​    目的：能够序列化书籍的时候，输出关联作者信息</p><p>​    操作流程（book/serializers.py）：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BookInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    id <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'id'</span><span class="token punctuation">,</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    btitle <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'名称'</span><span class="token punctuation">)</span>    bpub_date <span class="token operator">=</span> serializers<span class="token punctuation">.</span>DateField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'发布日期'</span><span class="token punctuation">)</span>    bread <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'阅读量'</span><span class="token punctuation">)</span>    bcomment <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'评论数'</span><span class="token punctuation">)</span>    is_delete <span class="token operator">=</span> serializers<span class="token punctuation">.</span>BooleanField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'逻辑删除'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#1.用书籍查作者：关联英雄主键，many=True,一方中，序列化多方需要加上　(获取ｉｄ)</span>    <span class="token comment" spellcheck="true"># heroinfo_set = serializers.PrimaryKeyRelatedField(read_only=True,many=True)</span>    <span class="token comment" spellcheck="true">#２．关联英雄,__str__返回值（获取ｎａｍｅ）</span>    heroinfo_set <span class="token operator">=</span> serializers<span class="token punctuation">.</span>StringRelatedField<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>​    注意：</p><p>​            many=True,一方中，序列化多方需要加上</p><p>==============================================</p><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><p>1.1数据类型验证</p><ul><li><p>目的：理解序列化器中的字段，对数据进行校验的过程</p></li><li><p>常见的字段类型：</p><ol><li><p>CharField：字段串</p></li><li><p>······</p></li></ol></li></ul><p>1.2反序列化选项验证</p><p><img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210419093003168.png" alt="image-20210419093003168"></p><p>判断max_length等等</p><ul><li>requred：默认是True，必须要传递，除非设置了 default | false | read_only</li><li>read_only： 只读，不进行反序列化</li></ul><p>1.3反序列化单个字段验证 ：</p><p>​    目的：定义单个字段校验</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BookInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token comment" spellcheck="true"># 反序列化单个字段校验 validate多字段校验，加上字段名是单个字段校验</span>    <span class="token keyword">def</span> <span class="token function">validate_btitle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token comment" spellcheck="true"># 校验ｖａｌｕｅ的内容</span>         <span class="token keyword">if</span> <span class="token string">'金瓶'</span> <span class="token operator">not</span> <span class="token keyword">in</span> value<span class="token punctuation">:</span>             <span class="token keyword">raise</span>  serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string">'书籍不包含金瓶'</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> value</code></pre><ul><li>注意点：<ul><li>固定格式：<br>def validate_字段名称(self, value):<ul><li>pass</li></ul></li></ul></li></ul><p>1.4 反序列化，多个字段validate验证</p><ul><li><p>目的：</p></li><li><p>代码展示：</p></li><li><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#多字段校验</span>    <span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param attrs: 外界传过来的，book_dict        :return:         """</span>        <span class="token comment" spellcheck="true">#1．获取阅读量，评论量</span>        bread <span class="token operator">=</span> attrs<span class="token punctuation">[</span><span class="token string">'bread'</span><span class="token punctuation">]</span>        bcomment <span class="token operator">=</span> attrs<span class="token punctuation">[</span><span class="token string">'bcomment'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#2.判断</span>        <span class="token keyword">if</span> bcomment <span class="token operator">></span> bread<span class="token punctuation">:</span>            <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string">'评论量大于阅读量'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#返回：</span>        <span class="token keyword">return</span> attrs</code></pre></li><li><p>注意：</p><ul><li>校验不通过的时候一定要抛出异常</li></ul></li></ul><p>1.5反序列化，自定义验证方法</p><p>1.6 反序列化，create保存数据</p><ul><li><p>视图层：</p><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> book<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> BookInfoSerializer<span class="token comment" spellcheck="true"># 1.准备数据</span>book_dict <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"btitle"</span><span class="token punctuation">:</span><span class="token string">"金瓶x-插画版"</span><span class="token punctuation">,</span>    <span class="token string">"bpub_date"</span><span class="token punctuation">:</span><span class="token string">"2019-01-01"</span><span class="token punctuation">,</span>    <span class="token string">"bread"</span><span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">,</span>    <span class="token string">"bcomment"</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#2,创建序列化器，校验</span>serializer <span class="token operator">=</span> BookInfoSerializer<span class="token punctuation">(</span>data<span class="token operator">=</span>book_dict<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># serializer.is_valid()</span>serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#校验不通过，直接报错</span><span class="token comment" spellcheck="true"># ３．输出</span>serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p>序列化器代码</p><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token comment" spellcheck="true">#1.定义序列化器</span><span class="token keyword">from</span> book<span class="token punctuation">.</span>models <span class="token keyword">import</span> BookInfo<span class="token keyword">class</span> <span class="token class-name">BookInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">#实现create方法</span>    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        :param validated_data: 校验成功子后的数据        :return:        '''</span>        <span class="token comment" spellcheck="true">#1.创建ｂｏｏｋ对象，入库</span>        book <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>validated_data<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#2.返回</span>        <span class="token keyword">return</span> book</code></pre></li></ul></li><li><p>注意点：</p><ul><li>当使用序列化器调用sava方法的时候，执行的就是序列化器中的create方法</li></ul></li></ul><p>1.7 反序列化，update更新数据</p><ul><li><p>视图层：</p><ul><li><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''===========３.序列化器，反序列化,update更新数据==========='''</span><span class="token string">''</span><span class="token keyword">from</span> book<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> BookInfoSerializer<span class="token keyword">from</span> book<span class="token punctuation">.</span>models <span class="token keyword">import</span> BookInfo<span class="token comment" spellcheck="true"># 1.准备数据</span>book_dict <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"btitle"</span><span class="token punctuation">:</span><span class="token string">"水浒传"</span><span class="token punctuation">,</span>    <span class="token string">"bpub_date"</span><span class="token punctuation">:</span><span class="token string">"2019-01-01"</span><span class="token punctuation">,</span>    <span class="token string">"bread"</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">,</span>    <span class="token string">"bcomment"</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#要更新的数据</span>book <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2,创建序列化器，校验</span>serializer <span class="token operator">=</span> BookInfoSerializer<span class="token punctuation">(</span>instance<span class="token operator">=</span>book<span class="token punctuation">,</span>data<span class="token operator">=</span>book_dict<span class="token punctuation">)</span>serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#校验不通过，直接报错</span><span class="token comment" spellcheck="true"># ３．入库</span>serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p>序列化器代码:</p><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token comment" spellcheck="true">#1.定义序列化器</span><span class="token keyword">from</span> book<span class="token punctuation">.</span>models <span class="token keyword">import</span> BookInfo<span class="token keyword">class</span> <span class="token class-name">BookInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token comment" spellcheck="true">#实现update方法：</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        :param instance: 外界传过来的值        :param validated_data:　验成功子后的数据        :return:        '''</span>        <span class="token comment" spellcheck="true"># １.更新数据</span>        instance<span class="token punctuation">.</span>btitle <span class="token operator">=</span> validated_data<span class="token punctuation">[</span><span class="token string">'btitle'</span><span class="token punctuation">]</span>        instance<span class="token punctuation">.</span>bpub_date <span class="token operator">=</span> validated_data<span class="token punctuation">[</span><span class="token string">'bpub_date'</span><span class="token punctuation">]</span>        instance<span class="token punctuation">.</span>bread <span class="token operator">=</span> validated_data<span class="token punctuation">[</span><span class="token string">'bread'</span><span class="token punctuation">]</span>        instance<span class="token punctuation">.</span>bcomment <span class="token operator">=</span> validated_data<span class="token punctuation">[</span><span class="token string">'bcomment'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 2.入库</span>        instance<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> instance</code></pre></li></ul></li></ul><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p><em><img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210419163100154.png" alt="image-20210419163100154"></em>*</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>restful风格</title>
      <link href="/2021/06302.html"/>
      <url>/2021/06302.html</url>
      
        <content type="html"><![CDATA[<h4 id="restful风格介绍："><a href="#restful风格介绍：" class="headerlink" title="restful风格介绍："></a>restful风格介绍：</h4><p>​    一种软件架构风格，设计风格，不是标准 ，可以解决不通程序员共同协作的代码不和谐问题</p><h4 id="设计风格："><a href="#设计风格：" class="headerlink" title="设计风格："></a>设计风格：</h4><ul><li><p>域名：api应该部署到转有域名下</p></li><li><p>路径：不能用动词</p></li><li><p>版本：在地址栏拼接</p></li><li><p>http动词：不同的请求方式，表示操作不同的资源</p></li><li><p>过滤：以问号的形式携带</p></li><li><p>状态：200,201,204，401,403,404,500</p></li><li><p>返回值：json</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django REST framework</title>
      <link href="/2021/06301.html"/>
      <url>/2021/06301.html</url>
      
        <content type="html"><![CDATA[<h1 id="Django-REST-framework-简介"><a href="#Django-REST-framework-简介" class="headerlink" title="Django REST framework 简介"></a>Django REST framework 简介</h1><ol><li>在序列化与反序列化时，虽然操作的数据不尽相同，但是执行的过程却是相似的，也就是说这部分代码是可以复用简化编写的。</li><li>在开发REST API的视图中，虽然每个视图具体操作的数据不同，但增、删、改、查的实现流程基本套路化，所以这部分代码也是可以复用简化编写的：<ul><li><strong>增</strong>：校验请求数据 -&gt; 执行反序列化过程 -&gt; 保存数据库 -&gt; 将保存的对象序列化并返回</li><li><strong>删</strong>：判断要删除的数据是否存在 -&gt; 执行数据库删除</li><li><strong>改</strong>：判断要修改的数据是否存在 -&gt; 校验请求的数据 -&gt; 执行反序列化过程 -&gt; 保存数据库 -&gt; 将保存的对象序列化并返回</li><li><strong>查</strong>：查询数据库 -&gt; 将数据序列化并返回</li></ul></li></ol><p><strong>Django REST framework可以帮助我们简化上述两部分的代码编写，大大提高REST API的开发速度。</strong></p><h2 id="认识Django-REST-framework"><a href="#认识Django-REST-framework" class="headerlink" title="认识Django REST framework"></a>认识Django REST framework</h2><p><img src="file:///D:/BaiduNetdiskDownload/DRF%E9%85%8D%E5%A5%97%E8%B5%84%E6%96%99/%E7%AC%AC1%E5%A4%A9/3_%E8%B5%84%E6%96%99/01_DRF%E8%AE%B2%E4%B9%89/images/drf_logo.png" alt="drf_logo"></p><p>Django REST framework 框架是一个用于构建Web API 的强大而又灵活的工具。</p><p>通常简称为DRF框架 或 REST framework。</p><p>DRF框架是建立在Django框架基础之上，由Tom Christie大牛二次开发的开源项目。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>提供了定义序列化器Serializer的方法，可以快速根据 Django ORM 或者其它库自动序列化/反序列化；</li><li>提供了丰富的类视图、Mixin扩展类，简化视图的编写；</li><li>丰富的定制层级：函数视图、类视图、视图集合到自动生成 API，满足各种需要；</li><li>多种身份认证和权限认证方式的支持；</li><li>内置了限流系统；</li><li>直观的 API web 界面；</li><li>可扩展性，插件丰富</li></ul><h1 id="环境安装与配置"><a href="#环境安装与配置" class="headerlink" title="环境安装与配置"></a>环境安装与配置</h1><p>DRF需要以下依赖：</p><ul><li>Python (2.7, 3.2, 3.3, 3.4, 3.5, 3.6)</li><li>Django (1.10, 1.11, 2.0)</li></ul><p><strong>DRF是以Django扩展应用的方式提供的，所以我们可以直接利用已有的Django环境而无需从新创建。（若没有Django环境，需要先创建环境安装Django）</strong></p><h2 id="1-安装DRF"><a href="#1-安装DRF" class="headerlink" title="1. 安装DRF"></a>1. 安装DRF</h2><pre class=" language-shell"><code class="language-shell">pip install djangorestframework</code></pre><h2 id="2-添加rest-framework应用"><a href="#2-添加rest-framework应用" class="headerlink" title="2. 添加rest_framework应用"></a>2. 添加rest_framework应用</h2><p>我们利用在Django框架学习中创建的demo工程，在<strong>settings.py</strong>的<strong>INSTALLED_APPS</strong>中添加’rest_framework’。</p><pre class=" language-python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token string">'rest_framework'</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>接下来就可以使用DRF进行开发了。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux必知文件夹和常用操作</title>
      <link href="/2021/063017.html"/>
      <url>/2021/063017.html</url>
      
        <content type="html"><![CDATA[<h4 id="9Linux目录结构"><a href="#9Linux目录结构" class="headerlink" title="9Linux目录结构"></a>9Linux目录结构</h4><p>​    var:存放经常变化的文件</p><p>​    home：普通用户目录</p><p>​    etc：存放配置文件目录</p><p>​    root：特权用户目录</p><p>​    opt：大型软件存放目录</p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><pre><code>命令     条件/参数    对象/文件/目录</code></pre><p>修改linux支持中文的命令</p><pre><code>export LC_ALL=zh_CN.UTF-8</code></pre><h5 id="对文件的增删改查"><a href="#对文件的增删改查" class="headerlink" title="对文件的增删改查"></a>对文件的增删改查</h5><h6 id="查"><a href="#查" class="headerlink" title="查"></a>查</h6><pre><code>1.ls2.ls . 查看当前目录所有文件3.ls .. 查看上一级目录所有文件4.pwd 查看当前路径查看文件夹所有内容（包括隐藏）： ls -a 文件夹</code></pre><h6 id="改-路径"><a href="#改-路径" class="headerlink" title="改(路径)"></a>改(路径)</h6><pre><code>cd </code></pre><h6 id="删"><a href="#删" class="headerlink" title="删"></a>删</h6><pre><code>rm 操作对象  删除文件rm -r 文件夹名  #递归删除文件夹，以及内部rm -f 文件名 强制删除文件，不需要提醒</code></pre><h6 id="增"><a href="#增" class="headerlink" title="增"></a>增</h6><pre><code>mkdir 新建文件夹名称创建普通文件、隐藏文件touch 文件名 、 touch  .文件名</code></pre><p>绝对路径：从根目录开始</p><p>相对路径：非从根目录开始</p><p>远程连接命令（xshell）：</p><pre><code>ssh root@ip</code></pre><p>输出命令所在绝对路径</p><pre><code>[root@localhost ~]# which python  /usr/bin/python</code></pre><p>python3添加环境变量</p><p><img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210326164529669.png" alt="image-20210326164529669"></p><h5 id="linux系统全局环境变量"><a href="#linux系统全局环境变量" class="headerlink" title="linux系统全局环境变量"></a>linux系统全局环境变量</h5><pre><code>etc/profilevim /etc/profile</code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>crm项目开发</title>
      <link href="/2021/062910.html"/>
      <url>/2021/062910.html</url>
      
        <content type="html"><![CDATA[<h5 id="第一部分：权限组件"><a href="#第一部分：权限组件" class="headerlink" title="第一部分：权限组件"></a>第一部分：权限组件</h5><p>…</p><h5 id="第二部分：stark组件"><a href="#第二部分：stark组件" class="headerlink" title="第二部分：stark组件"></a>第二部分：stark组件</h5><ol><li><p>如何使用：</p><ol><li><p>在app编写 stark.py</p></li><li><p>在stark.py中进行定制</p><ul><li><p>默认配置：</p><p><code>site.register(models.Project)</code></p></li><li><p>自定义配置：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Projfig</span><span class="token punctuation">(</span>StarkConfig<span class="token punctuation">)</span><span class="token punctuation">:</span>     list_filter <span class="token operator">=</span> <span class="token punctuation">[</span>Option<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span>    组合搜搜    search_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#模糊搜索</span>    action_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#批量操作</span>    list_display <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#表格式列表上显示的字段</span>    order_by <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#排序</span>    add_btn <span class="token comment" spellcheck="true">#是否显示添加按钮</span>    model_from_class    <span class="token comment" spellcheck="true">#自定义ModelFrom</span>        <span class="token keyword">def</span> <span class="token function">extra_url</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#自己扩展URl</span>        <span class="token keyword">pass</span>     <span class="token keyword">def</span> <span class="token function">get_url</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#自定义url</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">add_view</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#如果配置有逻辑，优先加载当前配置</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">change_view</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">delete_view</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">changelist_view</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Project<span class="token punctuation">,</span>Projfig<span class="token punctuation">)</span></code></pre></li></ul></li></ol></li></ol><h5 id="crm业务开发："><a href="#crm业务开发：" class="headerlink" title="crm业务开发："></a>crm业务开发：</h5><h6 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h6><ul><li><p>闭包：</p><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ret <span class="token operator">=</span> a1<span class="token operator">+</span>a3        <span class="token keyword">return</span> ret    <span class="token keyword">return</span> innern1 <span class="token operator">=</span> f1<span class="token punctuation">(</span><span class="token string">'ss'</span><span class="token punctuation">,</span><span class="token string">'xx'</span><span class="token punctuation">)</span>n2 <span class="token operator">=</span> f1<span class="token punctuation">(</span><span class="token string">'sws'</span><span class="token punctuation">,</span><span class="token string">'wxx'</span><span class="token punctuation">)</span>n3 <span class="token operator">=</span> f1<span class="token punctuation">(</span><span class="token string">'ws'</span><span class="token punctuation">,</span><span class="token string">'xxw'</span><span class="token punctuation">)</span>n1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#作用：帮助开发者维护一个“私密”的空间，用于为以后执行提供数据</span></code></pre></li></ul></li><li><p>Form和ModelForm的区别：前者字段手动生成，后者自带</p><ul><li>Form</li></ul></li><li><p>反射</p><ul><li><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#根据字符串的形式导入模块</span><span class="token comment" spellcheck="true">#自定义</span>path <span class="token operator">=</span> <span class="token string">"x1.xx.Foo"</span>module_path<span class="token punctuation">,</span>class_name <span class="token operator">=</span> path<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">.</span>maxsplit<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">import</span> importlibm <span class="token operator">=</span> importlib<span class="token punctuation">.</span>import_module<span class="token punctuation">(</span>module_path<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#Foo类</span>cls <span class="token operator">=</span> getattr<span class="token punctuation">(</span>m<span class="token punctuation">,</span>class_name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#&lt;class 'x1.xx.Foo'></span><span class="token comment" spellcheck="true">#基于django内置模块</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>module_loading <span class="token keyword">import</span> import_stringv<span class="token operator">=</span> import_string<span class="token punctuation">(</span><span class="token string">'x1.xx.Foo'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#&lt;class 'x1.xx.Foo'></span></code></pre></li><li><p>开放封闭原则：对代码封闭对配置开放</p></li></ul></li></ul><h4 id="客户管理"><a href="#客户管理" class="headerlink" title="客户管理"></a>客户管理</h4><ol><li><p>客户管理</p><ol><li>公户、私户、所有客户管理完成<ol><li>所有客户crud操作：销售主管    CustConfig</li><li>公户客户操作：推广、渠道、销售    PublicCustConfig</li><li>私户客户操作：销售  PrivateCustConfig</li></ol></li><li>公户和私户之间操作：<ol><li>公：申请</li><li>私：移除</li></ol></li><li>跟进记录<ol><li>所有跟进记录操作</li><li>私户跟进记录</li></ol></li></ol></li><li><p>教学管理</p><ol><li>直接操作学生表，伪造信息</li><li>上课记录<ol><li>创建上课记录</li><li>初始化学生的学习记录</li></ol></li></ol></li><li><p>公户</p><ol><li>渠道部</li><li>推广部</li></ol></li><li><p>私户</p><ol><li>— 销售</li></ol></li><li><p>跟进记录</p></li><li><p>缴费 +分班</p><h6 id="内容回顾"><a href="#内容回顾" class="headerlink" title="内容回顾"></a>内容回顾</h6><p>第一部分：权限管理</p><p>第二部分：stark组件</p><p>第三部分：crm业务</p><ol><li><p>crm系统主要用于：</p><ol><li>客户关系·管理</li></ol></li><li><p>主要给谁用：</p><ol><li>销售<ol><li>客户分类：<ol><li>公户</li><li>私户</li><li>全户</li></ol></li><li>客户跟进</li><li>缴费申请</li></ol></li><li>推广<ol><li>在公户中录入有效数据</li></ol></li><li>渠道<ol><li>在公户中录入有效数据</li></ol></li><li>教学，老师<ol><li>上课</li><li>作业</li><li>成绩</li></ol></li><li>教质<ol><li>考勤</li></ol></li><li>学生<ol><li>作业</li><li>查看个人信息</li></ol></li></ol></li><li><h6 id="技术点："><a href="#技术点：" class="headerlink" title="技术点："></a>技术点：</h6><ol><li><p>Form的作用：</p><ol><li>​    对用户提交的一组数据进行校验。</li></ol></li><li><p>ModelForm的作用:</p><ol><li>对用户提交的一组数据进行校验。</li><li>快速实现增加、修改</li></ol></li><li><p>FormSet的作用：</p><ol><li><p>对用户提交的多组数据进行校验。</p></li><li><p>快速实现增加、修改</p></li></ol></li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRM </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

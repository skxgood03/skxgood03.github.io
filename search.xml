<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2021/101015.html"/>
      <url>/2021/101015.html</url>
      
        <content type="html"><![CDATA[<h4 id="记一次正式面试的经历"><a href="#记一次正式面试的经历" class="headerlink" title="记一次正式面试的经历"></a>记一次正式面试的经历</h4><hr><p>​        没错,我出发了.这次真的出发了，不为旅途，不因某人。只为遇见未知的自己，6小时的面试经历，路途的风景也很精彩！</p><p>​        2021年10月9日，也就今天中午我坐上了去往目的地的公交车，窗外下着雨本来打算看会面试题的我，此时我已没有任何想法，静静看着窗外的风景心情亦是沉重亦是感到兴奋甚至又有点睡觉，一向有点怯场的我出奇没有一丝紧张感。此时我还是希望雨下小点，因为我没带伞~</p><p><img src="http://pic.ihcnb.cn/iHcnb/17a10450724ce.jpg" alt="1633785814061.jpg"></p><p>​        就这样到了地铁口，如我所愿，雨并没有下大，我顺利的进入了地铁。不出意料我在地铁上睡了一觉，一项预判准确的我顺利的在出站的前一站醒来。</p><p><img src="http://pic.ihcnb.cn/iHcnb/f755ed88c6b1f.jpg" alt="1633786026410.jpg"></p><p>没错除了警示牌挺出戏，还是很漂亮的！</p><p><img src="http://pic.ihcnb.cn/iHcnb/15d06e48a3cea.jpg" alt="1633786026394.jpg"></p><p>出地铁口的那一刻我又预判了，结果预判失误这次老天没站我这边。风大雨大一秒入冬，地铁口并没有做生意买伞的。权衡利弊的我叫了一辆网约车，等待网约车的我被冻得瑟瑟发抖。很奇怪，此时我的心态只有是准备去往未知的地方的兴奋没有一丝紧张只有兴奋，背着背包在路上，一千米的距离足以见证人生百态…</p><p><img src="http://pic.ihcnb.cn/iHcnb/c61b0fb245fec.jpg" alt="1633786026360.jpg"></p><p>网约车师傅很热心，带我一路超车，体验了把速度与激情。面前的黄色小手办冲我摆了一路鬼脸…</p><p>三十分钟的路程还是很快的，我来到了公司脚下</p><p><img src="http://pic.ihcnb.cn/iHcnb/dafef11be15b6.jpg" alt="1633789526910.jpg"> </p><p>2021年10月9日，下午三点，约好的时间约好的地点使我顺利的进入到了公司，哈哈因为某些原因公司环境就不方便分享啦~</p><p>2021年10月9日，下午六点，经过三小时的畅谈，在人事部和技术的轮番”轰炸”下结束了今天的“重头戏”。三小时听着很长，够我增长一番见识，发现很多的不足，备受打击。同样这也是我希望看到的。这次暂且不谈面试经历只谈过往风景…</p><p>就这样，这时天已经蒙蒙灰，我还在离校二十公里开外，一次不平凡的经历。抛开其他此时唯一没变的是我和来之前在路上一样，在风雨里瑟瑟发抖…至于其他，都变了，历经半天的折腾脑袋了装满了沉甸甸的果实。再回时，我选择的另一条不一样的路，坐在公交车继续欣赏窗外的风景虽然雨大的已经看不见窗外…</p><p>倒了一趟公交此时窗外只剩下开着车灯来回过往的车辆，今天周六，此时我希望不管车里车外的人们都能为过了充足的一天而快乐…</p><p>随着公交停靠到站，我知道我该下车，回学校了。但再此之前我还要去一个地方…</p><p><img src="http://pic.ihcnb.cn/iHcnb/55770b46f7704.jpg" alt="1633786026327.jpg"></p><p>如果说之前的所有行动都是为了我自己，那么从现在开始我只为我的女孩</p><p><img src="http://pic.ihcnb.cn/iHcnb/8de5c5961fcd2.jpg" alt="1633786026310.jpg"></p><p>给商场点赞，为每一个带伞得人准备了一个临时装伞袋子</p><p><img src="http://pic.ihcnb.cn/iHcnb/27e2c6bcda949.jpg" alt="1633792331372.jpg"></p><p>记一次面试的经历，到这里就结束了…这次只说路上的风景，浅谈面试经过。在通往未知的方向，路上的风景也很美</p><p>《Dead aid》的结尾有一段简洁却令人深思的话：</p><p><u>种一棵树最好的时间就是十年前，其次是现在。</u></p><p>从现在的角度来看，种一棵树最好的时间是十年前，因为十年前种下的树，现在已经长大。</p><p>但从未来的角度来看，种一棵树最好的时间就是现在，就是此刻。</p><p>一条小诗，我觉得讲的很好，贴出来作为本篇总结的结束语吧：</p><h5 id="纽约时间比加州时间早三个小时，"><a href="#纽约时间比加州时间早三个小时，" class="headerlink" title="纽约时间比加州时间早三个小时，"></a>纽约时间比加州时间早三个小时，</h5><h5 id="但加州时间并没有变慢。"><a href="#但加州时间并没有变慢。" class="headerlink" title="但加州时间并没有变慢。"></a>但加州时间并没有变慢。</h5><h5 id="有人22岁就毕业了，"><a href="#有人22岁就毕业了，" class="headerlink" title="有人22岁就毕业了，"></a>有人22岁就毕业了，</h5><h5 id="但等了五年才找到好的工作。"><a href="#但等了五年才找到好的工作。" class="headerlink" title="但等了五年才找到好的工作。"></a>但等了五年才找到好的工作。</h5><h5 id="有人25岁就当上CEO，却在50岁去世。"><a href="#有人25岁就当上CEO，却在50岁去世。" class="headerlink" title="有人25岁就当上CEO，却在50岁去世。"></a>有人25岁就当上CEO，却在50岁去世。</h5><h5 id="也有人直到50岁才当上CEO，然后活到90岁。"><a href="#也有人直到50岁才当上CEO，然后活到90岁。" class="headerlink" title="也有人直到50岁才当上CEO，然后活到90岁。"></a>也有人直到50岁才当上CEO，然后活到90岁。</h5><h5 id="有人依然单身，同时也有人已婚。"><a href="#有人依然单身，同时也有人已婚。" class="headerlink" title="有人依然单身，同时也有人已婚。"></a>有人依然单身，同时也有人已婚。</h5><h5 id="奥巴马55岁就退休，"><a href="#奥巴马55岁就退休，" class="headerlink" title="奥巴马55岁就退休，"></a>奥巴马55岁就退休，</h5><h5 id="世上每个人本来就有自己的发展时区。"><a href="#世上每个人本来就有自己的发展时区。" class="headerlink" title="世上每个人本来就有自己的发展时区。"></a>世上每个人本来就有自己的发展时区。</h5><h5 id="身边有些人看似走在你前面，"><a href="#身边有些人看似走在你前面，" class="headerlink" title="身边有些人看似走在你前面，"></a>身边有些人看似走在你前面，</h5><h5 id="也有人看似走在你后面。"><a href="#也有人看似走在你后面。" class="headerlink" title="也有人看似走在你后面。"></a>也有人看似走在你后面。</h5><h5 id="但其实每个人在自己的时区有自己的步程。"><a href="#但其实每个人在自己的时区有自己的步程。" class="headerlink" title="但其实每个人在自己的时区有自己的步程。"></a>但其实每个人在自己的时区有自己的步程。</h5><h5 id="不要嫉妒或嘲笑他们。"><a href="#不要嫉妒或嘲笑他们。" class="headerlink" title="不要嫉妒或嘲笑他们。"></a>不要嫉妒或嘲笑他们。</h5><h5 id="他们都在自己的时区里，而你也是。"><a href="#他们都在自己的时区里，而你也是。" class="headerlink" title="他们都在自己的时区里，而你也是。"></a>他们都在自己的时区里，而你也是。</h5><h5 id="生命，就是等待正确的行动时机。"><a href="#生命，就是等待正确的行动时机。" class="headerlink" title="生命，就是等待正确的行动时机。"></a>生命，就是等待正确的行动时机。</h5><h5 id="从现在开始，种下一棵树吧！"><a href="#从现在开始，种下一棵树吧！" class="headerlink" title="从现在开始，种下一棵树吧！"></a>从现在开始，种下一棵树吧！</h5><p><strong>希望你眼眸有星辰，心中有山海，从此以梦为马，不负韶华</strong>！</p><hr><p> <strong>我是史可轩，很高兴遇见你</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/091612.html"/>
      <url>/2021/091612.html</url>
      
        <content type="html"><![CDATA[<p>abbrlink: 4<br>title: 记录下关于更新数据库报错1045<br>tags: mysql<br>categories: 数据库</p><h2 id="记录下关于更新数据库报错1045"><a href="#记录下关于更新数据库报错1045" class="headerlink" title="记录下关于更新数据库报错1045"></a>记录下关于更新数据库报错1045</h2><p>如何解决连接mysql报1045错误的问题</p><p>“1045  Access denied for user ‘root‘@’localhost’ (using password:YES)”</p><p>出现上述问题的原因有很多，我是因为数据库折腾坏了，但是里面的数据非常之重要，也没有备份，于是我就把原mysql服务里面的Data文件夹整个copy了下来，卸载干净以前的，装好了新的数据库后，把原data文件夹替换新安装的data，之后就出现了1045报错，接下来总结解决办法，让后人可以有效避坑从而节省大量时间</p><p>连接mysql报1045错误的解决方法：1、打开my.ini配置文件；2、添加【skip-grant-tables】，保存文件；3、重启mysql服务；4、登录mysql并修改密码；5、退出登录并重新连接即可。</p><p>解决方法：</p><p>首先打开my.ini配置文件。（在mysql安装的MySQL Server 目录下，如果没有自己创建）</p><pre><code>[mysql] # 设置mysql客户端默认字符集default-character-set=utf8 [mysqld]#设置3306端口port = 3306 # 设置mysql的安装目录basedir=D:\\softnew\\MYSQL\\mysql-5.7.20-winx64# 允许最大连接数max_connections=200# 服务端使用的字符集默认为8比特编码的latin1字符集character-set-server=utf8# 创建新表时将使用的默认存储引擎default-storage-engine=INNODB</code></pre><p>然后在mysqld字段下面添加skip-grant-tables，保存退出。</p><p>如果出现保存失败，请将mysql服务停止后，再保存。</p><p>最后重启mysql服务。</p><p>现在我们可以登录mysql数据库了。</p><pre><code>mysql -u账号 -p</code></pre><p>之后回车会让你输入密码，此时不用直接回车</p><p>登录数据库后重新修改密码。<code>update user set password=password("root22") where user="root";</code></p><p>如果报错则应先选择数据库<code>use mysql</code></p><p>完成之后，退出并重新连接即可。</p><p>上是如何解决连接mysql报1045错误的问题的所有内容，感谢各位的阅读！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08216.html"/>
      <url>/2021/08216.html</url>
      
        <content type="html"><![CDATA[<p>abbrlink: 9<br>title: mitmproxy抓包初识(基本命令)Linux环境下<br>tags: 爬虫<br>categories: 爬虫</p><h1 id="mitmproxy抓包初识-基本命令-Linux环境下"><a href="#mitmproxy抓包初识-基本命令-Linux环境下" class="headerlink" title="mitmproxy抓包初识(基本命令)Linux环境下"></a>mitmproxy抓包初识(基本命令)Linux环境下</h1><p>打开终端输入：mitmproxy 进入</p><p><img src="http://pic.ihcnb.cn/iHcnb/1130d14f9e564.png" alt="1629553950540.png"></p><p>mitmproxy  -p xxxx  设置端口号进入</p><p>选择操作<br>箭头↑<br>箭头下<br>选择get<br>按下回车查看详情<br>按下i拦截请求<br>下回车查看详情<br>按下tab选择内容<br>按下e进行编辑（此时回跳出一个选择窗口）<br>按下键Q返回上一级操作<br>按下a放行</p><p>之后对于被拦截的请求的返回将再次被自动拦截，此时可以再重复操作。</p><p>按键筛查<br>按下l进行查找<br>过滤<br>例如；/.js选择所以js请求<br>对于i拦截我们也可以使用<br>~u URL拦截，或者直接选中某URL<br>～ u . php拦截所有php请求。<br>————————————————<br>版权声明：本文为CSDN博主「HUTEROX」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/FUTEROX/article/details/109545369">https://blog.csdn.net/FUTEROX/article/details/109545369</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08210.html"/>
      <url>/2021/08210.html</url>
      
        <content type="html"><![CDATA[<p>abbrlink: 31508<br>title: sqlalchemy，ORM框架<br>tags: Flask<br>categories: python</p><p>sqlalchemy，ORM框架</p><p>什么是orm框架：对象关系映射</p><p>​                                类  —–&gt;表</p><p>​                                对象 —–&gt; 记录（一行数据）</p><p>问题：</p><p>​        db first：根据数据库表，生成类</p><p>​                            django</p><p>​                                    python manage.py inspectdb</p><p>​        code first：根据类创建数据库表</p><p>​                            django</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># ##################### 一对多示例 #########################</span><span class="token keyword">class</span> <span class="token class-name">Hobby</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'hobby'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    caption <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'篮球'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'person'</span>    nid <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    hobby_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">"hobby.id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 与生成表结构无关，仅用于查询方便</span>    hobby <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">"Hobby"</span><span class="token punctuation">,</span> backref<span class="token operator">=</span><span class="token string">'pers'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ##################### 多对多示例 #########################</span><span class="token keyword">class</span> <span class="token class-name">Server2Group</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'server2group'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    server_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'server.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    group_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'group.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Group</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'group'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 与生成表结构无关，仅用于查询方便</span>    servers <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Server'</span><span class="token punctuation">,</span> secondary<span class="token operator">=</span><span class="token string">'server2group'</span><span class="token punctuation">,</span> backref<span class="token operator">=</span><span class="token string">'groups'</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 使用relationship正向查询</span><span class="token triple-quoted-string string">"""v = session.query(Group).first()print(v.name)print(v.servers)"""</span><span class="token comment" spellcheck="true"># 使用relationship反向查询</span><span class="token triple-quoted-string string">"""v = session.query(Server).first()print(v.hostname)print(v.groups)"""</span></code></pre><p><img src="http://pic.ihcnb.cn/iHcnb/2be574a7dadae.png" alt="1629701466214.png"></p><p><img src="http://pic.ihcnb.cn/iHcnb/487d5f0def0c8.png" alt="1629701401583.png"></p><p><img src="http://pic.ihcnb.cn/iHcnb/11894d403ac77.png" alt="1629701362801.png"></p><p><img src="http://pic.ihcnb.cn/iHcnb/16e92f8365de8.png" alt="1629701487362.png"></p><p><img src="http://pic.ihcnb.cn/iHcnb/badad89d9111b.png" alt="1629772061752.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08192.html"/>
      <url>/2021/08192.html</url>
      
        <content type="html"><![CDATA[<p>abbrlink: 1<br>title:WTForms<br>tags: Flask<br>categories: python</p><h1 id="wtforms"><a href="#wtforms" class="headerlink" title="wtforms"></a><a href="https://www.cnblogs.com/wupeiqi/articles/8202357.html">wtforms</a></h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>WTForms是一个支持多个web框架的form组件，主要用于对用户请求数据进行验证。</p><p>安装：</p><pre><code>pip3 install wtforms</code></pre><h2 id="用户登录注册示例"><a href="#用户登录注册示例" class="headerlink" title="用户登录注册示例"></a>用户登录注册示例</h2><h6 id="1-用户登录"><a href="#1-用户登录" class="headerlink" title="\1. 用户登录"></a>\1. 用户登录</h6><p>当用户登录时候，需要对用户提交的用户名和密码进行多种格式校验。如：</p><p>用户不能为空；用户长度必须大于6；</p><p>密码不能为空；密码长度必须大于12；密码必须包含 字母、数字、特殊字符等（自定义正则）；</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> request<span class="token punctuation">,</span> redirect<span class="token keyword">from</span> wtforms <span class="token keyword">import</span> Form<span class="token keyword">from</span> wtforms<span class="token punctuation">.</span>fields <span class="token keyword">import</span> core<span class="token keyword">from</span> wtforms<span class="token punctuation">.</span>fields <span class="token keyword">import</span> html5<span class="token keyword">from</span> wtforms<span class="token punctuation">.</span>fields <span class="token keyword">import</span> simple<span class="token keyword">from</span> wtforms <span class="token keyword">import</span> validators<span class="token keyword">from</span> wtforms <span class="token keyword">import</span> widgetsapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span> template_folder<span class="token operator">=</span><span class="token string">'templates'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">class</span> <span class="token class-name">LoginForm</span><span class="token punctuation">(</span>Form<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> simple<span class="token punctuation">.</span>StringField<span class="token punctuation">(</span>        label<span class="token operator">=</span><span class="token string">'用户名'</span><span class="token punctuation">,</span>        validators<span class="token operator">=</span><span class="token punctuation">[</span>            validators<span class="token punctuation">.</span>DataRequired<span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">'用户名不能为空.'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            validators<span class="token punctuation">.</span>Length<span class="token punctuation">(</span>min<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">'用户名长度必须大于%(min)d且小于%(max)d'</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        widget<span class="token operator">=</span>widgets<span class="token punctuation">.</span>TextInput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        render_kw<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'class': 'form-control'&amp;#125;</span>    <span class="token punctuation">)</span>    pwd <span class="token operator">=</span> simple<span class="token punctuation">.</span>PasswordField<span class="token punctuation">(</span>        label<span class="token operator">=</span><span class="token string">'密码'</span><span class="token punctuation">,</span>        validators<span class="token operator">=</span><span class="token punctuation">[</span>            validators<span class="token punctuation">.</span>DataRequired<span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">'密码不能为空.'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            validators<span class="token punctuation">.</span>Length<span class="token punctuation">(</span>min<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">'用户名长度必须大于%(min)d'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            validators<span class="token punctuation">.</span>Regexp<span class="token punctuation">(</span>regex<span class="token operator">=</span><span class="token string">"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[$@$!%*?&amp;])[A-Za-z\d$@$!%*?&amp;]&amp;#123;8,&amp;#125;"</span><span class="token punctuation">,</span>                              message<span class="token operator">=</span><span class="token string">'密码至少8个字符，至少1个大写字母，1个小写字母，1个数字和1个特殊字符'</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        widget<span class="token operator">=</span>widgets<span class="token punctuation">.</span>PasswordInput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        render_kw<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'class': 'form-control'&amp;#125;</span>    <span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> LoginForm<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> LoginForm<span class="token punctuation">(</span>formdata<span class="token operator">=</span>request<span class="token punctuation">.</span>form<span class="token punctuation">)</span>        <span class="token keyword">if</span> form<span class="token punctuation">.</span>validate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'用户提交数据通过格式验证，提交的值为：'</span><span class="token punctuation">,</span> form<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>errors<span class="token punctuation">)</span>        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment" spellcheck="true">&lt;!--&lt;input type="text" name="name"&gt;--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token entity" title="{">&amp;#123;</span><span class="token entity" title="{">&amp;#123;</span>form.name.label<span class="token entity" title="}">&amp;#125;</span><span class="token entity" title="}">&amp;#125;</span> <span class="token entity" title="{">&amp;#123;</span><span class="token entity" title="{">&amp;#123;</span>form.name<span class="token entity" title="}">&amp;#125;</span><span class="token entity" title="}">&amp;#125;</span> <span class="token entity" title="{">&amp;#123;</span><span class="token entity" title="{">&amp;#123;</span>form.name.errors[0] <span class="token entity" title="}">&amp;#125;</span><span class="token entity" title="}">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token comment" spellcheck="true">&lt;!--&lt;input type="password" name="pwd"&gt;--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token entity" title="{">&amp;#123;</span><span class="token entity" title="{">&amp;#123;</span>form.pwd.label<span class="token entity" title="}">&amp;#125;</span><span class="token entity" title="}">&amp;#125;</span> <span class="token entity" title="{">&amp;#123;</span><span class="token entity" title="{">&amp;#123;</span>form.pwd<span class="token entity" title="}">&amp;#125;</span><span class="token entity" title="}">&amp;#125;</span> <span class="token entity" title="{">&amp;#123;</span><span class="token entity" title="{">&amp;#123;</span>form.pwd.errors[0] <span class="token entity" title="}">&amp;#125;</span><span class="token entity" title="}">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></code></pre><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><ol start="2"><li><h6 id="用户注册"><a href="#用户注册" class="headerlink" title="用户注册"></a>用户注册</h6></li></ol><p>注册页面需要让用户输入：用户名、密码、密码重复、性别、爱好等。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> request<span class="token punctuation">,</span> redirect<span class="token keyword">from</span> wtforms <span class="token keyword">import</span> Form<span class="token keyword">from</span> wtforms<span class="token punctuation">.</span>fields <span class="token keyword">import</span> core<span class="token keyword">from</span> wtforms<span class="token punctuation">.</span>fields <span class="token keyword">import</span> html5<span class="token keyword">from</span> wtforms<span class="token punctuation">.</span>fields <span class="token keyword">import</span> simple<span class="token keyword">from</span> wtforms <span class="token keyword">import</span> validators<span class="token keyword">from</span> wtforms <span class="token keyword">import</span> widgetsapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span> template_folder<span class="token operator">=</span><span class="token string">'templates'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">class</span> <span class="token class-name">RegisterForm</span><span class="token punctuation">(</span>Form<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> simple<span class="token punctuation">.</span>StringField<span class="token punctuation">(</span>        label<span class="token operator">=</span><span class="token string">'用户名'</span><span class="token punctuation">,</span>        validators<span class="token operator">=</span><span class="token punctuation">[</span>            validators<span class="token punctuation">.</span>DataRequired<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        widget<span class="token operator">=</span>widgets<span class="token punctuation">.</span>TextInput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        render_kw<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'class': 'form-control'&amp;#125;,</span>        default<span class="token operator">=</span><span class="token string">'alex'</span>    <span class="token punctuation">)</span>    pwd <span class="token operator">=</span> simple<span class="token punctuation">.</span>PasswordField<span class="token punctuation">(</span>        label<span class="token operator">=</span><span class="token string">'密码'</span><span class="token punctuation">,</span>        validators<span class="token operator">=</span><span class="token punctuation">[</span>            validators<span class="token punctuation">.</span>DataRequired<span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">'密码不能为空.'</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        widget<span class="token operator">=</span>widgets<span class="token punctuation">.</span>PasswordInput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        render_kw<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'class': 'form-control'&amp;#125;</span>    <span class="token punctuation">)</span>    pwd_confirm <span class="token operator">=</span> simple<span class="token punctuation">.</span>PasswordField<span class="token punctuation">(</span>        label<span class="token operator">=</span><span class="token string">'重复密码'</span><span class="token punctuation">,</span>        validators<span class="token operator">=</span><span class="token punctuation">[</span>            validators<span class="token punctuation">.</span>DataRequired<span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">'重复密码不能为空.'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            validators<span class="token punctuation">.</span>EqualTo<span class="token punctuation">(</span><span class="token string">'pwd'</span><span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">"两次密码输入不一致"</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        widget<span class="token operator">=</span>widgets<span class="token punctuation">.</span>PasswordInput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        render_kw<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'class': 'form-control'&amp;#125;</span>    <span class="token punctuation">)</span>    email <span class="token operator">=</span> html5<span class="token punctuation">.</span>EmailField<span class="token punctuation">(</span>        label<span class="token operator">=</span><span class="token string">'邮箱'</span><span class="token punctuation">,</span>        validators<span class="token operator">=</span><span class="token punctuation">[</span>            validators<span class="token punctuation">.</span>DataRequired<span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">'邮箱不能为空.'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            validators<span class="token punctuation">.</span>Email<span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">'邮箱格式错误'</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        widget<span class="token operator">=</span>widgets<span class="token punctuation">.</span>TextInput<span class="token punctuation">(</span>input_type<span class="token operator">=</span><span class="token string">'email'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        render_kw<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'class': 'form-control'&amp;#125;</span>    <span class="token punctuation">)</span>    gender <span class="token operator">=</span> core<span class="token punctuation">.</span>RadioField<span class="token punctuation">(</span>        label<span class="token operator">=</span><span class="token string">'性别'</span><span class="token punctuation">,</span>        choices<span class="token operator">=</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        coerce<span class="token operator">=</span>int    <span class="token punctuation">)</span>    city <span class="token operator">=</span> core<span class="token punctuation">.</span>SelectField<span class="token punctuation">(</span>        label<span class="token operator">=</span><span class="token string">'城市'</span><span class="token punctuation">,</span>        choices<span class="token operator">=</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token string">'bj'</span><span class="token punctuation">,</span> <span class="token string">'北京'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token string">'上海'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>    <span class="token punctuation">)</span>    hobby <span class="token operator">=</span> core<span class="token punctuation">.</span>SelectMultipleField<span class="token punctuation">(</span>        label<span class="token operator">=</span><span class="token string">'爱好'</span><span class="token punctuation">,</span>        choices<span class="token operator">=</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'篮球'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'足球'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        coerce<span class="token operator">=</span>int    <span class="token punctuation">)</span>    favor <span class="token operator">=</span> core<span class="token punctuation">.</span>SelectMultipleField<span class="token punctuation">(</span>        label<span class="token operator">=</span><span class="token string">'喜好'</span><span class="token punctuation">,</span>        choices<span class="token operator">=</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'篮球'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'足球'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        widget<span class="token operator">=</span>widgets<span class="token punctuation">.</span>ListWidget<span class="token punctuation">(</span>prefix_label<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        option_widget<span class="token operator">=</span>widgets<span class="token punctuation">.</span>CheckboxInput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        coerce<span class="token operator">=</span>int<span class="token punctuation">,</span>        default<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>    <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>RegisterForm<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>favor<span class="token punctuation">.</span>choices <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'篮球'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'足球'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'羽毛球'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">validate_pwd_confirm</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> field<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        自定义pwd_confirm字段规则，例：与pwd字段是否一致        :param field:         :return:         """</span>        <span class="token comment" spellcheck="true"># 最开始初始化时，self.data中已经有所有的值</span>        <span class="token keyword">if</span> field<span class="token punctuation">.</span>data <span class="token operator">!=</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token string">'pwd'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># raise validators.ValidationError("密码不一致") # 继续后续验证</span>            <span class="token keyword">raise</span> validators<span class="token punctuation">.</span>StopValidation<span class="token punctuation">(</span><span class="token string">"密码不一致"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 不再继续后续验证</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> RegisterForm<span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'gender': 1&amp;#125;)</span>        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'register.html'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> RegisterForm<span class="token punctuation">(</span>formdata<span class="token operator">=</span>request<span class="token punctuation">.</span>form<span class="token punctuation">)</span>        <span class="token keyword">if</span> form<span class="token punctuation">.</span>validate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'用户提交数据通过格式验证，提交的值为：'</span><span class="token punctuation">,</span> form<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>errors<span class="token punctuation">)</span>        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'register.html'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>用户注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">novalidate</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">0</span>  <span class="token number">50</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token entity" title="{">&amp;#123;</span>% for item in form %<span class="token entity" title="}">&amp;#125;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token entity" title="{">&amp;#123;</span><span class="token entity" title="{">&amp;#123;</span>item.label<span class="token entity" title="}">&amp;#125;</span><span class="token entity" title="}">&amp;#125;</span>: <span class="token entity" title="{">&amp;#123;</span><span class="token entity" title="{">&amp;#123;</span>item<span class="token entity" title="}">&amp;#125;</span><span class="token entity" title="}">&amp;#125;</span> <span class="token entity" title="{">&amp;#123;</span><span class="token entity" title="{">&amp;#123;</span>item.errors[0] <span class="token entity" title="}">&amp;#125;</span><span class="token entity" title="}">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token entity" title="{">&amp;#123;</span>% endfor %<span class="token entity" title="}">&amp;#125;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>https://files.cnblogs.com/files/wupeiqi/flask-wtforms-example.zip)</code></pre><h6 id="3-meta"><a href="#3-meta" class="headerlink" title="\3. meta"></a>\3. meta</h6><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> request<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> session<span class="token keyword">from</span> wtforms <span class="token keyword">import</span> Form<span class="token keyword">from</span> wtforms<span class="token punctuation">.</span>csrf<span class="token punctuation">.</span>core <span class="token keyword">import</span> CSRF<span class="token keyword">from</span> wtforms<span class="token punctuation">.</span>fields <span class="token keyword">import</span> core<span class="token keyword">from</span> wtforms<span class="token punctuation">.</span>fields <span class="token keyword">import</span> html5<span class="token keyword">from</span> wtforms<span class="token punctuation">.</span>fields <span class="token keyword">import</span> simple<span class="token keyword">from</span> wtforms <span class="token keyword">import</span> validators<span class="token keyword">from</span> wtforms <span class="token keyword">import</span> widgets<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span> template_folder<span class="token operator">=</span><span class="token string">'templates'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">class</span> <span class="token class-name">MyCSRF</span><span class="token punctuation">(</span>CSRF<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Generate a CSRF token based on the user's IP. I am probably not very    secure, so don't use me.    """</span>    <span class="token keyword">def</span> <span class="token function">setup_form</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> form<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>csrf_context <span class="token operator">=</span> form<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>csrf_context<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>csrf_secret <span class="token operator">=</span> form<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>csrf_secret        <span class="token keyword">return</span> super<span class="token punctuation">(</span>MyCSRF<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>setup_form<span class="token punctuation">(</span>form<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">generate_csrf_token</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> csrf_token<span class="token punctuation">)</span><span class="token punctuation">:</span>        gid <span class="token operator">=</span> self<span class="token punctuation">.</span>csrf_secret <span class="token operator">+</span> self<span class="token punctuation">.</span>csrf_context        token <span class="token operator">=</span> md5<span class="token punctuation">(</span>gid<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> token    <span class="token keyword">def</span> <span class="token function">validate_csrf_token</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> form<span class="token punctuation">,</span> field<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span>data<span class="token punctuation">,</span> field<span class="token punctuation">.</span>current_token<span class="token punctuation">)</span>        <span class="token keyword">if</span> field<span class="token punctuation">.</span>data <span class="token operator">!=</span> field<span class="token punctuation">.</span>current_token<span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'Invalid CSRF'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TestForm</span><span class="token punctuation">(</span>Form<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> html5<span class="token punctuation">.</span>EmailField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'用户名'</span><span class="token punctuation">)</span>    pwd <span class="token operator">=</span> simple<span class="token punctuation">.</span>StringField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'密码'</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># -- CSRF</span>        <span class="token comment" spellcheck="true"># 是否自动生成CSRF标签</span>        csrf <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token comment" spellcheck="true"># 生成CSRF标签name</span>        csrf_field_name <span class="token operator">=</span> <span class="token string">'csrf_token'</span>        <span class="token comment" spellcheck="true"># 自动生成标签的值，加密用的csrf_secret</span>        csrf_secret <span class="token operator">=</span> <span class="token string">'xxxxxx'</span>        <span class="token comment" spellcheck="true"># 自动生成标签的值，加密用的csrf_context</span>        csrf_context <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> request<span class="token punctuation">.</span>url        <span class="token comment" spellcheck="true"># 生成和比较csrf标签</span>        csrf_class <span class="token operator">=</span> MyCSRF        <span class="token comment" spellcheck="true"># -- i18n</span>        <span class="token comment" spellcheck="true"># 是否支持本地化</span>        <span class="token comment" spellcheck="true"># locales = False</span>        locales <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'zh'</span><span class="token punctuation">,</span> <span class="token string">'en'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 是否对本地化进行缓存</span>        cache_translations <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token comment" spellcheck="true"># 保存本地化缓存信息的字段</span>        translations_cache <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/index/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> TestForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> TestForm<span class="token punctuation">(</span>formdata<span class="token operator">=</span>request<span class="token punctuation">.</span>form<span class="token punctuation">)</span>        <span class="token keyword">if</span> form<span class="token punctuation">.</span>validate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h2><h6 id="1-metaclass"><a href="#1-metaclass" class="headerlink" title="\1. metaclass"></a>\1. metaclass</h6><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'MyType创建类'</span><span class="token punctuation">,</span>self<span class="token punctuation">)</span>        super<span class="token punctuation">(</span>MyType<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        obj <span class="token operator">=</span> super<span class="token punctuation">(</span>MyType<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__call__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'类创建对象'</span><span class="token punctuation">,</span> self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span>        <span class="token keyword">return</span> obj<span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span>metaclass<span class="token operator">=</span>MyType<span class="token punctuation">)</span><span class="token punctuation">:</span>    user <span class="token operator">=</span> <span class="token string">'wupeiqi'</span>    age <span class="token operator">=</span> <span class="token number">18</span>obj <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>MyType<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        v <span class="token operator">=</span> dir<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>        obj <span class="token operator">=</span> super<span class="token punctuation">(</span>MyType<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">.</span>__call__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> obj<span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span>MyType<span class="token punctuation">(</span><span class="token string">'MyType'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;)):</span>    user <span class="token operator">=</span> <span class="token string">'wupeiqi'</span>    age <span class="token operator">=</span> <span class="token number">18</span>obj <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>MyType<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        v <span class="token operator">=</span> dir<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>        obj <span class="token operator">=</span> super<span class="token punctuation">(</span>MyType<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">.</span>__call__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> obj<span class="token keyword">def</span> <span class="token function">with_metaclass</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span>base<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> MyType<span class="token punctuation">(</span><span class="token string">'MyType'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>base<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;)</span><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span>with_metaclass<span class="token punctuation">(</span>MyType<span class="token punctuation">,</span>object<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    user <span class="token operator">=</span> <span class="token string">'wupeiqi'</span>    age <span class="token operator">=</span> <span class="token number">18</span>obj <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h6 id="2-实例化流程分析"><a href="#2-实例化流程分析" class="headerlink" title="\2. 实例化流程分析"></a>\2. 实例化流程分析</h6><pre class=" language-python"><code class="language-python">    <span class="token comment" spellcheck="true"># 源码流程</span>    <span class="token number">1</span><span class="token punctuation">.</span> 执行type的 __call__ 方法，读取字段到静态字段 cls<span class="token punctuation">.</span>_unbound_fields 中； meta类读取到cls<span class="token punctuation">.</span>_wtforms_meta中    <span class="token number">2</span><span class="token punctuation">.</span> 执行构造方法                a<span class="token punctuation">.</span> 循环cls<span class="token punctuation">.</span>_unbound_fields中的字段，并执行字段的bind方法，然后将返回值添加到 self<span class="token punctuation">.</span>_fields<span class="token punctuation">[</span>name<span class="token punctuation">]</span> 中。            即：                _fields <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    name<span class="token punctuation">:</span> wtforms<span class="token punctuation">.</span>fields<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StringField<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                            PS：由于字段中的__new__方法，实例化时：name <span class="token operator">=</span> simple<span class="token punctuation">.</span>StringField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'用户名'</span><span class="token punctuation">)</span>，创建的是UnboundField<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>，当执行完bind之后，才变成执行 wtforms<span class="token punctuation">.</span>fields<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StringField<span class="token punctuation">(</span><span class="token punctuation">)</span>                b<span class="token punctuation">.</span> 循环_fields，为对象设置属性            <span class="token keyword">for</span> name<span class="token punctuation">,</span> field <span class="token keyword">in</span> iteritems<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_fields<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># Set all the fields to attributes so that they obscure the class</span>                <span class="token comment" spellcheck="true"># attributes with the same names.</span>                setattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> field<span class="token punctuation">)</span>        c<span class="token punctuation">.</span> 执行process，为字段设置默认值：self<span class="token punctuation">.</span>process<span class="token punctuation">(</span>formdata<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>            优先级：obj<span class="token punctuation">,</span>data<span class="token punctuation">,</span>formdata<span class="token punctuation">;</span>                        再循环执行每个字段的process方法，为每个字段设置值：            <span class="token keyword">for</span> name<span class="token punctuation">,</span> field<span class="token punctuation">,</span> <span class="token keyword">in</span> iteritems<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_fields<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> obj <span class="token keyword">is</span> <span class="token operator">not</span> None <span class="token operator">and</span> hasattr<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>                    field<span class="token punctuation">.</span>process<span class="token punctuation">(</span>formdata<span class="token punctuation">,</span> getattr<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">elif</span> name <span class="token keyword">in</span> kwargs<span class="token punctuation">:</span>                    field<span class="token punctuation">.</span>process<span class="token punctuation">(</span>formdata<span class="token punctuation">,</span> kwargs<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    field<span class="token punctuation">.</span>process<span class="token punctuation">(</span>formdata<span class="token punctuation">)</span>                        执行每个字段的process方法，为字段的data和字段的raw_data赋值            <span class="token keyword">def</span> <span class="token function">process</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> formdata<span class="token punctuation">,</span> data<span class="token operator">=</span>unset_value<span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>process_errors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> data <span class="token keyword">is</span> unset_value<span class="token punctuation">:</span>                    <span class="token keyword">try</span><span class="token punctuation">:</span>                        data <span class="token operator">=</span> self<span class="token punctuation">.</span>default<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">except</span> TypeError<span class="token punctuation">:</span>                        data <span class="token operator">=</span> self<span class="token punctuation">.</span>default                        self<span class="token punctuation">.</span>object_data <span class="token operator">=</span> data                        <span class="token keyword">try</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>process_data<span class="token punctuation">(</span>data<span class="token punctuation">)</span>                <span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>process_errors<span class="token punctuation">.</span>append<span class="token punctuation">(</span>e<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> formdata<span class="token punctuation">:</span>                    <span class="token keyword">try</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> self<span class="token punctuation">.</span>name <span class="token keyword">in</span> formdata<span class="token punctuation">:</span>                            self<span class="token punctuation">.</span>raw_data <span class="token operator">=</span> formdata<span class="token punctuation">.</span>getlist<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>                        <span class="token keyword">else</span><span class="token punctuation">:</span>                            self<span class="token punctuation">.</span>raw_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                        self<span class="token punctuation">.</span>process_formdata<span class="token punctuation">(</span>self<span class="token punctuation">.</span>raw_data<span class="token punctuation">)</span>                    <span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>                        self<span class="token punctuation">.</span>process_errors<span class="token punctuation">.</span>append<span class="token punctuation">(</span>e<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token keyword">try</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> filter <span class="token keyword">in</span> self<span class="token punctuation">.</span>filters<span class="token punctuation">:</span>                        self<span class="token punctuation">.</span>data <span class="token operator">=</span> filter<span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span>                <span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>process_errors<span class="token punctuation">.</span>append<span class="token punctuation">(</span>e<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                        d<span class="token punctuation">.</span> 页面上执行<span class="token keyword">print</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>name<span class="token punctuation">)</span> 时，打印标签                        因为执行了：                字段的 __str__ 方法                字符的 __call__ 方法                self<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>render_field<span class="token punctuation">(</span>self<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span>                    <span class="token keyword">def</span> <span class="token function">render_field</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> field<span class="token punctuation">,</span> render_kw<span class="token punctuation">)</span><span class="token punctuation">:</span>                        other_kw <span class="token operator">=</span> getattr<span class="token punctuation">(</span>field<span class="token punctuation">,</span> <span class="token string">'render_kw'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>                        <span class="token keyword">if</span> other_kw <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                            render_kw <span class="token operator">=</span> dict<span class="token punctuation">(</span>other_kw<span class="token punctuation">,</span> <span class="token operator">**</span>render_kw<span class="token punctuation">)</span>                        <span class="token keyword">return</span> field<span class="token punctuation">.</span>widget<span class="token punctuation">(</span>field<span class="token punctuation">,</span> <span class="token operator">**</span>render_kw<span class="token punctuation">)</span>                执行字段的插件对象的 __call__ 方法，返回标签字符串</code></pre><h6 id="3-验证流程分析"><a href="#3-验证流程分析" class="headerlink" title="\3. 验证流程分析"></a>\3. 验证流程分析</h6><pre class=" language-python"><code class="language-python">        a<span class="token punctuation">.</span> 执行form的validate方法，获取钩子方法            <span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>                extra <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>                <span class="token keyword">for</span> name <span class="token keyword">in</span> self<span class="token punctuation">.</span>_fields<span class="token punctuation">:</span>                    inline <span class="token operator">=</span> getattr<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__class__<span class="token punctuation">,</span> <span class="token string">'validate_%s'</span> <span class="token operator">%</span> name<span class="token punctuation">,</span> None<span class="token punctuation">)</span>                    <span class="token keyword">if</span> inline <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                        extra<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>inline<span class="token punctuation">]</span>                        <span class="token keyword">return</span> super<span class="token punctuation">(</span>Form<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>validate<span class="token punctuation">(</span>extra<span class="token punctuation">)</span>        b<span class="token punctuation">.</span> 循环每一个字段，执行字段的 validate 方法进行校验<span class="token punctuation">(</span>参数传递了钩子函数<span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> extra_validators<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>_errors <span class="token operator">=</span> None                success <span class="token operator">=</span> <span class="token boolean">True</span>                <span class="token keyword">for</span> name<span class="token punctuation">,</span> field <span class="token keyword">in</span> iteritems<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_fields<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> extra_validators <span class="token keyword">is</span> <span class="token operator">not</span> None <span class="token operator">and</span> name <span class="token keyword">in</span> extra_validators<span class="token punctuation">:</span>                        extra <span class="token operator">=</span> extra_validators<span class="token punctuation">[</span>name<span class="token punctuation">]</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        extra <span class="token operator">=</span> tuple<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> <span class="token operator">not</span> field<span class="token punctuation">.</span>validate<span class="token punctuation">(</span>self<span class="token punctuation">,</span> extra<span class="token punctuation">)</span><span class="token punctuation">:</span>                        success <span class="token operator">=</span> <span class="token boolean">False</span>                <span class="token keyword">return</span> success        c<span class="token punctuation">.</span> 每个字段进行验证时候            字段的pre_validate 【预留的扩展】            字段的_run_validation_chain，对正则和字段的钩子函数进行校验            字段的post_validate【预留的扩展】</code></pre><p><img src="http://pic.ihcnb.cn/iHcnb/15bbd2a685b03.png" alt="wtform实例化流程.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08125.html"/>
      <url>/2021/08125.html</url>
      
        <content type="html"><![CDATA[<p>abbrlink: 10<br>date: 2021-6-25<br>title: flask_session<br>tags: Flask<br>categories: python</p><h5 id="flask-session"><a href="#flask-session" class="headerlink" title="flask_session"></a>flask_session</h5><p><img src="http://pic.ihcnb.cn/iHcnb/8c588a4aa2d48.png" alt="1628764949787.png"></p><p>注：导入方法已弃用，应改为<code>from flask_session import Session</code></p><p><img src="http://pic.ihcnb.cn/iHcnb/55466a26fe8cf.png" alt="1628767279367.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08094.html"/>
      <url>/2021/08094.html</url>
      
        <content type="html"><![CDATA[<p>abbrlink: 10<br>date: 2021-6-28<br>title: flask面试<br>tags: Flask<br>categories: python</p><h5 id="flask里面的request，session是什么时候创建的？是什么时候销毁的"><a href="#flask里面的request，session是什么时候创建的？是什么时候销毁的" class="headerlink" title="flask里面的request，session是什么时候创建的？是什么时候销毁的"></a>flask里面的request，session是什么时候创建的？是什么时候销毁的</h5><p>当请求刚进来的时候回将他两个封装成requestContext()对象，封装之后通过localstack放入local对象中，ctx的session是空的，下一步执行open_session，把cookie重新赋值到ctx里面去，最后返回执行save_session将ctx的session做修改，最后移除save_session</p><p><img src="http://pic.ihcnb.cn/iHcnb/51a87aa487836.png" alt="1628503605249.png"></p><p>flask中有几个local对象：永远只有两个</p><p>自己写一个类+列表的技术栈</p><p>技术栈应用：flask里面的LocalStack就是基于栈实现的</p><h5 id="Python基础部分那些比较重要？"><a href="#Python基础部分那些比较重要？" class="headerlink" title="Python基础部分那些比较重要？"></a>Python基础部分那些比较重要？</h5><ul><li>反射<ul><li>cbv</li><li>django配置文件</li><li>wtform中</li></ul></li><li>装饰器<ul><li>flask路由\装饰器</li><li>认证</li><li>csrf</li></ul></li><li>生成器、迭代器</li><li>面向对象<ul><li>封装继承多态（简单，一两句概括）</li><li>特殊功能<ul><li>双下划线方法<ul><li><code>__mro__</code>:找到当前类，寻找属性的顺序</li><li><code>__dict__</code>:执行dict、是拿里面的全部</li><li><code>__new__</code>:实例化但没有给当前类对象</li><li><code>__call__</code>:flask请求入口</li><li><code>__iter__</code>:循环所有字段</li></ul></li><li>metaclass：指定类由那个类创建，默认type<ul><li>场景：在类创建之前定制操作</li><li>示例：wtform中，对字段进行排序</li></ul></li></ul></li></ul></li></ul><h6 id="为什么要学python？"><a href="#为什么要学python？" class="headerlink" title="为什么要学python？"></a>为什么要学python？</h6><ul><li>学长建议</li><li>自己了解：<ul><li>简单易学，生态圈强大（不局限应用面），发展趋势好（人工智能，数据分析）</li></ul></li></ul><h6 id="谈谈你对python和其他语言的区别？"><a href="#谈谈你对python和其他语言的区别？" class="headerlink" title="谈谈你对python和其他语言的区别？"></a>谈谈你对python和其他语言的区别？</h6><ul><li>解释性<ul><li>python/php</li></ul></li><li>编译型<ul><li>java/c#</li></ul></li><li>Python弱类型</li></ul><h6 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h6><ul><li><p>字符串、列表、元组、字典每个常用的5个方法？</p><ol><li>字符串：<ol><li><em>1，find通过元素找索引，可切片，找不到返回-1</em></li><li><em>2，index，找不到报错。</em></li><li>*3，split 由字符串分割成列表，默认按空格。</li><li><em>4，captalize 首字母大写，其他字母小写。</em></li><li><em>，upper 全大写。</em></li><li><em>，lower 全小写。</em></li><li><em>title，每个单词的首字母大写。</em></li><li><em>startswith 判断以什么为开头，可以切片，整体概念。</em></li><li><em>endswith 判断以什么为结尾，可以切片，整体概念。</em></li><li><em>format格式化输出</em></li></ol></li><li><em>字典：</em><ol><li>key： 输出所有的键<br>clear：清空<br>dic：删除的键如果没有则报错<br>pop：键值对删，有返回，没有原来的键会报错（自行设置返回键就不会报错）<br>popitem：随机删键值对<br>del：删除的键如果没有则报错<br>改 update</li></ol></li><li>列表：<ol><li>append：在后面添加。<br>Insert按照索引添加，<br>expend：迭代着添加。<br>list.extend(seq) - 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）<br>pop 删除 (pop 有返回值)<br>remove 可以按照元素去删<br>clear 清空列表</li></ol></li><li>元组<ol><li>1、cmp(tuple1, tuple2)：比较两个元组元素。<br>2、len(tuple)：计算元组元素个数。<br>3、max(tuple)：返回元组中元素最大值。<br>4、min(tuple)：返回元组中元素最小值。<br>5、tuple(seq)：将列表转换为元组。、</li></ol></li></ol><h5 id="函数-必问"><a href="#函数-必问" class="headerlink" title="函数(必问)"></a>函数(必问)</h5></li><li><p>函数参数传递的是什么？ ——————引用</p></li><li><p><code>def func(a,b=[]):pass</code></p><ul><li>函数的第二个默认参数是一个list，当第一次执行的时候实例化了一个list，第三次执行还是用第一次执行的时候实例化的地址存储，所以第一和第三次执行的结果就是相同的，想每次执行只输出当前传入参数 ，默认参数应该设置为None。</li></ul></li><li><p>lambda 表达式</p></li><li><p>列表生成式    [i for i in range(1)]</p></li><li><p>生成器表达式 （for i in range(1)）</p></li></ul><h5 id="迭代器、生成器、装饰器、可迭代对象（必问）"><a href="#迭代器、生成器、装饰器、可迭代对象（必问）" class="headerlink" title="迭代器、生成器、装饰器、可迭代对象（必问）"></a>迭代器、生成器、装饰器、可迭代对象（必问）</h5><ul><li><p>迭代器：内部实现<code>__next__</code>方法，帮助我们向后一个一个取值。一步一步往前迭代，到相应位置停止，for循环底层依赖迭代器</p></li><li><p>生成器：一个函数内部存在yield关键字；v = 函数（）,v是生成器，不会一次创建，而是一次一次创建</p><ul><li>一种特殊的迭代器，底层依赖迭代器</li><li>应用场景：range、xrange<ul><li>py2：range(1000)立即创建;xrange(1000)生成器</li><li>py3：range(1000)生成器</li></ul></li></ul></li><li><p>可迭代对象：内部实现<code>__iter__</code>方法且返回一个迭代器</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Xx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> iter<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">)</span>obj <span class="token operator">=</span> Xx<span class="token punctuation">(</span><span class="token punctuation">)</span>        </code></pre><ul><li>应用场景：<ul><li>wtform中对form对象进行循环时，显示里面的所有字段</li><li>列表，元组、字典</li><li>总结：如果想要让一个对象可以被for循环，那么就需要在当前类中定义<code>__iter__</code>方法</li></ul></li></ul></li><li><p>装饰器：在不改变原函数的代码的基础上，在执行前后进行定制操作</p><ul><li><p>手写：</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">wapper</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">return</span> inner@wapper<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> s<span class="token operator">+</span><span class="token number">100</span><span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>应用场景：</p><ul><li>flask路由系统</li><li>flask before_request</li><li>csrf</li><li>django内置认证</li><li>django缓存</li></ul></li></ul></li></ul><h6 id="方法函数区别"><a href="#方法函数区别" class="headerlink" title="方法函数区别"></a>方法函数区别</h6><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fench</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>            Foo<span class="token punctuation">.</span>fench<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#函数</span>obj <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#实例化</span>obj<span class="token punctuation">.</span>fench<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#方法</span></code></pre><h6 id="通过类直接调用的是函数"><a href="#通过类直接调用的是函数" class="headerlink" title="通过类直接调用的是函数"></a>通过类直接调用的是函数</h6><h6 id="通过实例化对象调用的是方法"><a href="#通过实例化对象调用的是方法" class="headerlink" title="通过实例化对象调用的是方法"></a>通过实例化对象调用的是方法</h6><p>对于一个类里面的东西到底是函数还是方法取决于谁调用</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/08093.html"/>
      <url>/2021/08093.html</url>
      
        <content type="html"><![CDATA[<p>abbrlink: 10<br>date: 2021-6-29<br>title: flask源码解析<br>tags: Flask<br>categories: python</p><p>threading.local对象，用于为每个线程开辟一块空间来保存它独有的值</p><h6 id="在源码中分析上下文管理"><a href="#在源码中分析上下文管理" class="headerlink" title="在源码中分析上下文管理"></a>在源码中分析上下文管理</h6><p>​    第一阶段：将ctx（request，session）放到Local对象</p><p><img src="http://pic.ihcnb.cn/iHcnb/51a87aa487836.png" alt=" "></p><p>​    第二阶段：视图函数导入：request\session<br><img src="http://pic.ihcnb.cn/iHcnb/39fedcaaafdb0.png" alt="1628520008500.png"></p><p>​    第三阶段：请求完成<br>​                            获取到session并保存到cookie</p><p>​                            将ctx删除</p><p><img src="http://pic.ihcnb.cn/iHcnb/83d023f7df98a.png" alt="1628578173149.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/080814.html"/>
      <url>/2021/080814.html</url>
      
        <content type="html"><![CDATA[<p>abbrlink: 9<br>title: flask复习<br>tags: Flask<br>categories: python</p><h5 id="装饰器？应用场景？、"><a href="#装饰器？应用场景？、" class="headerlink" title="装饰器？应用场景？、"></a>装饰器？应用场景？、</h5><h6 id="在不改变函数内部代码的前提下，在它之前之上做些其他动作"><a href="#在不改变函数内部代码的前提下，在它之前之上做些其他动作" class="headerlink" title="在不改变函数内部代码的前提下，在它之前之上做些其他动作"></a>在不改变函数内部代码的前提下，在它之前之上做些其他动作</h6><p>​        应用：</p><p>​                flask路由、before_request、登录限制</p><p>​                django：csrf、缓存、用户登录</p><h5 id="蓝图"><a href="#蓝图" class="headerlink" title="蓝图"></a>蓝图</h5><h6 id="用作目录结构管理，可以加URL前缀，在某一个蓝图里面加入before-request"><a href="#用作目录结构管理，可以加URL前缀，在某一个蓝图里面加入before-request" class="headerlink" title="用作目录结构管理，可以加URL前缀，在某一个蓝图里面加入before_request"></a>用作目录结构管理，可以加URL前缀，在某一个蓝图里面加入before_request</h6><h5 id="session"><a href="#session" class="headerlink" title="session"></a>session</h5><h6 id="flask：-请求刚进来，去cookie获取原来的session，没有就是空-，把cookie拿到转换成特殊的字典，放在某个地方，谁要就去拿-（先把他放在某个地去取）django：（一直传递）"><a href="#flask：-请求刚进来，去cookie获取原来的session，没有就是空-，把cookie拿到转换成特殊的字典，放在某个地方，谁要就去拿-（先把他放在某个地去取）django：（一直传递）" class="headerlink" title="flask：    请求刚进来，去cookie获取原来的session，没有就是空    ，把cookie拿到转换成特殊的字典，放在某个地方，谁要就去拿 （先把他放在某个地去取）django：（一直传递）"></a>flask：    请求刚进来，去cookie获取原来的session，没有就是空    ，把cookie拿到转换成特殊的字典，放在某个地方，谁要就去拿 （先把他放在某个地去取）django：（一直传递）</h6><h5 id="django-flask框架的认识："><a href="#django-flask框架的认识：" class="headerlink" title="django/flask框架的认识："></a>django/flask框架的认识：</h5><h6 id="django：大而全，包含很多组件如-admin-form"><a href="#django：大而全，包含很多组件如-admin-form" class="headerlink" title="django：大而全，包含很多组件如:admin,form"></a>django：大而全，包含很多组件如:admin,form</h6><h6 id="flask：短小精悍，可扩展强，很多组件如：wtforms、-SQLAchemy-flask-sqlachemy、flask-script、flask-migrate"><a href="#flask：短小精悍，可扩展强，很多组件如：wtforms、-SQLAchemy-flask-sqlachemy、flask-script、flask-migrate" class="headerlink" title="flask：短小精悍，可扩展强，很多组件如：wtforms、    SQLAchemy\flask-sqlachemy、flask-script、flask-migrate"></a>flask：短小精悍，可扩展强，很多组件如：wtforms、    SQLAchemy\flask-sqlachemy、flask-script、flask-migrate</h6><h6 id="相同点：都基于wsgi-（一个协议，一套http协议规范-），没有自己的socke"><a href="#相同点：都基于wsgi-（一个协议，一套http协议规范-），没有自己的socke" class="headerlink" title="相同点：都基于wsgi （一个协议，一套http协议规范 ），没有自己的socke"></a>相同点：都基于wsgi （一个协议，一套http协议规范 ），没有自己的socke</h6><h6 id="不同点：请求方式不一样，django相关数据通过参数传递，flask基于上下文管理来做"><a href="#不同点：请求方式不一样，django相关数据通过参数传递，flask基于上下文管理来做" class="headerlink" title="不同点：请求方式不一样，django相关数据通过参数传递，flask基于上下文管理来做"></a>不同点：请求方式不一样，django相关数据通过参数传递，flask基于上下文管理来做</h6><h5 id="上下文管理："><a href="#上下文管理：" class="headerlink" title="上下文管理："></a>上下文管理：</h5><h6 id="请求上下文：request、session"><a href="#请求上下文：request、session" class="headerlink" title="请求上下文：request、session"></a>请求上下文：request、session</h6><h6 id="App上下文：app、g"><a href="#App上下文：app、g" class="headerlink" title="App上下文：app、g"></a>App上下文：app、g</h6><h5 id="什么是g："><a href="#什么是g：" class="headerlink" title="什么是g："></a>什么是g：</h5><p>​    一次请求周期内的全局变量，只在一个周期内有效</p><h5 id="上下文管理器："><a href="#上下文管理器：" class="headerlink" title="上下文管理器："></a>上下文管理器：</h5><p>​    请求进来实例化RequestContext()对象，在实例化的过程中 已经把路由匹配做完了，把request和session以及路由匹配封装到RequestContext()对象里面，基于LocalStack把他放到Local里面，这是请求上下文，还有一个App请求上下文，他是基于APPContext()对象把app和g通过自己的LocalStack放到Local里面      </p><p>​    视图处理阶段使用LocalProxy调用偏函数，偏函数调用LocalStack到Local里面取值</p><p>​    请求结束，保存session，调用LocalStack.pop()把Local里面的东西删掉</p><h6 id="Local是什么它的作用？"><a href="#Local是什么它的作用？" class="headerlink" title="Local是什么它的作用？"></a>Local是什么它的作用？</h6><p>​    用于保存请求上下文对象以及app上下文对象</p><p>​    特殊作用：在保存时可以做到 “线程” 间的数据隔离</p><h6 id="LocalStack是什么它的作用？"><a href="#LocalStack是什么它的作用？" class="headerlink" title="LocalStack是什么它的作用？"></a>LocalStack是什么它的作用？</h6><p>​    将Local中保存的数据维护成一个栈  栈特点：先进后出</p><h6 id="Flask内置功能"><a href="#Flask内置功能" class="headerlink" title="Flask内置功能"></a>Flask内置功能</h6><p>​    路由、配置、视图、模板、session、蓝图、闪现、装饰器、中间件</p><h6 id="flask组件"><a href="#flask组件" class="headerlink" title="flask组件"></a>flask组件</h6><p>​    flask_session、flask-sqlalchemy、flask-migrate、flask-script</p><p>第三方组件</p><p>​    、DBUtils(数据连接池)、wtforms、sqlalchemy</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/080713.html"/>
      <url>/2021/080713.html</url>
      
        <content type="html"><![CDATA[<p>abbrlink: 14<br>title: 方法函数区别<br>tags: python<br>categories: Python</p><p>方法函数区别</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fench</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>            Foo<span class="token punctuation">.</span>fench<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#函数</span>obj <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#实例化</span>obj<span class="token punctuation">.</span>fench<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#方法</span></code></pre><h6 id="通过类直接调用的是函数"><a href="#通过类直接调用的是函数" class="headerlink" title="通过类直接调用的是函数"></a>通过类直接调用的是函数</h6><h6 id="通过实例化对象调用的是方法"><a href="#通过实例化对象调用的是方法" class="headerlink" title="通过实例化对象调用的是方法"></a>通过实例化对象调用的是方法</h6><p><u>对于一个类里面的东西到底是函数还是方法取决于谁调用</u></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/080411.html"/>
      <url>/2021/080411.html</url>
      
        <content type="html"><![CDATA[<p>abbrlink: 16<br>title: 分布式爬虫<br>tags: 爬虫<br>categories: 爬虫</p><h5 id="分布式："><a href="#分布式：" class="headerlink" title="分布式："></a>分布式：</h5><h6 id="什么是分布式爬虫？"><a href="#什么是分布式爬虫？" class="headerlink" title="什么是分布式爬虫？"></a>什么是分布式爬虫？</h6><p>​        基于多台电脑组建一个分布式机群，然后让机群中的每一台电脑执行同一组程序，然后让他们对同一个网站的数据进行爬取</p><h6 id="为什么要使用分布式？"><a href="#为什么要使用分布式？" class="headerlink" title="为什么要使用分布式？"></a>为什么要使用分布式？</h6><p>​        提升爬取数据的效率</p><h6 id="如何实现分布式爬虫"><a href="#如何实现分布式爬虫" class="headerlink" title="如何实现分布式爬虫"></a>如何实现分布式爬虫</h6><p>​        基于scrapy+redis的形式实现分布式</p><p>​            scrapy结合scrapy-redis组件实现分布式</p><h6 id="原生scrapy框架为什么无法实现分布式"><a href="#原生scrapy框架为什么无法实现分布式" class="headerlink" title="原生scrapy框架为什么无法实现分布式"></a>原生scrapy框架为什么无法实现分布式</h6><p>​        调度器和管道无法被分布式机群共享</p><p><img src="http://pic.ihcnb.cn/iHcnb/c9960246e341f.png" alt="1628088554059.png"></p><h6 id="scrapy-redis组件的作用："><a href="#scrapy-redis组件的作用：" class="headerlink" title="scrapy-redis组件的作用："></a>scrapy-redis组件的作用：</h6><p>​        提供可以被共享的调度器和管道</p><p>​    环境安装:</p><p>​        redis</p><p>​        <code>pip install scrapy-redis</code></p><p>​    编码流程：<br>​            创建一个工程</p><p>​            创建一个爬虫文件：可以基于CrawSpider也可以是普通文件</p><p>​                修改当前爬虫文件：</p><p>​                        导包：<code>from scrapy_redirs.spider import RedisCrawlSpider</code>普通类导：RedisSpider</p><p>​                将start_urls替换成redis_key = ‘xxx’ #表示的是可以被共享调度器中队列名称</p><p>​                编写爬虫类爬取数据操作（此时没有起始url）</p><p>​            对settings进行配置：</p><p>​                指定管道：</p><p>​                    #开启共享管道</p><p>​                    ITEM_PIPELINES = {</p><p>​                            ’scrapy_redis.pipelines.RedisPipeline‘:400</p><p>​                    }</p><p>​                指定调度器：</p><p>​                        #增加了一个去重容器类，作用使用Redis的set集合来存储请求的指纹数据，从而实现请·                        求去重</p><p>​                        DUOEFILTER_CLASS = ‘scrapy_redis.dupefilter.RFPDupeFilter’</p><p>​                        #使用scrapy-redis组件自己的调度器</p><p>​                        SCHEDULER =”scrpay_redis.scheduler.Scheduler”</p><p>​                        #配置调度器是否要持久化，也就是当爬虫结束后要不要清空Redis中请求队列和去重指                        纹的set</p><p>​                        SCHEDULER _PERSIST = True</p><p>​                指定redis服务（在settings.py）：</p><p>​                        REDIS_HOST=’redis服务的ip地址’</p><p>​                        REDIS_PORT = 6379</p><p>​        redis的配置文件进行配置：redis.windows.conf</p><p>​                    56行：#bind 127.0.0.1</p><p>​                    75行：pritected-mode no</p><p>​        携带配置文件启动redis服务</p><p>​                ./redis-server redis.windows.conf</p><p>​        启动redis的客户端</p><p>​                redis-cli</p><p>​        执行当前工程：</p><p>​                进入到爬虫文件对应的目录：scrapy runspider xxx.py</p><p>​        向调度器队列中扔入一个起始url：</p><p>​                队列在哪里呢？答：在redis中</p><p>​                    1push redis_key <a href="http://www.xxx.cm/">www.xxx.cm</a></p><p>​                #redis_key是在爬虫文件中定义的</p><p>​                    </p><p>​                        </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/07319.html"/>
      <url>/2021/07319.html</url>
      
        <content type="html"><![CDATA[<p>abbrlink: 9<br>title: 使用scrapy框架出现callback指定的函数不被调用的情况<br>tags: scrapy框架<br>categories: 爬虫</p><h4 id="使用scrapy框架出现callback指定的函数不被调用的情况"><a href="#使用scrapy框架出现callback指定的函数不被调用的情况" class="headerlink" title="使用scrapy框架出现callback指定的函数不被调用的情况"></a>使用scrapy框架出现callback指定的函数不被调用的情况</h4><p>问题：在学习scrapy框架时，写了一个爬虫，在parse函数里使用yield语句重新请求该网页结果中包含的链接，但是试了好几次parse_info函数都不会被调用</p><p><img src="http://pic.ihcnb.cn/iHcnb/304c54653b291.png" alt="1627725723152.png"></p><p>原因：因为自己写了allowed_domains，忘记改随手一写，所以导致这些请求不会执行</p><p><img src="http://pic.ihcnb.cn/iHcnb/30854a1be9bf8.png" alt="1627725794917.png"></p><p>解决方法：删掉allowed_domains属性，或者把域名写正确</p><p>修改完毕后，parse2函数就会被回调了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/07307.html"/>
      <url>/2021/07307.html</url>
      
        <content type="html"><![CDATA[<p>abbrlink: 9<br>title: scrapy基本使用<br>tags: scrapy框架<br>categories: 爬虫</p><h4 id="scrapy基本使用："><a href="#scrapy基本使用：" class="headerlink" title="scrapy基本使用："></a>scrapy基本使用：</h4><p>​    创建工程：<code>scrapy startproject 工程名</code></p><p>​    进入到工程后，在终端创建爬虫</p><p>​    创建爬虫：<code>scrapy genspider 爬虫名 爬虫的地址</code></p><p>​    执行爬虫：<code>scrapy crawl 爬虫名</code></p><h5 id="配置settings-py"><a href="#配置settings-py" class="headerlink" title="配置settings.py:"></a>配置settings.py:</h5><p>​        不遵从robots协议</p><p>​            <code>ROBOTSTXT_OBEY = False</code></p><p>​        进行UA伪装</p><p>​            ```USER_AGENT``</p><p>​        进行日志等级设定 : <code>LOG_LEVEL='ERROR'</code></p><h5 id="持久化储存："><a href="#持久化储存：" class="headerlink" title="持久化储存："></a>持久化储存：</h5><h6 id="基于终端命令："><a href="#基于终端命令：" class="headerlink" title="基于终端命令："></a>基于终端命令：</h6><p>​                特性：只可以将parse方法返回的值存储到本地磁盘</p><p>​                指令：<code>scrapy crawl dmoz -o douban.json -t json  </code></p><p>​                            o 后面是导出文件名，-t 后面是导出类型</p><p>​                可保存格式：JSON，JSON lines，CSV，XML    </p><h6 id="基于管道-实现流程"><a href="#基于管道-实现流程" class="headerlink" title="基于管道:实现流程"></a>基于管道:实现流程</h6><p>​                1.数据解析</p><p>​                2.在item类定义相关属性</p><p>​                3.将解析的数据存储或封装到一个item类型的对象</p><p>​                4.向管道提交item</p><p>​                5.在管道文件的process_item方法中接受item进行持久化存储</p><p>​                6.配置文件开启管道 <code>setting.py  ITEM_PIPELINES</code></p><p>​        将同一份数据持久化到不同的平台中</p><p>​                分析：<br>​                    1.管道文件中的一个管道类负责数据的一种形式的持久化存储    </p><p>​                    2.爬虫文件向管道提交的item只会提交给优先级最高的那一类管道</p><p>​                    3.在管道类的process_item中的return item表示的是将当前管道接受的item返回、提交给下一个即将被执行的管道类</p><h5 id="五大核心组件"><a href="#五大核心组件" class="headerlink" title="五大核心组件"></a>五大核心组件</h5><p><img src="http://pic.ihcnb.cn/iHcnb/7c496e822304b.png" alt="1627635209847.png"></p><ul><li>引擎(Scrapy)<ul><li>用来处理整个系统的数据流处理, 触发事务(框架核心)</li></ul></li><li>调度器(Scheduler)<ul><li>用来接受引擎发过来的请求, 压入队列中, 并在引擎再次请求的时候返回. 可以想像成一个URL（抓取网页的网址或者说是链接）的优先队列, 由它来决定下一个要抓取的网址是什么, 同时去除重复的网址</li></ul></li><li>下载器(Downloader)<ul><li>用于下载网页内容, 并将网页内容返回给蜘蛛(Scrapy下载器是建立在twisted这个高效的异步模型上的)</li></ul></li><li>爬虫(Spiders)<ul><li>爬虫是主要干活的, 用于从特定的网页中提取自己需要的信息, 即所谓的实体(Item)。用户也可以从中提取出链接,让Scrapy继续抓取下一个页面</li></ul></li><li>项目管道(Pipeline)<ul><li>负责处理爬虫从网页中抽取的实体，主要的功能是持久化实体、验证实体的有效性、清除不需要的信息。当页面被爬虫解析后，将被发送到项目管道，并经过几个特定的次序处理数据。</li></ul></li></ul><h6 id="基于scrapy进行图片数据·爬取"><a href="#基于scrapy进行图片数据·爬取" class="headerlink" title="基于scrapy进行图片数据·爬取"></a>基于scrapy进行图片数据·爬取</h6><p>​    在爬虫文件中只需要解析提取出图片的地址，然后将地址提交给管道</p><p>​    在配置文件中配置：<code>IMAGES_STORE = './imgsLib'</code></p><p>​    在管道文件中进行管道类的定制：</p><p>​                1.from scrapy.pipelines.images import ImagesPipeline</p><p>​                2.将管道类的父类修改成 ImagesPipline 或者重新定义类</p><p>​                3.重写父类三方法</p><h6 id="提高scrapy的爬取效率"><a href="#提高scrapy的爬取效率" class="headerlink" title="提高scrapy的爬取效率"></a>提高scrapy的爬取效率</h6><p>​    增加并发：</p><p>​            框架默认开启32个并发线程，可以适当增加，在setting配置文件中修改<code>CONCURRENT_REQUESTS</code></p><p>​    降低日志级别：</p><p>​            在运行框架时，会有大量日志信息输出，为了减少cpu的使用率。可以设置log输出信息为INFO或者ERROR  在配置文件中编写<code>COOKIES_ENABLED = False</code></p><p>​    禁止重试：对失败的HTTP请求重试会减慢爬取速度，<code>RETRY_ENABLED = False</code></p><p>​    减少下载超时：如果对一个非常慢的链接进行爬取，减少下载超时可以能让卡主的链接快速被放弃，从而提升效率。在配置文件中进行编写<code>DOWNLOAD_TIMEORT = 10</code> 超时时间为10s</p><h6 id="增量式爬虫"><a href="#增量式爬虫" class="headerlink" title="增量式爬虫"></a>增量式爬虫</h6><pre class=" language-python"><code class="language-python"><span class="token operator">-</span>增量式爬虫    <span class="token operator">-</span>概念：监测网站数据更新的情况    <span class="token operator">-</span>核心：去重！！数据库储存之储存更新的    <span class="token operator">-</span>深度爬取类型的网站中需要对详情页的url进行记录和检测        <span class="token operator">-</span>记录：将爬取过的详情页url进行记录保存            <span class="token operator">-</span>url存储到redis的set中        <span class="token operator">-</span>检测：对某一个详情url进行发请求之前先去redis中查看是否有当前url，有的话就意味该url已经爬取过了</code></pre><p>​    数据指纹</p><p><img src="http://pic.ihcnb.cn/iHcnb/9b4f2f670df45.png" alt="1628256440220.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/07288.html"/>
      <url>/2021/07288.html</url>
      
        <content type="html"><![CDATA[<p>abbrlink: 9<br>title: selenium<br>tags: selenium<br>categories: 自动化工具</p><h3 id="selenium-是基于浏览器自动化模块"><a href="#selenium-是基于浏览器自动化模块" class="headerlink" title="-selenium 是基于浏览器自动化模块"></a>-selenium 是基于浏览器自动化模块</h3><h6 id="phantomJs是一款无可视化界面的浏览器-（已经弃用）"><a href="#phantomJs是一款无可视化界面的浏览器-（已经弃用）" class="headerlink" title="-phantomJs是一款无可视化界面的浏览器 （已经弃用）"></a>-phantomJs是一款无可视化界面的浏览器 （已经弃用）</h6><h3 id="selenium-基本操作"><a href="#selenium-基本操作" class="headerlink" title="selenium 基本操作"></a>selenium 基本操作</h3><p>​    官方参考文档：<a href="http://selenium-python.readthedocs.io/index.html">http://selenium-python.readthedocs.io/index.html</a></p><p>​    谷歌驱动下载：<a href="http://chromedriver.storage.googleapis.com/index.html">http://chromedriver.storage.googleapis.com/index.html</a></p><p>​    火狐驱动下载：<a href="https://github.com/mozilla/geckodriver/releases">https://github.com/mozilla/geckodriver/releases</a></p><h4 id="无头浏览器谷歌配置"><a href="#无头浏览器谷歌配置" class="headerlink" title="无头浏览器谷歌配置"></a>无头浏览器谷歌配置</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>options <span class="token keyword">import</span> Options <span class="token comment" spellcheck="true">#导入无头浏览器模块</span><span class="token comment" spellcheck="true">#创建一个对象，用来控制ｃｈｒｏｍｅ以无界面模式打开</span>chrome_options <span class="token operator">=</span> Options<span class="token punctuation">(</span><span class="token punctuation">)</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--headless'</span><span class="token punctuation">)</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--disable-gpu'</span><span class="token punctuation">)</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>chrome_options<span class="token operator">=</span>chrome_options<span class="token punctuation">)</span></code></pre><h4 id="无头浏览器火狐配置"><a href="#无头浏览器火狐配置" class="headerlink" title="无头浏览器火狐配置"></a>无头浏览器火狐配置</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>firefox<span class="token punctuation">.</span>options <span class="token keyword">import</span> Options <span class="token comment" spellcheck="true">#导入无头浏览器模块</span><span class="token comment" spellcheck="true">#创建一个对象，用来控制ｃｈｒｏｍｅ以无界面模式打开</span>firefox_options <span class="token operator">=</span> Options<span class="token punctuation">(</span><span class="token punctuation">)</span>firefox_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--headless'</span><span class="token punctuation">)</span>firefox_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--disable-gpu'</span><span class="token punctuation">)</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Firefox<span class="token punctuation">(</span>firefox_options<span class="token operator">=</span>firefox_options<span class="token punctuation">)</span></code></pre><h4 id="规避网站检测"><a href="#规避网站检测" class="headerlink" title="规避网站检测"></a>规避网站检测</h4><p>现在不少大网站有对selenium采取了监测机制。比如正常情况下我们用浏览器访问淘宝等网站的在控制台打印<code>window.navigator.webdriver</code>的值为undefined。而使用selenium访问则该值为true。</p><p>解决：</p><p>​     只需要设置<code>Chromedriver</code>的启动参数即可解决问题。在启动<code>Chromedriver</code>之前，为Chrome开启实验性功能参数<code>excludeSwitches</code>，它的值为<code>['enable-automation']</code>，完整代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ChromeOptions  <span class="token comment" spellcheck="true"># 需要导入的类</span><span class="token comment" spellcheck="true"># 创建 option 对象</span>option <span class="token operator">=</span> ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>option<span class="token punctuation">.</span>add_experimental_option<span class="token punctuation">(</span><span class="token string">'excludeSwitches'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'enable-automation'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建浏览器对象</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>options<span class="token operator">=</span>option<span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.taobao.com/'</span><span class="token punctuation">)</span></code></pre><h3 id="chrome-79以后版本"><a href="#chrome-79以后版本" class="headerlink" title="chrome 79以后版本"></a>chrome 79以后版本</h3><pre class=" language-python"><code class="language-python">driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>r<span class="token string">'C:\Users\Lenovo\Documents\study\初识爬虫\chromedriver.exe'</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">'https://www.taobao.com/'</span>driver<span class="token punctuation">.</span>execute_cdp_cmd<span class="token punctuation">(</span><span class="token string">"Page.addScriptToEvaluateOnNewDocument"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  <span class="token string">"source"</span><span class="token punctuation">:</span> <span class="token triple-quoted-string string">"""    Object.defineProperty(navigator, 'webdriver', &amp;#123;      get: () =&gt; undefined    &amp;#125;)  """</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;)</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/072710.html"/>
      <url>/2021/072710.html</url>
      
        <content type="html"><![CDATA[<p>abbrlink: 31503<br>title: win10下安装scrapy不成功的问题解决<br>tags: scrapy<br>categories: 爬虫</p><h4 id="win10下安装scrapy不成功的问题解决"><a href="#win10下安装scrapy不成功的问题解决" class="headerlink" title="win10下安装scrapy不成功的问题解决"></a>win10下安装scrapy不成功的问题解决</h4><pre class=" language-python"><code class="language-python">pip install scrapy</code></pre><p>执行命令后发现会报错，一般原因：</p><p>​    Scrapy 使用Twisted 这个异步网络库来处理网络通讯所以win10用户先安装Twisted <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p><p>​    下载对应py版本的.whl文件来安装Twisted</p><p>​    下载完成后在虚拟环境中pip install （文件地址）</p><p>之后安装pypiwin32：</p><pre class=" language-python"><code class="language-python">pip install pypiwin32 <span class="token comment" spellcheck="true">#注：scrapy依赖 pypiwin32</span></code></pre><p>如果此时还报错，可能是pip需要升级</p><p>在左下角搜索<code>cmd</code>右击以管理员模式打开,直接执行升级pip命令</p><p>注：必须以管理员模式打开否则升级pip没有权限</p><p>最后在执行</p><p><code>pip install scrapy</code></p><p>success</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>高并发的解决方案</title>
      <link href="/2021/07254.html"/>
      <url>/2021/07254.html</url>
      
        <content type="html"><![CDATA[<h4 id="高并发的解决方案"><a href="#高并发的解决方案" class="headerlink" title="高并发的解决方案"></a>高并发的解决方案</h4><h5 id="应用和静态分离"><a href="#应用和静态分离" class="headerlink" title="应用和静态分离"></a>应用和静态分离</h5><ol><li><p>应用和静态分离，将应用和静态文件放在不同的服务器上面，因为静态文件没有状态分离比较简单通过不同的域名让服务器直接访问资源服务器而不需要在访问应用的服务器</p><p><a href="https://imgtu.com/i/WgIJfO"><img src="https://z3.ax1x.com/2021/07/25/WgIJfO.png" alt="WgIJfO.png"></a></p></li></ol><h5 id="页面缓存"><a href="#页面缓存" class="headerlink" title="页面缓存"></a>页面缓存</h5><ol><li>页面缓存是将应用生成的页面缓存起来，这样就不需要每次都生成页面了，从而可以节省大量的CPU资源，如果将缓存的页面放到内存中速度就更快了。如果使用Nginx服务器就可以使用它自带的缓存功能，当然也可以使用专门的Squid 服务器。页面缓存的默认失效机制一班都是按缓存时间处理的，当然也可以在修改数据之后手动让相应的缓存失效。</li></ol><h5 id="集群与分布式"><a href="#集群与分布式" class="headerlink" title="集群与分布式"></a>集群与分布式</h5><ol><li>集群是每台服务器都具有相同的功能，处理请求时调用那台服务器都可以，主要起分流作用。</li><li>分布式是将不同的业务放到不同的服务器中，处理一个请求可能需要用到多台服务器，这样就可以提高一个请求的处理速度，而且集群和分布式也可以同时使用。</li><li>集群有两个方式：一种是在静态资源集群。另一种是应用程序集群。静态资源集群比较简单。应用程序集群在处理过程中最核心的问题就是Session 同步问题。</li><li>’Session 同步有两种处理方式：一种是在Session 发生变化后自动同步到其他服务器，另一种就是用个程序统一管理Session。所有集群的服务器都使用同一个Session，Tomcat 默认使用就是第一种方式，通过简单的配置就可以实现，第二种方式可以使用专门的服务器安装Mencached等高效的缓存程序统一来管理session，然后再应用程序中通过重写Request并覆盖getSession 方法来获取制定服务器中的Session。</li><li>对于集群来说还有一个核心的问题就是负载均衡，也就是接收到一个请求后具体分配到那个服务器去处理的问题，这个问题可以通过软件处理也可以使用专门的硬件（如：F5）解决。</li></ol><h5 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h5><ol><li><p>反向代理指的是客户端直接访问的服务器并不真正提供服务，它从别的服务器获取资源然后将结果返回给用户</p><h6 id="反向代理服务器和代理服务器的区别"><a href="#反向代理服务器和代理服务器的区别" class="headerlink" title="反向代理服务器和代理服务器的区别"></a>反向代理服务器和代理服务器的区别</h6><p>反向代理是服务器自动调用别的服务器返回给我们结果，我们并不知道</p><p>代理服务器是我们主动去访问代理服务器从而让他返回给我们访问不了的内容</p></li></ol><h5 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h5><ol><li>cdn其实是一种特殊的集群页面缓存服务器，他和普通集群的多台页面缓存服务器相比，主要是它存放的位置和分配请求的方式有点特殊。CDN 服务器是分布在全国各地的，当接收到用户请求后会将请求分配到最合适的CDN服务器节点获取数据。比如联通的用户分配到联通的节点，上海的用户分配到上海的节点。</li></ol><h5 id="数据库优化"><a href="#数据库优化" class="headerlink" title="数据库优化"></a>数据库优化</h5><ol><li>数据库表结构涉及</li><li>数据类型的选用</li><li>sql优化</li><li>索引优化</li><li>配置优化</li></ol><h5 id="底层优化"><a href="#底层优化" class="headerlink" title="底层优化"></a>底层优化</h5><ol><li>前面所说的都是架构都是建立在最前面介绍的基础结构上，很多地方都需要通过网络传输，如果可以加快网络传输的速度，那将会让整个系统得到改善</li></ol>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>session执行流程以及源码解刨</title>
      <link href="/2021/072431503.html"/>
      <url>/2021/072431503.html</url>
      
        <content type="html"><![CDATA[<pre class=" language-python"><code class="language-python">session<span class="token punctuation">[</span><span class="token string">'xxx'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token comment" spellcheck="true">#只要出现这种语法，内部绝对执行 __setitem__ 方法</span></code></pre><p>简易执行流程</p><img src="http://pic.ihcnb.cn/iHcnb/b08851037ecfd.png" alt="1627093507956.png"><p>最后走到save_session将ctx中的session写入cookie中</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于实现局域网访问flask项目</title>
      <link href="/2021/07131.html"/>
      <url>/2021/07131.html</url>
      
        <content type="html"><![CDATA[<h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h5><h3 id="关于实现局域网访问flask项目"><a href="#关于实现局域网访问flask项目" class="headerlink" title="关于实现局域网访问flask项目"></a>关于实现局域网访问flask项目</h3><p>局域网访问：</p><p>打开pycharm  </p><ul><li><p><img src="http://pic.ihcnb.cn/iHcnb/a0652e5cbbf95.png" alt="1626188665947.png"></p><p><img src="http://pic.ihcnb.cn/iHcnb/abc26a9eda637.png" alt="WRMS1COXWLF0CHR9J1L39YJ.png"></p><p>修改如图</p><p>点击apply，重新运行，出现下面这种说明成功</p><p>![~KC9BF_M_WB3_@_21H`MTGD.png](<a href="http://pic.ihcnb.cn/iHcnb/db9651d49e301.png">http://pic.ihcnb.cn/iHcnb/db9651d49e301.png</a>)</p><p>win+r打开cmd</p><p><img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210713230731428.png" alt="image-20210713230731428"></p></li></ul><p>进入输入ipconfig</p><p>查看当前电脑ipv4（一般最后一类）</p><ul><li><p><img src="http://pic.ihcnb.cn/iHcnb/1915e5585690c.png" alt="1626188954353.png"></p><p>复制IP地址</p><p>打开浏览器，把0.0.0.0:8000,替换成ip地址：8000</p><p>*注：不同网络下ip地址都不一样，最好运行前看看是否有变化</p><h4 id="如果本地运行"><a href="#如果本地运行" class="headerlink" title="如果本地运行"></a>如果本地运行</h4><p>步骤同前两张图片一样，删除    ```-h 0.0.0.0……..``</p><p>重新运行项目：待出现</p><p><img src="http://pic.ihcnb.cn/iHcnb/28699fc3cd736.png" alt="1626189295895.png"></p><p>则说明本地运行成功，其他人无法访问</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python框架 </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python web框架对比</title>
      <link href="/2021/071243123.html"/>
      <url>/2021/071243123.html</url>
      
        <content type="html"><![CDATA[<h6 id="谈谈对python-web框架："><a href="#谈谈对python-web框架：" class="headerlink" title="谈谈对python web框架："></a>谈谈对python web框架：</h6><ul><li>-django，大而全，内部提供：ORM，Admin，中间件，Form、ModelForm、session.、缓存、信号、csrf；</li><li>flask：短小精悍、可扩展性强、第三方组件丰富。</li><li>tornado：短小精悍+异步非阻塞</li><li></li></ul><h6 id="谈谈对面向对象的理解"><a href="#谈谈对面向对象的理解" class="headerlink" title="谈谈对面向对象的理解"></a>谈谈对面向对象的理解</h6><ul><li>封装：<ul><li>将同一方法分为一类：方法封装到类中</li><li>将方法中共同的参数封装到对象中：把公用值封装到对象中。</li><li><img src="http://pic.ihcnb.cn/iHcnb/a6b94ab8398bb.png" alt="1626942837792.png"></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
            <tag> web框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>列表排序</title>
      <link href="/2021/07081.html"/>
      <url>/2021/07081.html</url>
      
        <content type="html"><![CDATA[<h4 id="路比三人组"><a href="#路比三人组" class="headerlink" title="路比三人组"></a>路比三人组</h4><h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h5><ul><li><p>列表相邻的两个数，如果前面比后面大，交换这两个数</p></li><li><p>一趟排序完成后，无序列表区减一，有序列表区加一</p></li><li><p>时间复杂度：O(n^2)</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        exchange <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment" spellcheck="true">#优化：减少排序次数</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                li<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>li<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                exchange <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 每一次拍完序打印</span>        <span class="token keyword">if</span> <span class="token operator">not</span> exchange<span class="token punctuation">:</span>            <span class="token keyword">return</span>  <span class="token comment" spellcheck="true"># 如果已经排序完成，后面都是有序，则不用继续比对，继续排列 如 [9,6,1,2,3,4,5],只比对前三个，减少时间提高效率</span>li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>bubble_sort<span class="token punctuation">(</span>li<span class="token punctuation">)</span></code></pre></li></ul><h5 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h5><ul><li><p>遍历记录最小的数放在第一位</p></li><li><p>再一趟排序记录列表区最小的数，放在第二个位置</p></li><li><p>算法关键点：有序区，无序区最小数的位置</p></li><li><p>时间复杂度：O(n^2)</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">select_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        min_loc <span class="token operator">=</span> i        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> li<span class="token punctuation">[</span>min_loc<span class="token punctuation">]</span><span class="token punctuation">:</span>                min_loc <span class="token operator">=</span> j        li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>li<span class="token punctuation">[</span>min_loc<span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>min_loc<span class="token punctuation">]</span><span class="token punctuation">,</span>li<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>select_sort<span class="token punctuation">(</span>li<span class="token punctuation">)</span></code></pre></li></ul><h5 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h5><ul><li><p>时间复杂度：O(n^2)</p></li><li><p>摸牌规则，摸到一张牌和手上的牌比对，大的放后面，小的放前面</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">insert_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#i 表示摸到的牌的下标</span>        tmp <span class="token operator">=</span> li<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># j指手里牌的下标</span>        <span class="token keyword">while</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">and</span> tmp <span class="token operator">&lt;</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            li<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            j <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span>        li<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp        <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>insert_sort<span class="token punctuation">(</span>li<span class="token punctuation">)</span></code></pre></li></ul><h4 id="牛逼三人组"><a href="#牛逼三人组" class="headerlink" title="牛逼三人组"></a>牛逼三人组</h4><h5 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h5><ul><li><p>时间复杂度：O(nlogn)</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> li<span class="token punctuation">[</span>left<span class="token punctuation">]</span>    <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>        <span class="token keyword">while</span> left<span class="token operator">&lt;</span>right <span class="token operator">and</span> li<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> tmp<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#从右边找比tmp小的数</span>            right <span class="token operator">-=</span><span class="token number">1</span> <span class="token comment" spellcheck="true">#往左走一步</span>        li<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#把右边的值写到左边空位</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token operator">and</span> li<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> tmp<span class="token punctuation">:</span>            left <span class="token operator">+=</span><span class="token number">1</span>        li<span class="token punctuation">[</span>right<span class="token punctuation">]</span>  <span class="token operator">=</span> li<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#把左边的值写到右边的空位上</span>    li<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> tmp    <span class="token keyword">return</span> left<span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> left<span class="token operator">&lt;</span>right<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#至少有两个元素</span>        mid <span class="token operator">=</span> partition<span class="token punctuation">(</span>li<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span>        quick_sort<span class="token punctuation">(</span>li<span class="token punctuation">,</span>left<span class="token punctuation">,</span>mid<span class="token number">-1</span><span class="token punctuation">)</span>        quick_sort<span class="token punctuation">(</span>li<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span>li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>quick_sort<span class="token punctuation">(</span>li<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法入门</title>
      <link href="/2021/070610717.html"/>
      <url>/2021/070610717.html</url>
      
        <content type="html"><![CDATA[<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>一个计算过程，解决问题的方法</p><p>“程序=数据结构+算法”</p><h5 id="时间复杂度-小结"><a href="#时间复杂度-小结" class="headerlink" title="时间复杂度-小结"></a>时间复杂度-小结</h5><ul><li>时间复杂度用来估计算法运行时间的一个式子（单位）。</li><li>一般来说，时间复杂度高的算法比复杂度低的算法慢</li><li>常见的时间复杂度（按效率排序）<ul><li>O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n^2)&lt;O(n^2logn)&lt;O(n^3)</li></ul></li><li>复杂问题的时间复杂度<ul><li>O(n!) O(2^n) O(n^n)</li></ul></li></ul><h4 id="如何简单快速地判断算法复杂度"><a href="#如何简单快速地判断算法复杂度" class="headerlink" title="如何简单快速地判断算法复杂度"></a>如何简单快速地判断算法复杂度</h4><ul><li><p>快速判断算法复杂度（适用绝大多数简单情况）：\</p><ul><li>确定问题规模n</li><li>循环减半过程——logn</li><li>k层关于n的循环——n^k</li></ul></li><li><p>复杂情况：根据算法执行过程判断</p></li></ul><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><ul><li>用来评估算法内存占用大小的式子</li><li>空间复杂度的表示方式与时间复杂度完全一样<ul><li>算法使用几个变量：O(1)</li><li>算法使用了长度为n的一堆列表：O(n)</li><li>算法使用了m行n列的二维列表：O(mn)   </li></ul></li><li>”空间换时间“：宁可占用多的空间来提升时间</li></ul><p><img src="http://pic.ihcnb.cn/iHcnb/258f323facada.png" alt="1625539849122.png"></p><h4 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h4><p><img src="http://pic.ihcnb.cn/iHcnb/696c369b60ff9.png" alt="1625626707071.png"></p><ul><li><p>顺序查找（线性查找）：从第一个元素往下找，直到找到或者搜索到列表最后一个元素为止</p></li><li><p>时间复杂度：O(n)</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">linear_search</span><span class="token punctuation">(</span>data_set<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    :param data_set: 列表    :param value: 要查的数据    :return:循环找到需要的数据，返回下标    '''</span>    <span class="token keyword">for</span> ind<span class="token punctuation">,</span>v <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>data_set<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> v <span class="token operator">==</span> value<span class="token punctuation">:</span>            <span class="token keyword">return</span> ind    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> None</code></pre></li><li><p>二分查找</p></li><li><p>时间复杂度：O(logn) </p><ul><li>比O(n)也就是线性查找快得多</li></ul></li><li><p><img src="http://pic.ihcnb.cn/iHcnb/0e1893fc35e35.png" alt="1625625711331.png"></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#二分查找</span><span class="token keyword">def</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    :param li: 列表    :param val: 需要查找的数    :return:    '''</span>    left <span class="token operator">=</span> <span class="token number">0</span>    right <span class="token operator">=</span> len<span class="token punctuation">(</span>li<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">while</span> left<span class="token operator">&lt;=</span>right<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 候选区有值</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span> <span class="token operator">//</span><span class="token number">2</span>  <span class="token comment" spellcheck="true"># 找到候选区中间值</span>        <span class="token keyword">if</span> li<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> val<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果直接找到要找的值，返回</span>            <span class="token keyword">return</span> mid        <span class="token keyword">elif</span> li<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span>val<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 查找值在mid左侧</span>            right <span class="token operator">=</span> mid<span class="token number">-1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># li[mid]&lt;val 带查找的值在mid右侧</span>            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> None</code></pre><h6 id="python内置列表查找函数：index-运用线性查找，因为二分查找一大特点列表必须是有序列表"><a href="#python内置列表查找函数：index-运用线性查找，因为二分查找一大特点列表必须是有序列表" class="headerlink" title="*python内置列表查找函数：index()运用线性查找，因为二分查找一大特点列表必须是有序列表"></a>*python内置列表查找函数：index()运用线性查找，因为二分查找一大特点列表必须是有序列表</h6></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python创建一个学生字典并可以查询其中信息</title>
      <link href="/2021/07051.html"/>
      <url>/2021/07051.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python创建一个学生字典并可以查询其中信息"><a href="#Python创建一个学生字典并可以查询其中信息" class="headerlink" title="Python创建一个学生字典并可以查询其中信息"></a>Python创建一个学生字典并可以查询其中信息</h1><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个字典，存放单个学生信息</span>stuInfo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>stuInfo<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> namestuInfo<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> stuIdstuInfo<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> age<span class="token comment" spellcheck="true"># 单个学生信息放入列表</span>students<span class="token punctuation">.</span>append<span class="token punctuation">(</span>stuInfo<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"添加成功！"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#查询单个学生的信息</span><span class="token keyword">global</span> studentssearchID<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"请输入你要查询学生的学号:"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#验证是否有此学号</span>i <span class="token operator">=</span> <span class="token number">0</span>leap <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> temp <span class="token keyword">in</span> students<span class="token punctuation">:</span>    <span class="token keyword">if</span> temp<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">==</span> searchID<span class="token punctuation">:</span>        leap <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> leap <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有此学生学号，查询失败！"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"找到此学生，信息如下："</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"学号：%s\n姓名：%s\n年龄：%s\n"</span><span class="token operator">%</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>temp<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>temp<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pycharm 配置git工具</title>
      <link href="/2021/07011.html"/>
      <url>/2021/07011.html</url>
      
        <content type="html"><![CDATA[<p><strong>配置git工具</strong></p><p>首先确保安装git服务</p><p>打开pycharm</p><p><img src="http://pic.ihcnb.cn/iHcnb/5631641e003ed.png" alt="clipboard.png"></p><p><img src="http://pic.ihcnb.cn/iHcnb/1582db1661bf8.png" alt="clipboard.png"></p><p>点击<a href="https://github.com/settings/tokens/new%E8%BF%99%E4%B8%AA%E8%B6%85%E9%93%BE%E6%8E%A5%EF%BC%8C%E5%B0%B1%E6%98%AF%E5%88%9B%E5%BB%BA%E4%BD%A0%E7%9A%84token%E3%80%82">https://github.com/settings/tokens/new这个超链接，就是创建你的token。</a></p><p><img src="http://pic.ihcnb.cn/iHcnb/d27d3ee9133c3.png" alt="clipboard.png"></p><p>全选，然后复制令牌，粘贴在pycharm</p><p><img src="http://pic.ihcnb.cn/iHcnb/53999a444daab.png" alt="clipboard.png"></p><p><strong>操作</strong></p><p>项目从本地库上传到远程库</p><p><img src="http://pic.ihcnb.cn/iHcnb/002dbc91c5e5d.png" alt="clipboard.png"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pycharm git多人协作开发</title>
      <link href="/2021/07012.html"/>
      <url>/2021/07012.html</url>
      
        <content type="html"><![CDATA[<p>第一步：</p><p>复制合作者项目名</p><p><img src="http://pic.ihcnb.cn/iHcnb/5bb0aafb244f4.png" alt="clipboard.png"></p><p>在你这边搜索</p><p><img src="http://pic.ihcnb.cn/iHcnb/8db34b37a1084.png" alt="clipboard.png"></p><p>打开pycharm</p><p><img src="http://pic.ihcnb.cn/iHcnb/fd0c2dadcd904.png" alt="clipboard.png"></p><p>复制地址输入地址</p><p><img src="http://pic.ihcnb.cn/iHcnb/2de97e3e54a25.png" alt="clipboard.png"></p><p><img src="http://pic.ihcnb.cn/iHcnb/fb45ebea98971.png" alt="clipboard.png"></p><p>此时多人协作已完成文件克隆</p><p>次分支有所改动上传后需要在分支页面确认</p><p><img src="http://pic.ihcnb.cn/iHcnb/a01cbc2626ad6.png" alt="clipboard.png"></p><p>确认后主分支也需要确认，确认后方可修改主分支</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>存储引擎管理常用命令</title>
      <link href="/2021/063014.html"/>
      <url>/2021/063014.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-存储引擎管理"><a href="#1-存储引擎管理" class="headerlink" title="1 *存储引擎管理*"></a><strong>1</strong> <em><strong>*存储引擎管理*</strong></em></h3><h4 id="1-1-查看数据库支持的存储引擎"><a href="#1-1-查看数据库支持的存储引擎" class="headerlink" title="1.1 *查看数据库支持的存储引擎*"></a><strong>1.1</strong> <em><strong>*查看数据库支持的存储引擎*</strong></em></h4><p>show engines</p><h4 id="1-2-查看数据库当前使用的存储引擎"><a href="#1-2-查看数据库当前使用的存储引擎" class="headerlink" title="1.2 *查看数据库当前使用的存储引擎*"></a><strong>1.2</strong> <em><strong>*查看数据库当前使用的存储引擎*</strong></em></h4><p>就是默认引擎是什么。</p><p>show variables like ‘%storage_engine%’</p><p>也可以在MySQL配置文件中查看。 windows - my.ini。 Linux - my.cnf</p><h4 id="1-3-查看数据库表所用的存储引擎"><a href="#1-3-查看数据库表所用的存储引擎" class="headerlink" title="1.3 *查看数据库表所用的存储引擎*"></a><strong>1.3</strong> <em><strong>*查看数据库表所用的存储引擎*</strong></em></h4><p>show create table table_name</p><h4 id="1-4-创建表指定存储引擎"><a href="#1-4-创建表指定存储引擎" class="headerlink" title="1.4 *创建表指定存储引擎*"></a><strong>1.4</strong> <em><strong>*创建表指定存储引擎*</strong></em></h4><p>create table table_name (column_name column_type) engine = engine_name</p><h4 id="1-5-修改表的存储引擎"><a href="#1-5-修改表的存储引擎" class="headerlink" title="1.5 *修改表的存储引擎*"></a><strong>1.5</strong> <em><strong>*修改表的存储引擎*</strong></em></h4><p>alter table table_name engine=engine_name</p><h4 id="1-6-修改默认的存储引擎"><a href="#1-6-修改默认的存储引擎" class="headerlink" title="1.6 *修改默认的存储引擎*"></a><strong>1.6</strong> <em><strong>*修改默认的存储引擎*</strong></em></h4><p>在MySQL配置文件中修改下述内容：</p><p>default-storage-engine=INNODB</p><p>MySQL配置文件：</p><p>windows系统 - MySQL安装目录/my.ini （5.7版本my.ini文件在数据目录中。 C:/programdata/MySQL Server 5.7/mysql/）</p><p>linux系统 - /etc/my.cnf</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql数据库引擎（存储核心）</title>
      <link href="/2021/063016.html"/>
      <url>/2021/063016.html</url>
      
        <content type="html"><![CDATA[<h4 id="mysql数据库引擎（存储核心）："><a href="#mysql数据库引擎（存储核心）：" class="headerlink" title="mysql数据库引擎（存储核心）："></a>mysql数据库引擎（存储核心）：</h4><p><u>一个算法（存数据的方式）和Io（如何访问）的操作方式</u></p><p><strong>ISAM</strong>：读取操作很快，占内存低，但是不支持事务，不能容错（恢复），必须经常备份</p><p><strong>MyISAM</strong>：ISAM的扩展， MyISAM格式的一个重要缺陷就是不能在表损坏后恢复数据，必须经常使用Optimize Table命令清理空间，不支持事务</p><p><strong>InnoDB</strong>：支持事务，支持外键，但是速度比前两个慢，mysql5.5、6、7的默认储存引擎， InnoDB是为处理巨大数据量时的最大性能设计，它的CPU效率可能是任何其它基于磁盘的关系数据库引擎所不能匹敌的。</p><p><strong><em>*InnoDB特点：*</em>*</strong></p><p> <strong><em>*1）、支持事务*</em>*</strong></p><p>**<em>*<em>2）、数据多版本读取（InnoDB+MyISAM+ISAM）*</em>*</em>*</p><p>**<em>*<em>3）、锁定机制的改进*</em>*</em>*</p><p>**<em>*<em>4）、实现外键*</em>*</em>*</p><h5 id="innodb与myisam区别"><a href="#innodb与myisam区别" class="headerlink" title="*innodb与myisam区别*"></a><em><strong>*innodb与myisam区别*</strong></em></h5><p> InnoDB支持事务，MyISAM不支持，</p><p>InnoDB支持外键，而MyISAM不支持</p><p> Innodb不支持全文索引，而MyISAM支持全文索引，查询效率上MyISAM要高</p><p>InnoDB是聚集索引,MyISAM是非聚集索引</p><h5 id="如何选择"><a href="#如何选择" class="headerlink" title="*如何选择*"></a><em><strong>*如何选择*</strong></em></h5><p>支持事务选择lnnoDB，反之MyISAM，</p><p>查询多选择MyISAM，又读又写频繁，选择lnnoDB</p><p>系统崩溃后，MyISAM恢复起来更困难，能否接受； </p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>索引的优点</title>
      <link href="/2021/063015.html"/>
      <url>/2021/063015.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-1-索引的优点"><a href="#1-1-索引的优点" class="headerlink" title="1.1 *索引的优点*"></a><strong>1.1</strong> <em><strong>*索引的优点*</strong></em></h4><p>​    大大提高系统查询效率</p><p>​    第一、通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。 </p><p>​    第二、可以大大加快 数据的检索速度，这也是创建索引的最主要的原因。 </p><p>​    第三、可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。 </p><p>​    第四、在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。 </p><p>​    第五、通过使用索引，可以在查询的过程中，使用查询优化器，提高系统的性能。</p><h4 id="1-2-索引的缺点"><a href="#1-2-索引的缺点" class="headerlink" title="1.2 *索引的缺点*"></a><strong>1.2</strong> <em><strong>*索引的缺点*</strong></em></h4><p>创建索引和维护索引要耗费时间，    随着数据量而增加</p><p>占用物理内存，</p><p>当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，降低了数据的维护速度</p><h4 id="1-3-什么样的字段适合创建索引"><a href="#1-3-什么样的字段适合创建索引" class="headerlink" title="1.3 *什么样的字段适合创建索引*"></a><strong>1.3</strong> <em><strong>*什么样的字段适合创建索引*</strong></em></h4><p>经常用到的（搜索，排序，范围，连接，where）</p><h4 id="1-4-什么样的字段不适合创建索引"><a href="#1-4-什么样的字段不适合创建索引" class="headerlink" title="1.4 *什么样的字段不适合创建索引:*"></a><strong>1.4</strong> <em><strong>*什么样的字段不适合创建索引:*</strong></em></h4><p>用到的概率很低</p><p><strong>MySQL中的索引种</strong></p><p>B-Tree索引，顾名思义，就是所有的索引节点都按照balance tree的数据结构来存储。B-tree结构可以显著减少定位记录时所经历的中间过程，从而加快存取速度。</p><p>B-tree中，每个结点包含：</p><p>1、本结点所含关键字的个数；</p><p>2、指向父结点的指针；</p><p>3、关键字；</p><p>4、指向子结点的指针；</p><p>对于一棵m阶B-tree，每个结点至多可以拥有m个子结点。各结点的关键字和可以拥有的子结点数都有限制，规定m阶B-tree中，根结点至少有2个子结点，除非根结点为叶子节点，相应的，根结点中关键字的个数为1<del>m-1；非根结点至少有[m/2]（[]，向上取整）个子结点，相应的，关键字个数为[m/2]-1</del>m-1。</p><p>B-tree有以下特性：</p><p>1、关键字集合分布在整棵树中；</p><p>2、任何一个关键字出现且只出现在一个结点中；</p><p>3、搜索有可能在非叶子结点结束；</p><p>4、其搜索性能等价于在关键字全集内做一次二分查找；</p><p>5、自动层次控制；</p><p>由于限制了除根结点以外的非叶子结点，至少含有M/2个儿子，确保了结点的至少利用率，其最低搜索性能为：</p><p><a href="https://baike.baidu.com/pic/B-tree/6606402/0/4a77b2afe1e530f67cd92ad0?fr=lemma&amp;ct=single"><img src="file:///C:\Users\Lenovo\AppData\Local\Temp\ksohtml14936\wps1.png" alt="img"></a></p><p>其中，M为设定的非叶子结点最多子树个数，N为关键字总数；</p><p>所以B-树的性能总是等价于二分查找（与M值无关），也就没有B树平衡的问题；</p><p>由于M/2的限制，在插入结点时，如果结点已满，需要将结点分裂为两个各占M/2的结点；删除结点时，需将两个不足M/2的兄弟结点合并。</p><h4 id="1-1-Full-text索引"><a href="#1-1-Full-text索引" class="headerlink" title="1.1 *Full-text索引*"></a><strong>1.1</strong> <em><strong>*Full-text索引*</strong></em></h4><p>Full-text索引就是我们常说的全文索引，他的存储结构也是b-tree。主要是为了解决在我们需要用like查询的低效问题。只能解决’xxx%’的like查询。如：字段数据为ABCDE，索引建立为- A、AB、ABC、ABCD、ABCDE五个。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中的SQL的常见优化策略</title>
      <link href="/2021/063012.html"/>
      <url>/2021/063012.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-MySQL中的SQL的常见优化策略"><a href="#1-MySQL中的SQL的常见优化策略" class="headerlink" title="1 *MySQL中的SQL的常见优化策略*"></a><strong>1</strong> <em><strong>*MySQL中的SQL的常见优化策略*</strong></em></h3><h4 id="1-1-避免全表扫描"><a href="#1-1-避免全表扫描" class="headerlink" title="1.1 *避免全表扫描*"></a><strong>1.1</strong> <em><strong>*避免全表扫描*</strong></em></h4><p>对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p><h4 id="1-2-避免判断null值"><a href="#1-2-避免判断null值" class="headerlink" title="1.2 *避免判断null值*"></a><strong>1.2</strong> <em><strong>*避免判断null值*</strong></em></h4><p>应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：    </p><p>select id from t where num is null    </p><p>可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：    </p><p>select id from t where num=0    </p><h4 id="1-3-避免不等值判断"><a href="#1-3-避免不等值判断" class="headerlink" title="1.3 *避免不等值判断*"></a><strong>1.3</strong> <em><strong>*避免不等值判断*</strong></em></h4><p>应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则引擎将放弃使用索引而进行全表扫描。</p><h4 id="1-4-避免使用or逻辑"><a href="#1-4-避免使用or逻辑" class="headerlink" title="1.4 *避免使用or逻辑*"></a><strong>1.4</strong> <em><strong>*避免使用or逻辑*</strong></em></h4><p>应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：</p><p>select id from t where num=10 or num=20</p><p>可以这样查询：</p><p>select id from t where num=10</p><p>union all    </p><p>select id from t where num=20    </p><h4 id="1-5-慎用in和not-in逻辑"><a href="#1-5-慎用in和not-in逻辑" class="headerlink" title="1.5 *慎用in和not in逻辑*"></a><strong>1.5</strong> <em><strong>*慎用in和not in逻辑*</strong></em></h4><p>in 和 not in 也要慎用，否则会导致全表扫描，如：</p><p>select id from t1 where num in(select id from t2 where id &gt; 10)</p><p>此时外层查询会全表扫描，不使用索引。可以修改为：</p><p>select id from t1,(select id from t1 where id &gt; 10)t2 where t1.id = t2.id</p><p>此时索引被使用，可以明显提升查询效率。</p><h4 id="1-6-注意模糊查询"><a href="#1-6-注意模糊查询" class="headerlink" title="1.6 *注意模糊查询*"></a><strong>1.6</strong> <em><strong>*注意模糊查询*</strong></em></h4><p>下面的查询也将导致全表扫描：</p><p>select id from t where name like ‘%abc%’</p><p>模糊查询如果是必要条件时，可以使用select id from t where name like ‘abc%’来实现模糊查询，此时索引将被使用。如果头匹配是必要逻辑，建议使用全文搜索引擎（Elastic search、Lucene、Solr等）。</p><h4 id="1-7-避免查询条件中字段计算"><a href="#1-7-避免查询条件中字段计算" class="headerlink" title="1.7 *避免查询条件中字段计算*"></a><strong>1.7</strong> <em><strong>*避免查询条件中字段计算*</strong></em></h4><p>应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p><p>select id from t where num/2=100    </p><p>应改为:    </p><p>select id from t where num=100*2</p><h4 id="1-8-避免查询条件中对字段进行函数操作"><a href="#1-8-避免查询条件中对字段进行函数操作" class="headerlink" title="1.8 *避免查询条件中对字段进行函数操作*"></a><strong>1.8</strong> <em><strong>*避免查询条件中对字段进行函数操作*</strong></em></h4><p>应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：    </p><p>select id from t where substring(name,1,3)=’abc’–name以abc开头的id    </p><p>应改为:    </p><p>select id from t where name like ‘abc%’    </p><h4 id="1-9-WHERE子句“-”左边注意点"><a href="#1-9-WHERE子句“-”左边注意点" class="headerlink" title="1.9 *WHERE子句“=”左边注意点*"></a><strong>1.9</strong> <em><strong>*WHERE子句“=”左边注意点*</strong></em></h4><p>不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p><h4 id="1-10-组合索引使用"><a href="#1-10-组合索引使用" class="headerlink" title="1.10 *组合索引使用*"></a><strong>1.10</strong> <em><strong>*组合索引使用*</strong></em></h4><p>在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</p><h4 id="1-11-不要定义无异议的查询"><a href="#1-11-不要定义无异议的查询" class="headerlink" title="1.11 *不要定义无异议的查询*"></a><strong>1.11</strong> <em><strong>*不要定义无异议的查询*</strong></em></h4><p>不要写一些没有意义的查询，如需要生成一个空表结构：</p><p>select col1,col2 into #t from t where 1=0    </p><p>这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：    </p><p>create table #t(…)    </p><h4 id="1-12-exists"><a href="#1-12-exists" class="headerlink" title="1.12 *exists*"></a><strong>1.12</strong> <em><strong>*exists*</strong></em></h4><p>很多时候用 exists 代替 in 是一个好的选择：</p><p>select num from a where num in(select num from b)</p><p>用下面的语句替换：</p><p>select num from a where exists(select 1 from b where num=a.num)</p><h4 id="1-13-索引也可能失效"><a href="#1-13-索引也可能失效" class="headerlink" title="1.13 *索引也可能失效*"></a><strong>1.13</strong> <em><strong>*索引也可能失效*</strong></em></h4><p>并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</p><h4 id="1-14-表格字段类型选择"><a href="#1-14-表格字段类型选择" class="headerlink" title="1.14 *表格字段类型选择*"></a><strong>1.14</strong> <em><strong>*表格字段类型选择*</strong></em></h4><p>尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p><p>尽可能的使用 varchar 代替 char ，因为首先可变长度字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p><h4 id="1-15-查询语法中的字段"><a href="#1-15-查询语法中的字段" class="headerlink" title="1.15 *查询语法中的字段*"></a><strong>1.15</strong> <em><strong>*查询语法中的字段*</strong></em></h4><p>任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。</p><h4 id="1-16-索引无关优化"><a href="#1-16-索引无关优化" class="headerlink" title="1.16 *索引无关优化*"></a><strong>1.16</strong> <em><strong>*索引无关优化*</strong></em></h4><p>不使用*、尽量不使用union，union all等关键字、尽量不使用or关键字、尽量使用等值判断。</p><p>表连接建议不超过5个。如果超过5个，则考虑表格的设计。（互联网应用中）</p><p>表连接方式使用外联优于内联。</p><p>外连接有基础数据存在。如：A left join B,基础数据是A。  </p><p>A inner join B，没有基础数据的，先使用笛卡尔积完成全连接，在根据连接条件得到内连接结果集。</p><p>大数据量级的表格做分页查询时，如果页码数量过大，则使用子查询配合完成分页逻辑。</p><p>Select * from table limit 1000000, 10</p><p>Select * from table where id in (select pk from table limit 100000, 10)</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中的索引优化</title>
      <link href="/2021/063013.html"/>
      <url>/2021/063013.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-MySQL中的索引优化"><a href="#1-MySQL中的索引优化" class="headerlink" title="1 *MySQL中的索引优化*"></a><strong>1</strong> <em><strong>*MySQL中的索引优化*</strong></em></h3><p>上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点。虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE次数大于查询次数时，放弃索引。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。建立索引会占用磁盘空间的索引文件。一般情况这个问题不太严重，但如果你在一个大表上创建了多种组合索引，索引文件的会膨胀很快。索引只是提高效率的一个因素，如果你的MySQL有大数据量的表，就需要花时间研究建立最优秀的索引，或优化查询语句。</p><h4 id="1-1-索引不会包含有NULL值的列"><a href="#1-1-索引不会包含有NULL值的列" class="headerlink" title="1.1 *索引不会包含有NULL值的列*"></a><strong>1.1</strong> <em><strong>*索引不会包含有NULL值的列*</strong></em></h4><p>只要列中包含有NULL值都将不会被包含在索引中，组合索引中只要有一列含有NULL值，那么这一列对于此组合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为NULL。create table table_name(c1 varchar(32) default ‘0’)</p><h4 id="1-2-使用短索引"><a href="#1-2-使用短索引" class="headerlink" title="1.2 *使用短索引*"></a><strong>1.2</strong> <em><strong>*使用短索引*</strong></em></h4><p>对串列进行索引，如果可能应该指定一个前缀长度。例如，如果有一个CHAR(255)的列，如果在前10个或20个字符内，多数值是惟一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。</p><p>CREATE INDEX index_name ON table_name (column(****<em>length*</em>***))</p><h4 id="1-3-索引列排序"><a href="#1-3-索引列排序" class="headerlink" title="1.3 *索引列排序*"></a><strong>1.3</strong> <em><strong>*索引列排序*</strong></em></h4><p>MySQL查询只使用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引。</p><h4 id="1-4-like语句操作"><a href="#1-4-like语句操作" class="headerlink" title="1.4 *like语句操作*"></a><strong>1.4</strong> <em><strong>*like语句操作*</strong></em></h4><p>一般情况下不鼓励使用like操作，如果非使用不可，如何使用也是一个问题。like “%aaa%” 不会使用索引，而like “aaa%”可以使用索引。</p><h4 id="1-5-不要在列上进行运算"><a href="#1-5-不要在列上进行运算" class="headerlink" title="1.5 *不要在列上进行运算*"></a><strong>1.5</strong> <em><strong>*不要在列上进行运算*</strong></em></h4><p>例如：select * from users where YEAR(adddate)&lt;2007，将在每个行上进行运算，这将导致索引失效而进行全表扫描，因此我们可以改成：select * from users where adddate&lt;’2007-01-01′</p><h3 id="2-索引总结"><a href="#2-索引总结" class="headerlink" title="2 *索引总结*"></a><strong>2</strong> <em><strong>*索引总结*</strong></em></h3><p>最后总结一下，MySQL只对以下操作符才使用索引：&lt;,&lt;=,=,&gt;,&gt;=,between,in,以及某些时候的like(不以通配符%或_开头的情形)。而理论上每张表里面最多可创建16个索引，不过除非是数据量真的很多，否则过多的使用索引也不是那么好玩的。</p><p>建议：一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中的索引管理</title>
      <link href="/2021/063011.html"/>
      <url>/2021/063011.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-MySQL中的索引管理"><a href="#1-MySQL中的索引管理" class="headerlink" title="1 *MySQL中的索引管理*"></a><strong>1</strong> <em><strong>*MySQL中的索引管理*</strong></em></h3><p>在MySQL中，对索引的查看和删除操作是所有索引类型通用的。</p><h4 id="1-1-普通索引"><a href="#1-1-普通索引" class="headerlink" title="1.1 *普通索引*"></a><strong>1.1</strong> <em><strong>*普通索引*</strong></em></h4><p>这是最基本的索引，它没有任何限制MyIASM中默认的BTREE类型的索引，也是我们大多数情况下用到的索引。</p><h5 id="1-1-1-创建索引"><a href="#1-1-1-创建索引" class="headerlink" title="1.1.1 *创建索引*"></a><strong>1.1.1</strong> <em><strong>*创建索引*</strong></em></h5><p>CREATE INDEX index_name ON table_name (column(length))</p><p>ALTER TABLE table_name ADD INDEX index_name (column(length))</p><p>CREATE TABLE table_name (id int not null auto_increment,title varchar(30) ,PRIMARY KEY(id) , INDEX  index_name (title(5)))</p><h5 id="1-1-2-查看索引"><a href="#1-1-2-查看索引" class="headerlink" title="1.1.2 *查看索引*"></a><strong>1.1.2</strong> <em><strong>*查看索引*</strong></em></h5><p>SHOW  INDEX  FROM  [table_name]</p><p>SHOW  KEYS  FROM  [table_name]  # 只在MySQL中可以使用keys关键字。</p><h5 id="1-1-3-删除索引"><a href="#1-1-3-删除索引" class="headerlink" title="1.1.3 *删除索引*"></a><strong>1.1.3</strong> <em><strong>*删除索引*</strong></em></h5><p>DROP INDEX  index_name  ON talbe_name</p><p>ALTER TABLE table_name  DROP INDEX  index_name</p><p>ALTER TABLE table_name DROP PRIMARY KEY</p><h4 id="1-2-唯一索引"><a href="#1-2-唯一索引" class="headerlink" title="1.2 *唯一索引*"></a><strong>1.2</strong> <em><strong>*唯一索引*</strong></em></h4><p>与普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值（注意和主键不同）。如果是组合索引，则列值的组合必须唯一，创建方法和普通索引类似</p><h5 id="1-2-1-创建索引"><a href="#1-2-1-创建索引" class="headerlink" title="1.2.1 *创建索引*"></a><strong>1.2.1</strong> <em><strong>*创建索引*</strong></em></h5><p>CREATE UNIQUE INDEX index_name  ON table_name (column(length))</p><p>ALTER TABLE table_name ADD UNIQUE index_name (column(length))</p><p>CREATE TABLE table_name (id int not null auto_increment,title varchar(30) ,PRIMARY KEY(id) , UNIQUE index_name (title(length)))</p><h4 id="1-3-全文索引（FULLTEXT）"><a href="#1-3-全文索引（FULLTEXT）" class="headerlink" title="1.3 *全文索引（FULLTEXT）*"></a><strong>1.3</strong> <em><strong>*全文索引（FULLTEXT）*</strong></em></h4><p>MySQL从3.23.23版开始支持全文索引和全文检索，**<em>*<em>FULLTEXT索引仅可用于 MyISAM 表*</em>*<strong>；他们可以从</strong></em>*<em>CHAR、VARCHAR或TEXT列*</em>***中作为CREATE TABLE语句的一部分被创建，或是随后使用ALTER TABLE 或CREATE INDEX被添加。</p><p>对于较大的数据集，将你的资料输入一个没有FULLTEXT索引的表中，然后创建索引，其速度比把资料输入现有FULLTEXT索引的速度更为快。不过切记对于大容量的数据表，生成全文索引是一个非常消耗时间非常消耗硬盘空间的做法。</p><h5 id="1-3-1-创建索引"><a href="#1-3-1-创建索引" class="headerlink" title="1.3.1 *创建索引*"></a><strong>1.3.1</strong> <em><strong>*创建索引*</strong></em></h5><p>CREATE FULLTEXT INDEX index_name ON table_name(column(length))</p><p>ALTER TABLE table_name ADD FULLTEXT index_name( column)</p><p>CREATE TABLE table_name (id int not null auto_increment,title varchar(30) ,PRIMARY KEY(id) , FULLTEXT  index_name (title))</p><h4 id="1-4-组合索引（-最左前缀-）"><a href="#1-4-组合索引（-最左前缀-）" class="headerlink" title="1.4 *组合索引（**最左前缀**）*"></a><strong>1.4</strong> <em><strong>*组合索引（*</strong></em><em><strong>*最左前缀*</strong></em><em><strong>*）*</strong></em></h4><p>CREATE TABLE article(id int not null, title varchar(255), time date);</p><p>平时用的SQL查询语句一般都有比较多的限制条件，所以为了进一步榨取MySQL的效率，就要考虑建立组合索引。例如上表中针对title和time建立一个组合索引：ALTER TABLE article ADD INDEX index_title_time (title(50),time(10))。建立这样的组合索引，其实是相当于分别建立了下面两组组合索引：</p><p>–title,time</p><p>–title</p><p>为什么没有time这样的组合索引呢？这是因为MySQL组合索引“最左前缀”的结果。简单的理解就是只从最左面的开始组合。并不是只要包含这两列的查询都会用到该组合索引，如下面的几个SQL所示：</p><p>1，使用到上面的索引</p><p>SELECT * FROM article  WHERE title=’测试’ AND time=1234567890;</p><p>SELECT * FROM article WHERE  title=’测试’;</p><p>2，不使用上面的索引</p><p>SELECT * FROM article WHERE time=1234567890;</p><p>参考：<a href="https://segmentfault.com/a/1190000008131735#articleHeader5">https://segmentfault.com/a/1190000008131735#articleHeader5</a></p><h5 id="1-4-1-创建索引"><a href="#1-4-1-创建索引" class="headerlink" title="1.4.1 *创建索引*"></a><strong>1.4.1</strong> <em><strong>*创建索引*</strong></em></h5><p>CREATE INDEX index_name ON table_name (column_list)</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stark组件</title>
      <link href="/2021/06309.html"/>
      <url>/2021/06309.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-介绍："><a href="#1-介绍：" class="headerlink" title="1.介绍："></a>1.介绍：</h4><p>​    快速完成对N张表增删改查+自定义复杂操作</p><h4 id="2-单例模式"><a href="#2-单例模式" class="headerlink" title="2.单例模式"></a>2.单例模式</h4><p>​    类实例化单个对象</p><pre class=" language-python"><code class="language-python">zhangsen<span class="token punctuation">.</span>py    <span class="token keyword">class</span> <span class="token class-name">AdminSite</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    obj1 <span class="token operator">=</span> AdminSite<span class="token punctuation">(</span><span class="token punctuation">)</span>调用：<span class="token keyword">import</span> zhangsen<span class="token comment" spellcheck="true">#调用多次，只加载一次</span>zhangsen<span class="token punctuation">.</span>object1zhangsen<span class="token punctuation">.</span>object1</code></pre><h4 id="3-启动后、路由加载之前定制一段代码（admin原理）"><a href="#3-启动后、路由加载之前定制一段代码（admin原理）" class="headerlink" title="3.启动后、路由加载之前定制一段代码（admin原理）"></a>3.启动后、路由加载之前定制一段代码（admin原理）</h4><ol><li><p>创建一个app组件</p></li><li><p>在app.py编写ready方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>apps <span class="token keyword">import</span> AppConfig<span class="token keyword">class</span> <span class="token class-name">StarkConfig</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'stark'</span>        <span class="token keyword">def</span> <span class="token function">ready</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>               <span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>module_loading <span class="token keyword">import</span> autodiscover_modules        autodiscover_modules<span class="token punctuation">(</span><span class="token string">'stark'</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#注意：注册路由必须按照django1的注册规范</span><span class="token string">'stark.apps.StarkConfig'</span></code></pre><p>程序启动后，会先去每个app中找stark.py文件并加载。</p></li><li><p>那个app要使用stark组件，只需要创建stark.py</p></li><li><p>写在stark.py里面的内容 程序启动时便会先自动加载 </p></li></ol><p>stark组件执行流程</p><p><img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210518084102125.png" alt="image-20210518084102125"></p><h4 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h4><p>浪费内存，速度慢</p><p><img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210518155144412.png" alt="image-20210518155144412"></p><h5 id="使用yield，提升效率。，循环一次，yield拿一次数据"><a href="#使用yield，提升效率。，循环一次，yield拿一次数据" class="headerlink" title="使用yield，提升效率。，循环一次，yield拿一次数据"></a>使用yield，提升效率。，循环一次，yield拿一次数据</h5><p><img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210518155041685.png" alt="image-20210518155041685"></p><h4 id="基本增删改查功能"><a href="#基本增删改查功能" class="headerlink" title="基本增删改查功能"></a>基本增删改查功能</h4><p>N张表，添加时只需要在相应app下的stark文件添加 <code>site.register(表名,自定制类)</code></p><ul><li><p>可定制：</p><ul><li><p>1，排序规则</p><ul><li><p>第一种方法</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RoleConfig</span><span class="token punctuation">(</span>StarkConfig<span class="token punctuation">)</span><span class="token punctuation">:</span>    order_by <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span>    list_display <span class="token operator">=</span> <span class="token punctuation">[</span>StarkConfig<span class="token punctuation">.</span>display_checkbox<span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">,</span>StarkConfig<span class="token punctuation">.</span>display_edit_del<span class="token punctuation">]</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Role<span class="token punctuation">,</span>RoleConfig<span class="token punctuation">)</span></code></pre></li><li><p>第二种(更灵活)</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RoleConfig</span><span class="token punctuation">(</span>StarkConfig<span class="token punctuation">)</span><span class="token punctuation">:</span>    list_display <span class="token operator">=</span> <span class="token punctuation">[</span>StarkConfig<span class="token punctuation">.</span>display_checkbox<span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">,</span>StarkConfig<span class="token punctuation">.</span>display_edit_del<span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">get_order_by</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'[-id'</span><span class="token punctuation">]</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Role<span class="token punctuation">,</span>RoleConfig<span class="token punctuation">)</span></code></pre></li></ul></li><li><p>2.显示列</p><ul><li><p>第一种</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RoleConfig</span><span class="token punctuation">(</span>StarkConfig<span class="token punctuation">)</span><span class="token punctuation">:</span>    list_display <span class="token operator">=</span> <span class="token punctuation">[</span>StarkConfig<span class="token punctuation">.</span>display_checkbox<span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">,</span>StarkConfig<span class="token punctuation">.</span>display_edit_del<span class="token punctuation">]</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Role<span class="token punctuation">,</span>RoleConfig<span class="token punctuation">)</span></code></pre></li><li><p>第二种(更灵活)</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RoleConfig</span><span class="token punctuation">(</span>StarkConfig<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get_list_display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>StarkConfig<span class="token punctuation">.</span>display_checkbox<span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">,</span>StarkConfig<span class="token punctuation">.</span>display_edit_del<span class="token punctuation">]</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Role<span class="token punctuation">,</span>RoleConfig<span class="token punctuation">)</span></code></pre></li></ul></li><li><p>3.显示添加按钮</p><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RoleConfig</span><span class="token punctuation">(</span>StarkConfig<span class="token punctuation">)</span><span class="token punctuation">:</span>    list_display <span class="token operator">=</span> <span class="token punctuation">[</span>StarkConfig<span class="token punctuation">.</span>display_checkbox<span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">,</span>StarkConfig<span class="token punctuation">.</span>display_edit_del<span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">get_add_btn</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#显示</span>            <span class="token keyword">return</span> mark_safe<span class="token punctuation">(</span><span class="token string">'&lt;a href="%s" class= "btn btn-success">添加&lt;/a>'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>reverse_add_url<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#不显示</span>            <span class="token keyword">return</span> Nonesite<span class="token punctuation">.</span>register<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Role<span class="token punctuation">,</span>RoleConfig<span class="token punctuation">)</span></code></pre></li></ul></li><li><p>4.定制ModelForm</p><ul><li><p>第一种</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DepartModelForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>ModelForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> models<span class="token punctuation">.</span>Depart        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>    <span class="token keyword">def</span> <span class="token function">clean_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>cleaned_data<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">DepConfig</span><span class="token punctuation">(</span>StarkConfig<span class="token punctuation">)</span><span class="token punctuation">:</span>    list_display <span class="token operator">=</span> <span class="token punctuation">[</span>StarkConfig<span class="token punctuation">.</span>display_checkbox <span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">,</span>StarkConfig<span class="token punctuation">.</span>display_edit_del<span class="token punctuation">]</span>    model_form_class <span class="token operator">=</span> DepartModelForm</code></pre></li><li><p>第二种</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DepartModelForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>ModelForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> models<span class="token punctuation">.</span>Depart        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>    <span class="token keyword">def</span> <span class="token function">clean_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>cleaned_data<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">DepConfig</span><span class="token punctuation">(</span>StarkConfig<span class="token punctuation">)</span><span class="token punctuation">:</span>    list_display <span class="token operator">=</span> <span class="token punctuation">[</span>StarkConfig<span class="token punctuation">.</span>display_checkbox <span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">,</span>StarkConfig<span class="token punctuation">.</span>display_edit_del<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">get_model_form_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> DepartModelForm</code></pre></li></ul></li><li><p>5.自定义列表（其他）页面</p><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RoleConfig</span><span class="token punctuation">(</span>StarkConfig<span class="token punctuation">)</span><span class="token punctuation">:</span>    order_by <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span>    list_display <span class="token operator">=</span> <span class="token punctuation">[</span>StarkConfig<span class="token punctuation">.</span>display_checkbox<span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">,</span>StarkConfig<span class="token punctuation">.</span>display_edit_del<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">changelist_view</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'自定制列表'</span><span class="token punctuation">)</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Role<span class="token punctuation">,</span>RoleConfig<span class="token punctuation">)</span></code></pre></li></ul></li><li><p>6.增加URL</p><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RoleConfig</span><span class="token punctuation">(</span>StarkConfig<span class="token punctuation">)</span><span class="token punctuation">:</span>    order_by <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span>    list_display <span class="token operator">=</span> <span class="token punctuation">[</span>StarkConfig<span class="token punctuation">.</span>display_checkbox<span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">,</span>StarkConfig<span class="token punctuation">.</span>display_edit_del<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">extra_url</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">[</span>            path<span class="token punctuation">(</span><span class="token string">'xxx/'</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>xxx<span class="token punctuation">)</span>        <span class="token punctuation">]</span>        <span class="token keyword">return</span> data    <span class="token keyword">def</span> <span class="token function">xxx</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'....'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'xxxx'</span><span class="token punctuation">)</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Role<span class="token punctuation">,</span>RoleConfig<span class="token punctuation">)</span></code></pre></li><li></li></ul></li></ul></li></ul><h4 id="Day13"><a href="#Day13" class="headerlink" title="Day13"></a>Day13</h4><ul><li><p>​    批量操作</p><ul><li><p>反射</p></li><li><p><code>__name__</code> 获取函数名</p></li><li><p>以切皆对象</p></li><li><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">multi_delete</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        pk_list <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>getlist<span class="token punctuation">(</span><span class="token string">'pk'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>model_class<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>pk__in<span class="token operator">=</span>pk_list<span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># return HttpResponse('删除成功')</span>    multi_delete<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'批量删除'</span></code></pre></li></ul></li><li><p>搜索</p><ul><li>Q</li><li>__contains</li></ul></li><li><p>保留搜索原条件</p><ul><li>QueryDict，request.GET/request.POST</li><li>urlencode()</li><li>_mutable = True</li><li>深拷贝</li><li>urllib.parse.urlencode</li></ul></li><li><p>f分页</p><ul><li>保留原条件</li><li>分页组件</li></ul></li><li><p>拆分</p><ul><li>ChangeList类封装</li><li>inclusion_tag</li><li>生成器（yield）</li></ul></li></ul><h4 id="内容回顾"><a href="#内容回顾" class="headerlink" title="内容回顾"></a>内容回顾</h4><ul><li><p>1.三个类</p><ul><li>ChangeList ：由于列表页面视图函数拥到变量太多，所以把一些变量封装到这里面</li><li>StarkConfig ：生成最终URL和视图对应关系 +默认配置</li><li>AdminSite ：路由分发，保存数据库类和处理该数据类的对象的对应关系<ul><li>​                _regirstry = {]</li></ul></li></ul></li><li><p>2.知识点</p><ul><li><p>inclusion_tag</p></li><li><p>urlencode</p></li><li><p>_meta.model_name</p></li><li><p>_meta.model_label</p></li><li><p>深浅拷贝</p></li><li><p>QueryDict对象不可改 _mutable=True才可改</p></li><li><p>生成器</p></li><li><p>路由分发</p><ul><li>include</li><li>（[],None,None）</li></ul></li><li><p>函数和方法的区别</p></li><li><p>Q对象 ：模糊查询，搜索 作用：构造复杂的查询条件</p><ul><li><pre class=" language-python"><code class="language-python">model<span class="token punctuation">.</span>User<span class="token punctuation">.</span>object<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>name__contains<span class="token operator">=</span><span class="token string">'李'</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>User<span class="token punctuation">.</span>object<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>name__contains<span class="token operator">=</span><span class="token string">'李'</span><span class="token punctuation">,</span>email__contains<span class="token operator">=</span><span class="token string">'李'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#不符合搜索条件 构成 and </span></code></pre></li><li><pre class=" language-python"><code class="language-python">使用Q构造<span class="token comment" spellcheck="true">#####构造查询多个字段共有“李”字的数据########</span>c1<span class="token operator">=</span>Q<span class="token punctuation">(</span><span class="token punctuation">)</span>c1<span class="token punctuation">.</span>connector <span class="token operator">=</span> <span class="token string">"OR"</span>c1<span class="token punctuation">.</span>children<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'name__contains'</span><span class="token punctuation">,</span><span class="token string">'李'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c1<span class="token punctuation">.</span>children<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'email__contains'</span><span class="token punctuation">,</span><span class="token string">'李'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>User<span class="token punctuation">.</span>object<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>c1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#####构造查询id>2和age&lt;=5的数据########</span>c2<span class="token operator">=</span>Q<span class="token punctuation">(</span><span class="token punctuation">)</span>c2<span class="token punctuation">.</span>connector <span class="token operator">=</span> <span class="token string">"ADN"</span>c2<span class="token punctuation">.</span>children<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'id__gt'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c2<span class="token punctuation">.</span>children<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'age__lte'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>User<span class="token punctuation">.</span>object<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>c2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#####构造查询 多个字段共有“李”字的数据 和  id>2和age&lt;=5的数据########</span>c1<span class="token operator">=</span>Q<span class="token punctuation">(</span><span class="token punctuation">)</span>c1<span class="token punctuation">.</span>connector <span class="token operator">=</span> <span class="token string">"OR"</span>c1<span class="token punctuation">.</span>children<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'name__contains'</span><span class="token punctuation">,</span><span class="token string">'李'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c1<span class="token punctuation">.</span>children<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'email__contains'</span><span class="token punctuation">,</span><span class="token string">'李'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c2<span class="token operator">=</span>Q<span class="token punctuation">(</span><span class="token punctuation">)</span>c2<span class="token punctuation">.</span>connector <span class="token operator">=</span> <span class="token string">"ADN"</span>c2<span class="token punctuation">.</span>children<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'id__gt'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c2<span class="token punctuation">.</span>children<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'age__lte'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c3<span class="token operator">=</span>Q<span class="token punctuation">(</span><span class="token punctuation">)</span>c3<span class="token punctuation">.</span>connector <span class="token operator">=</span> <span class="token string">"ADN"</span>c3<span class="token punctuation">.</span>add<span class="token punctuation">(</span>c1<span class="token punctuation">,</span><span class="token string">"ADN"</span><span class="token punctuation">)</span>c3<span class="token punctuation">.</span>add<span class="token punctuation">(</span>c2<span class="token punctuation">,</span><span class="token string">"ADN"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#(name='李' or email='李') and (id>2 and age&lt;=5)</span>model<span class="token punctuation">.</span>User<span class="token punctuation">.</span>object<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>c3<span class="token punctuation">)</span> </code></pre></li></ul></li><li><p>反射</p><ul><li><pre class=" language-python"><code class="language-python">list_display    row<span class="token punctuation">.</span>name    getattr<span class="token punctuation">(</span>row<span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">)</span>action<span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre></li></ul></li><li><p>继承</p><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RoleConfig</span><span class="token punctuation">(</span>StarkConfig<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre></li></ul></li><li><p>反向生成url</p><ul><li><pre class=" language-python"><code class="language-python">reverse<span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">)</span>reverse<span class="token punctuation">(</span><span class="token string">'namespace:xxx'</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p>分页（保留搜索条件）</p></li><li><p>ModelForm组件</p></li><li><p>functools.wraps,用于保留原函数的元信息（函数名/函数注释等信息）</p></li><li><p>钩子预留函数（预留可扩展位置）</p></li><li><p>request.GET</p><ul><li> request.GET.get(‘x’)</li><li>request.GET[‘x’]</li><li>request.GET.copy</li><li>request.GET.urlencode（）</li><li>request.GET._mutable = True</li><li>request.GET.getlist(‘xxx’)</li></ul></li><li><p>mark_safe</p><ul><li>xss攻击</li></ul></li><li><p>单例模式</p><ul><li>如果想要做某一件事或者操作某一个数据或者一堆数据用单列</li></ul></li><li><p>获取函数名</p><ul><li><code>__name__</code></li></ul></li><li><p>autodiscover_module  当程序启动起来，去每个app模块下找模块</p></li><li><p>装饰器</p></li></ul></li><li><p>QueryDict对象</p></li><li><p>可迭代对象</p></li><li><p><img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210524092743249.png" alt="image-20210524092743249"> </p></li><li><p>封装</p><ul><li><img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210524094403140.png" alt="image-20210524094403140"></li><li>新封装</li><li><img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210524094326800.png" alt="image-20210524094326800"></li></ul></li><li><p>获取Fk、M2M、o2o、对应的表的所有数据（以Fk举例，其他都是一样的方法）</p><ul><li><p>表关系</p></li><li><p><img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210524095121988.png" alt="image-20210524095121988"></p></li><li><p>函数</p></li><li><p><img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210524095224919.png" alt="image-20210524095224919"></p><ul><li>注意：django版本2.0之前使用 <code>rel</code>  2.0之后使用<code>remote_field</code></li></ul></li></ul></li><li><h4 id="组合搜索"><a href="#组合搜索" class="headerlink" title="组合搜索"></a>组合搜索</h4><p>- </p></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rbac组件</title>
      <link href="/2021/06308.html"/>
      <url>/2021/06308.html</url>
      
        <content type="html"><![CDATA[<h4 id="权限表设计："><a href="#权限表设计：" class="headerlink" title="权限表设计："></a>权限表设计：</h4><ul><li><p>基于角色的权限控制</p><ul><li><p>用户表</p></li><li><table><thead><tr><th align="center">id</th><th align="center">name</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td></tr></tbody></table></li><li><p>角色表</p></li><li><table><thead><tr><th align="center">id</th><th align="center">title</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td></tr></tbody></table></li><li><p>用户角色关系表</p></li><li><table><thead><tr><th align="center">id</th><th align="center">name_id</th><th align="center">title_id</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table></li><li><p>权限表</p></li><li><table><thead><tr><th align="center">id</th><th align="center">url</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td></tr></tbody></table></li><li><p>角色权限关系表</p></li><li><table><thead><tr><th>id</th><th>title_id</th><th>url_id</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table></li></ul></li></ul><h4 id="使用自定义rbac权限组件"><a href="#使用自定义rbac权限组件" class="headerlink" title="使用自定义rbac权限组件"></a>使用自定义rbac权限组件</h4><ol><li><p>拷贝rbac组件</p></li><li><p>清空migration目录</p></li><li><p>在setting注册rbac</p><pre class=" language-python"><code class="language-python"><span class="token string">'rbac'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#django 2.0以上</span></code></pre></li><li><p>数据库迁移录入信息</p></li><li><p>创建超级管理，添加权限信息(组件admin.py已经定制化)</p></li><li><p>用户登录后做权限和菜单的初始化  <code>init_permission</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> web <span class="token keyword">import</span> models<span class="token keyword">from</span> rbac <span class="token keyword">import</span> models<span class="token comment" spellcheck="true">#调用自定义权限和菜单组件</span><span class="token keyword">from</span> rbac<span class="token punctuation">.</span>service<span class="token punctuation">.</span>init_permission <span class="token keyword">import</span> init_permission<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    登录代码，成功后调用init_permission传入request、登录用户信息(obj)    '''</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>       <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'login.html'</span><span class="token punctuation">)</span>    name<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>    pwd<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pwd'</span><span class="token punctuation">)</span>    obj <span class="token operator">=</span> models<span class="token punctuation">.</span>UserInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>name<span class="token operator">=</span>name<span class="token punctuation">,</span>password<span class="token operator">=</span>pwd<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> obj<span class="token punctuation">:</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'login.html'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'msg'</span><span class="token punctuation">:</span><span class="token string">'用户名密码错误'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    request<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'user_info'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span>obj<span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">:</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">}</span>        init_permission<span class="token punctuation">(</span>request<span class="token punctuation">,</span>obj<span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/customer/list/'</span><span class="token punctuation">)</span></code></pre></li><li><p>应用中间件，进行权限校验</p><pre class=" language-python"><code class="language-python"><span class="token string">'rbac.middleware.rbac.RbacMiddleware'</span></code></pre></li><li><p>设置setting配置文件</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#############权限相关#######################</span>PERMISSION_SESSION_KEY <span class="token operator">=</span> <span class="token string">'permissions_list'</span>MENU_SESSION_KEY <span class="token operator">=</span> <span class="token string">'menu_list'</span><span class="token comment" spellcheck="true">#白名单</span>VALID_URL <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'^/login/$'</span><span class="token punctuation">,</span>    <span class="token string">'^/admin/.*'</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre></li><li><p>显示动态菜单（引入静态文件）、在菜单栏  <code>+{% menu  request %}</code>、最上方导入<code>{% load rbac %}</code></p></li><li><p>粒度控制到按钮</p><ol><li><pre class=" language-python"><code class="language-python"> <span class="token comment" spellcheck="true">#加在需要控制的按钮上</span>    <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> request<span class="token operator">|</span>has_permission<span class="token punctuation">:</span><span class="token string">'add'</span> <span class="token operator">%</span><span class="token punctuation">}</span>               <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"{% url 'add' %}"</span><span class="token operator">></span>增加<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>           <span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span></code></pre></li><li></li></ol></li></ol><h4 id="阶段问题"><a href="#阶段问题" class="headerlink" title="阶段问题"></a>阶段问题</h4><ul><li>权限几张表？5张 (用户，角色，权限，用户角色，权限角色)</li><li>简述权限流程<ul><li>粒度控制到了按钮级别的权限控制</li><li>用户登录成功，获取权限信息，存入session，</li><li>每次请求在中间件中做权限校验，中间件中获取用户请求的url，以及当前用户所拥有的所有权限，然后进行比较，</li><li>使用inclusion_tag实现动态菜单</li></ul></li><li>为什么要把权限存入session</li><li>静态文件和模块文件</li><li>相关技术点<ul><li>orm查询  –去空，–去重</li><li>中间件 （用户登录白名单，权限验证）</li><li>inclusion_tag（自定义页面的一块内容，用的时候只需要调用）</li></ul></li><li></li></ul><p><img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210512115130404.png" alt="image-20210512115130404"></p><h4 id="阶段问题总结（面试常问）"><a href="#阶段问题总结（面试常问）" class="headerlink" title="阶段问题总结（面试常问）"></a>阶段问题总结（面试常问）</h4><ol><li>简述权限流程有<ul><li>粒度控制到了按钮级别的权限控制</li><li>用户登录成功，获取权限信息，存入session，</li><li>每次请求，在中间件中做权限校验，</li><li>使用inclusion_tag实现动态菜单</li></ul></li><li>如何实现控制到按钮的<ul><li>用户登录时，用户所拥有的权限，别名==django路由的name构造成了一个字典；（字典快）</li><li>在页面中写了一个django模板的filter来进行判断是否显示</li></ul></li><li>为什么要使用中间件<ul><li>所有请求在达到视图函数之前，必须经过中间件，所有在中间件中对请求做处理比较简单</li></ul></li><li>模板中的特殊方法：inclusion_tag、simpletag、filter</li><li>权限中使用了几张表<ul><li>六张  用户、角色、用户角色、权限、角色权限、菜单</li></ul></li><li>表中的字段（背表）</li><li>写流程（思维导图）</li></ol><p>特殊字典的构造</p><ul><li><pre class=" language-python"><code class="language-python">权限 <span class="token operator">=</span> <span class="token punctuation">{</span>    权限别名：    <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">"title"</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'url'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'pid'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">"title"</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'url'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'pid'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">"title"</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'url'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'pid'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre></li><li><pre class=" language-python"><code class="language-python">    菜单 <span class="token operator">=</span> <span class="token punctuation">{</span>        菜单ID：<span class="token punctuation">{</span>            title<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>            icon<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>            children<span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuejs组件</title>
      <link href="/2021/06307.html"/>
      <url>/2021/06307.html</url>
      
        <content type="html"><![CDATA[<h5 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h5><ul><li><p>操作流程：</p><ul><li><p>1.组件定义</p></li><li><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment" spellcheck="true">// 1.定义全局组件</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>        <span class="token string">'global_component'</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token string">'&lt;h1>臭宝儿&lt;/h1>'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">)</span>    <span class="token keyword">const</span> one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#one'</span><span class="token punctuation">,</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p>2,组件使用</p></li><li><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"one"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">1</span><span class="token punctuation">.</span>使用组件 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>global_component<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>global_component<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre></li></ul></li></ul><h5 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h5><ul><li><p>操作流程</p><ul><li><p>1.组件定义</p></li><li><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token operator">//</span> <span class="token number">1</span><span class="token punctuation">.</span>定义局部组件    var part_component<span class="token operator">=</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token string">'&lt;h1>臭宝儿&lt;/h1>'</span>        <span class="token punctuation">}</span>        const one <span class="token operator">=</span> new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#one'</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span><span class="token punctuation">{</span>            haha<span class="token punctuation">:</span>part_component<span class="token punctuation">,</span>            hehe<span class="token punctuation">:</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token string">'&lt;h1>香宝儿&lt;/h1>'</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p>2,组件使用</p></li><li><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"one"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">.</span>使用组件 <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>    <span class="token operator">&lt;</span>haha<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>haha<span class="token operator">></span>    <span class="token operator">&lt;</span>hehe<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>hehe<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre></li></ul></li></ul><h4 id="全局局部嵌套"><a href="#全局局部嵌套" class="headerlink" title="全局局部嵌套"></a>全局局部嵌套</h4><ul><li><p>操作流程</p><ul><li><p>1.组件定义：</p></li><li><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment" spellcheck="true">//1.定义局部组件</span>    <span class="token keyword">var</span> part1 <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">'&lt;span>胥荣荣&lt;/span>'</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 1.定义全局组件</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>        <span class="token string">'global_component'</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token string">'&lt;div>臭宝儿,&lt;part1>&lt;/part1> &lt;/div>'</span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span><span class="token punctuation">{</span>part1<span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">)</span></code></pre></li></ul></li><li><p>2,组件使用:</p></li><li><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"one"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">1</span><span class="token punctuation">.</span>使用组件 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>global_component<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>global_component<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre></li><li></li></ul><h4 id="组件data"><a href="#组件data" class="headerlink" title="组件data"></a>组件data</h4><ul><li><p>操作流程：</p><ul><li><p>1.组件定义；</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment" spellcheck="true">// 1.定义全局组件</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>        <span class="token string">'global_component'</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token string">'&lt;h1>臭宝儿是{{name}}年龄{{are}}&lt;/h1>'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    name<span class="token punctuation">:</span><span class="token string">'胥荣荣'</span><span class="token punctuation">,</span>                    are<span class="token punctuation">:</span><span class="token string">'19'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">)</span>    <span class="token keyword">const</span> one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#one'</span><span class="token punctuation">,</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><ul><li><p>2,组件使用:</p></li><li><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"one"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">1</span><span class="token punctuation">.</span>使用组件 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>global_component<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>global_component<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vuejs组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视图额外动作</title>
      <link href="/2021/06305.html"/>
      <url>/2021/06305.html</url>
      
        <content type="html"><![CDATA[<h5 id="1-视图额外动作"><a href="#1-视图额外动作" class="headerlink" title="1.视图额外动作"></a>1.视图额外动作</h5><ul><li><p>目的：扩展视图集功能，添加额外动作</p></li><li><p>操作流程</p><ul><li><p>1，路由</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'book/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>BookModelViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'get'</span><span class="token punctuation">:</span> <span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'post'</span><span class="token punctuation">:</span> <span class="token string">'create'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'book/&lt;int:pk>'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>BookModelViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'get'</span><span class="token punctuation">:</span> <span class="token string">'retrieve'</span><span class="token punctuation">,</span> <span class="token string">'put'</span><span class="token punctuation">:</span> <span class="token string">'update'</span><span class="token punctuation">,</span> <span class="token string">'delete'</span><span class="token punctuation">:</span> <span class="token string">'destroy'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'book/bread'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>BookModelViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'get'</span><span class="token punctuation">:</span> <span class="token string">'bread_book'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre></li><li><p>2，视图</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>viewsets <span class="token keyword">import</span> ModelViewSet<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> <span class="token punctuation">.</span>serializers <span class="token keyword">import</span> BookInfoModelSerializer<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token comment" spellcheck="true">#视图集</span><span class="token keyword">class</span> <span class="token class-name">BookModelViewSet</span><span class="token punctuation">(</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> BookInfoModelSerializer    <span class="token comment" spellcheck="true">#获取阅读量大于20的</span>    <span class="token keyword">def</span> <span class="token function">bread_book</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#获取指定书籍</span>        books<span class="token operator">=</span>BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>bread__gt<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#创建序列化器对象</span>        serializer<span class="token operator">=</span>self<span class="token punctuation">.</span>serializer_class<span class="token punctuation">(</span>instance<span class="token operator">=</span>books<span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#返回数据</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span></code></pre></li><li><p>视图集额外动作，partial</p><ul><li><p>1，路由</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    path<span class="token punctuation">(</span><span class="token string">'book/update_book_bread/&lt;int:pk>'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>BookModelViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'put'</span><span class="token punctuation">:</span> <span class="token string">'update_book_bread'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre></li><li><p>视图</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BookModelViewSet</span><span class="token punctuation">(</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> BookInfoModelSerializer    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">update_book_bread</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        book <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#拿到一调数据</span>        data <span class="token operator">=</span> request<span class="token punctuation">.</span>data <span class="token comment" spellcheck="true">#获取页面数据 </span>        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>instance<span class="token operator">=</span>book<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>partial <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#partial同意修改单个</span>         serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#校验</span>        serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#保存</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">,</span>status<span class="token operator">=</span><span class="token number">201</span><span class="token punctuation">)</span> 返回</code></pre></li><li></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模型类序列化器</title>
      <link href="/2021/06304.html"/>
      <url>/2021/06304.html</url>
      
        <content type="html"><![CDATA[<h4 id="ModelSerializer"><a href="#ModelSerializer" class="headerlink" title="ModelSerializer"></a>ModelSerializer</h4><ul><li><p>目的：可以使用ModelSerializer根据模型类生成字段</p></li><li><p>作用：</p><ul><li><p>1.可以参考模型自动生成字段，还可以自己编写字段</p></li><li><p>提供了create方法和update方法</p></li><li><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">class</span> <span class="token class-name">BookModelSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    mobile <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span>min_length<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'手机号'</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> BookInfo  <span class="token comment" spellcheck="true"># 参考模型类生成字段</span>                  fields <span class="token operator">=</span> <span class="token string">'__all__'</span>  <span class="token comment" spellcheck="true">#生成所有字段</span>            fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'btitle'</span><span class="token punctuation">,</span> <span class="token string">'bpub_date'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#指明生成相应字段</span>                exclude <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#使用exclude可以明确排除掉     </span>                read_only_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'bread'</span><span class="token punctuation">,</span> <span class="token string">'bcomment'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#可以通过read_only_fields指明只读字段，即仅用于序列化输出的字段</span>                <span class="token comment" spellcheck="true">#给自动生成的字段添加属性（自动生成字段不满足需求时）</span>         extra_kwargs <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'bread'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'min_value'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'required'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">'bcomment'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'min_value'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'required'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>        </code></pre></li><li><p>视图代码：</p></li><li><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">''''======================模型类序列化器，测试序列化====================================='''</span><span class="token keyword">from</span> book<span class="token punctuation">.</span>models <span class="token keyword">import</span> BookInfo<span class="token keyword">from</span> book<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> BookModelSerializer<span class="token comment" spellcheck="true"># 序列化</span><span class="token comment" spellcheck="true"># １．获取模型类对象</span>book <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>book<span class="token punctuation">.</span>mobile <span class="token operator">=</span> <span class="token string">'17691394303'</span> <span class="token comment" spellcheck="true">#因为mobile 是在序列化器中自定义的字段，数据库没有，所以要用必须指定(或者在序列化器中指定mobile字典：write_only(只写，只进行反序列化))</span><span class="token comment" spellcheck="true"># ２．创建序列化器对象</span>serializer <span class="token operator">=</span> BookModelSerializer<span class="token punctuation">(</span>instance<span class="token operator">=</span>book<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3.输出</span><span class="token keyword">print</span><span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span></code></pre></li><li><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># ======================模型类序列化器，测试反序列化 create添加数据=====================================</span><span class="token keyword">from</span> book<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> BookModelSerializer<span class="token comment" spellcheck="true"># 1.准被数据</span>book_dict <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"btitle"</span><span class="token punctuation">:</span><span class="token string">"三国演义"</span><span class="token punctuation">,</span>    <span class="token string">"bpub_date"</span><span class="token punctuation">:</span><span class="token string">"2019-01-02"</span><span class="token punctuation">,</span>    <span class="token string">"bread"</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">,</span>    <span class="token string">"bcomment"</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># ２．创建序列化器对象</span>serializer <span class="token operator">=</span> BookModelSerializer<span class="token punctuation">(</span>data<span class="token operator">=</span>book_dict<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3.校验,入库</span>serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># ======================模型类序列化器，测试反序列化 update更新数据=====================================</span><span class="token keyword">from</span> book<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> BookModelSerializer<span class="token keyword">from</span> book<span class="token punctuation">.</span>models <span class="token keyword">import</span> BookInfo<span class="token comment" spellcheck="true"># 1.准被数据</span>book_dict <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"btitle"</span><span class="token punctuation">:</span><span class="token string">"红楼梦"</span><span class="token punctuation">,</span>    <span class="token string">"bpub_date"</span><span class="token punctuation">:</span><span class="token string">"2019-01-02"</span><span class="token punctuation">,</span>    <span class="token string">"bread"</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">,</span>    <span class="token string">"bcomment"</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 序列化</span><span class="token comment" spellcheck="true"># １．获取模型类对象</span>book <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ２．创建序列化器对象</span>serializer <span class="token operator">=</span> BookModelSerializer<span class="token punctuation">(</span>data<span class="token operator">=</span>book_dict<span class="token punctuation">,</span>instance<span class="token operator">=</span>book<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3.校验,入库</span>serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><img src="http://pic.ihcnb.cn/iHcnb/ec1f15f47acbd.png" alt="resizeApi.png"></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/06306.html"/>
      <url>/2021/06306.html</url>
      
        <content type="html"><![CDATA[<pre><code>在序列化器重写category（外键）#把 外键category的输出转换成汉字，多对一不需要加  many= true  可以获取到namecategory = serializers.StringRelatedField(read_only=True) 关联GoodsCategory</code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列化器</title>
      <link href="/2021/06303.html"/>
      <url>/2021/06303.html</url>
      
        <content type="html"><![CDATA[<h4 id="序列化器："><a href="#序列化器：" class="headerlink" title="序列化器："></a>序列化器：</h4><p>作用：<img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210416101325153.png" alt="image-20210416101325153"></p><h5 id="序列化："><a href="#序列化：" class="headerlink" title="序列化："></a>序列化：</h5><p>​    数据之间的相互转换，数据结构类型转换为其他格式（字典，JSON，XML等），将Django的模型类对象转换为JSON字符串</p><h5 id="反序列化："><a href="#反序列化：" class="headerlink" title="反序列化："></a>反序列化：</h5><p>​    反之，将其他格式转换为程序整的数据，例如将JSON字符串转换为Django中的模型类对象</p><h5 id="1-1定义："><a href="#1-1定义：" class="headerlink" title="1.1定义："></a>1.1定义：</h5><p>能够参考模型序列化器：</p><pre><code>"""定义序列化器１．定义类，继承自Serializer２．和模型类，字段，类型，选项一样    read_only=True　只读    label　字段说明"""</code></pre><p>代码(book/serializers.py)：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1.定义序列化器</span><span class="token keyword">class</span> <span class="token class-name">BookInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    id <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'id'</span><span class="token punctuation">,</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    btitle <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'名称'</span><span class="token punctuation">)</span>    bpub_date <span class="token operator">=</span> serializers<span class="token punctuation">.</span>DateField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'发布日期'</span><span class="token punctuation">)</span>    bread <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'阅读量'</span><span class="token punctuation">)</span>    bcomment <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'评论数'</span><span class="token punctuation">)</span>    is_delete <span class="token operator">=</span> serializers<span class="token punctuation">.</span>BooleanField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'逻辑删除'</span><span class="token punctuation">)</span></code></pre><p>代码(book/model.py)：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token comment" spellcheck="true">#定义图书模型类</span><span class="token keyword">class</span> <span class="token class-name">BookInfo</span><span class="token punctuation">(</span>models<span class="token punctuation">)</span><span class="token punctuation">:</span>    btitle <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">'名称'</span><span class="token punctuation">)</span>    bpub_date <span class="token operator">=</span> models<span class="token punctuation">.</span>DateField<span class="token punctuation">(</span>verbose_name<span class="token operator">=</span><span class="token string">'发布日期'</span><span class="token punctuation">)</span>    bread <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">'阅读量'</span><span class="token punctuation">)</span>    bcomment <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">'评论数'</span><span class="token punctuation">)</span>    is_delete <span class="token operator">=</span> models<span class="token punctuation">.</span>BooleanField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">'逻辑删除'</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">'tb_books'</span> <span class="token comment" spellcheck="true">#　知名数据库名称</span>        verbose_name <span class="token operator">=</span> <span class="token string">'图书'</span> <span class="token comment" spellcheck="true">#ａｄｍｉｎ站点中显示的名称</span>        verbose_name_plural <span class="token operator">=</span> verbose_name <span class="token comment" spellcheck="true">#显示的复数名称</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''定义每个数据对象的显示信息'''</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>btitle</code></pre><h5 id="1-2序列化器，序列化单个对象"><a href="#1-2序列化器，序列化单个对象" class="headerlink" title="1.2序列化器，序列化单个对象"></a>1.2序列化器，序列化单个对象</h5><p>​    操作流程(book/view.py)</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''===========1.序列化器，序列化单个书籍对象==========='''</span><span class="token keyword">from</span> <span class="token punctuation">.</span>serializers <span class="token keyword">import</span> BookInfoSerializer<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> BookInfo<span class="token comment" spellcheck="true">#1.获取书籍对象</span>book <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2.创建序列化器，instance，表示要序列化的对象</span>serializer <span class="token operator">=</span> BookInfoSerializer<span class="token punctuation">(</span>instance<span class="token operator">=</span>book<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3．转换数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''结果：{'id': 1, 'btitle': '西游记', 'bpub_date': '2021-04-21', 'bread': 30, 'bcomment': 39, 'is_delete': False}'''</span></code></pre><p>注意点：<br>    BookInfoSerializer(instance=book)</p><p>​        instance=book：表示将book序列化</p><p>​    serializer.data：获取序列化的结果</p><h5 id="序列化器，序列化列表"><a href="#序列化器，序列化列表" class="headerlink" title="序列化器，序列化列表"></a>序列化器，序列化列表</h5><p>​    操作流程(book/view.py)</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1.获取书籍对象</span>books <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2.创建序列化器，instance，表示要序列化的对象,many=True　表示序列化多个对象</span>serializer <span class="token operator">=</span> BookInfoSerializer<span class="token punctuation">(</span>instance<span class="token operator">=</span>books<span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3．转换数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''结果：[OrderedDict([('id', 1), ('btitle', '西游记'), ('bpub_date', '2021-04-21'), ('bread', 30), ('bcomment', 39), ('is_delete', False)]), OrderedDict([('id', 2), ('btitle', '水浒传'), ('bpub_date', '2021-04-08'), ('bread', 40), ('bcomment', 30), ('is_delete', False)])]'''</span></code></pre><h5 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h5><p>​    BookInfoSerializer(instance=book,many=True)</p><p>​        many=True：表示序列化多个对象</p><h5 id="英雄序列化器"><a href="#英雄序列化器" class="headerlink" title="英雄序列化器"></a>英雄序列化器</h5><p>​    操作流程(book/serializers.py):</p><p>定义英雄序列化器：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">HeroInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""英雄数据序列化器"""</span>    GENDER_CHOICES <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'male'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'female'</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    id <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'ID'</span><span class="token punctuation">,</span> read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    hname <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'名字'</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>    hgender <span class="token operator">=</span> serializers<span class="token punctuation">.</span>ChoiceField<span class="token punctuation">(</span>choices<span class="token operator">=</span>GENDER_CHOICES<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'性别'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    hcomment <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'描述信息'</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> allow_null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>定义关联字段：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">HeroInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">#1,添加外键,主键表示 必须提供`queryset` 选项, 或者设置 read_only=`True`.显示外键</span>    <span class="token comment" spellcheck="true"># hbook = serializers.PrimaryKeyRelatedField(queryset=BookInfo.objects.all())</span>    <span class="token comment" spellcheck="true"># hbook = serializers.PrimaryKeyRelatedField(read_only=True)</span>    <span class="token comment" spellcheck="true"># 结果：{'id': 1, 'hname': '吴承恩', 'hgender': 1, 'hcomment': '孙悟空', 'hbook': 1}</span>    <span class="token comment" spellcheck="true">#2,添加外键, 来自于关联模型类, __str__的返回值　外键名称</span>    <span class="token comment" spellcheck="true"># hbook = serializers.StringRelatedField(read_only=True)</span>    <span class="token comment" spellcheck="true"># 结果：{'id': 1, 'hname': '吴承恩', 'hgender': 1, 'hcomment': '孙悟空', 'hbook': '西游记'}</span>    <span class="token comment" spellcheck="true">#3,添加外键,关联另外一个序列化器　返回外键关联的所有信息</span>    hbook <span class="token operator">=</span> BookInfoSerializer<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 结果：{'id': 1, 'hname': '吴承恩', 'hgender': 1, 'hcomment': '孙悟空', 'hbook': OrderedDict([('id', 1), ('btitle', '西游记'), ('bpub_date', '2021-04-21'), ('bread', 30), ('bcomment', 39), ('is_delete', False)])}</span></code></pre><h5 id="书籍序列化器，关联many"><a href="#书籍序列化器，关联many" class="headerlink" title="书籍序列化器，关联many"></a>书籍序列化器，关联many</h5><p>​    目的：能够序列化书籍的时候，输出关联作者信息</p><p>​    操作流程（book/serializers.py）：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BookInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    id <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'id'</span><span class="token punctuation">,</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    btitle <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'名称'</span><span class="token punctuation">)</span>    bpub_date <span class="token operator">=</span> serializers<span class="token punctuation">.</span>DateField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'发布日期'</span><span class="token punctuation">)</span>    bread <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'阅读量'</span><span class="token punctuation">)</span>    bcomment <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'评论数'</span><span class="token punctuation">)</span>    is_delete <span class="token operator">=</span> serializers<span class="token punctuation">.</span>BooleanField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'逻辑删除'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#1.用书籍查作者：关联英雄主键，many=True,一方中，序列化多方需要加上　(获取ｉｄ)</span>    <span class="token comment" spellcheck="true"># heroinfo_set = serializers.PrimaryKeyRelatedField(read_only=True,many=True)</span>    <span class="token comment" spellcheck="true">#２．关联英雄,__str__返回值（获取ｎａｍｅ）</span>    heroinfo_set <span class="token operator">=</span> serializers<span class="token punctuation">.</span>StringRelatedField<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>​    注意：</p><p>​            many=True,一方中，序列化多方需要加上</p><p>==============================================</p><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><p>1.1数据类型验证</p><ul><li><p>目的：理解序列化器中的字段，对数据进行校验的过程</p></li><li><p>常见的字段类型：</p><ol><li><p>CharField：字段串</p></li><li><p>······</p></li></ol></li></ul><p>1.2反序列化选项验证</p><p><img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210419093003168.png" alt="image-20210419093003168"></p><p>判断max_length等等</p><ul><li>requred：默认是True，必须要传递，除非设置了 default | false | read_only</li><li>read_only： 只读，不进行反序列化</li></ul><p>1.3反序列化单个字段验证 ：</p><p>​    目的：定义单个字段校验</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BookInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                <span class="token comment" spellcheck="true"># 反序列化单个字段校验 validate多字段校验，加上字段名是单个字段校验</span>    <span class="token keyword">def</span> <span class="token function">validate_btitle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token comment" spellcheck="true"># 校验ｖａｌｕｅ的内容</span>         <span class="token keyword">if</span> <span class="token string">'金瓶'</span> <span class="token operator">not</span> <span class="token keyword">in</span> value<span class="token punctuation">:</span>             <span class="token keyword">raise</span>  serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string">'书籍不包含金瓶'</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> value</code></pre><ul><li>注意点：<ul><li>固定格式：<br>def validate_字段名称(self, value):<ul><li>pass</li></ul></li></ul></li></ul><p>1.4 反序列化，多个字段validate验证</p><ul><li><p>目的：</p></li><li><p>代码展示：</p></li><li><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#多字段校验</span>    <span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param attrs: 外界传过来的，book_dict        :return:         """</span>        <span class="token comment" spellcheck="true">#1．获取阅读量，评论量</span>        bread <span class="token operator">=</span> attrs<span class="token punctuation">[</span><span class="token string">'bread'</span><span class="token punctuation">]</span>        bcomment <span class="token operator">=</span> attrs<span class="token punctuation">[</span><span class="token string">'bcomment'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#2.判断</span>        <span class="token keyword">if</span> bcomment <span class="token operator">></span> bread<span class="token punctuation">:</span>            <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string">'评论量大于阅读量'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#返回：</span>        <span class="token keyword">return</span> attrs</code></pre></li><li><p>注意：</p><ul><li>校验不通过的时候一定要抛出异常</li></ul></li></ul><p>1.5反序列化，自定义验证方法</p><p>1.6 反序列化，create保存数据</p><ul><li><p>视图层：</p><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> book<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> BookInfoSerializer<span class="token comment" spellcheck="true"># 1.准备数据</span>book_dict <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"btitle"</span><span class="token punctuation">:</span><span class="token string">"金瓶x-插画版"</span><span class="token punctuation">,</span>    <span class="token string">"bpub_date"</span><span class="token punctuation">:</span><span class="token string">"2019-01-01"</span><span class="token punctuation">,</span>    <span class="token string">"bread"</span><span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">,</span>    <span class="token string">"bcomment"</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#2,创建序列化器，校验</span>serializer <span class="token operator">=</span> BookInfoSerializer<span class="token punctuation">(</span>data<span class="token operator">=</span>book_dict<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># serializer.is_valid()</span>serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#校验不通过，直接报错</span><span class="token comment" spellcheck="true"># ３．输出</span>serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p>序列化器代码</p><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token comment" spellcheck="true">#1.定义序列化器</span><span class="token keyword">from</span> book<span class="token punctuation">.</span>models <span class="token keyword">import</span> BookInfo<span class="token keyword">class</span> <span class="token class-name">BookInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">#实现create方法</span>    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        :param validated_data: 校验成功子后的数据        :return:        '''</span>        <span class="token comment" spellcheck="true">#1.创建ｂｏｏｋ对象，入库</span>        book <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>validated_data<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#2.返回</span>        <span class="token keyword">return</span> book</code></pre></li></ul></li><li><p>注意点：</p><ul><li>当使用序列化器调用sava方法的时候，执行的就是序列化器中的create方法</li></ul></li></ul><p>1.7 反序列化，update更新数据</p><ul><li><p>视图层：</p><ul><li><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''===========３.序列化器，反序列化,update更新数据==========='''</span><span class="token string">''</span><span class="token keyword">from</span> book<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> BookInfoSerializer<span class="token keyword">from</span> book<span class="token punctuation">.</span>models <span class="token keyword">import</span> BookInfo<span class="token comment" spellcheck="true"># 1.准备数据</span>book_dict <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"btitle"</span><span class="token punctuation">:</span><span class="token string">"水浒传"</span><span class="token punctuation">,</span>    <span class="token string">"bpub_date"</span><span class="token punctuation">:</span><span class="token string">"2019-01-01"</span><span class="token punctuation">,</span>    <span class="token string">"bread"</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">,</span>    <span class="token string">"bcomment"</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#要更新的数据</span>book <span class="token operator">=</span> BookInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2,创建序列化器，校验</span>serializer <span class="token operator">=</span> BookInfoSerializer<span class="token punctuation">(</span>instance<span class="token operator">=</span>book<span class="token punctuation">,</span>data<span class="token operator">=</span>book_dict<span class="token punctuation">)</span>serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#校验不通过，直接报错</span><span class="token comment" spellcheck="true"># ３．入库</span>serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p>序列化器代码:</p><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token comment" spellcheck="true">#1.定义序列化器</span><span class="token keyword">from</span> book<span class="token punctuation">.</span>models <span class="token keyword">import</span> BookInfo<span class="token keyword">class</span> <span class="token class-name">BookInfoSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token comment" spellcheck="true">#实现update方法：</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        :param instance: 外界传过来的值        :param validated_data:　验成功子后的数据        :return:        '''</span>        <span class="token comment" spellcheck="true"># １.更新数据</span>        instance<span class="token punctuation">.</span>btitle <span class="token operator">=</span> validated_data<span class="token punctuation">[</span><span class="token string">'btitle'</span><span class="token punctuation">]</span>        instance<span class="token punctuation">.</span>bpub_date <span class="token operator">=</span> validated_data<span class="token punctuation">[</span><span class="token string">'bpub_date'</span><span class="token punctuation">]</span>        instance<span class="token punctuation">.</span>bread <span class="token operator">=</span> validated_data<span class="token punctuation">[</span><span class="token string">'bread'</span><span class="token punctuation">]</span>        instance<span class="token punctuation">.</span>bcomment <span class="token operator">=</span> validated_data<span class="token punctuation">[</span><span class="token string">'bcomment'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 2.入库</span>        instance<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> instance</code></pre></li></ul></li></ul><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p><em><img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210419163100154.png" alt="image-20210419163100154"></em>*</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>restful风格</title>
      <link href="/2021/06302.html"/>
      <url>/2021/06302.html</url>
      
        <content type="html"><![CDATA[<h4 id="restful风格介绍："><a href="#restful风格介绍：" class="headerlink" title="restful风格介绍："></a>restful风格介绍：</h4><p>​    一种软件架构风格，设计风格，不是标准 ，可以解决不通程序员共同协作的代码不和谐问题</p><h4 id="设计风格："><a href="#设计风格：" class="headerlink" title="设计风格："></a>设计风格：</h4><ul><li><p>域名：api应该部署到转有域名下</p></li><li><p>路径：不能用动词</p></li><li><p>版本：在地址栏拼接</p></li><li><p>http动词：不同的请求方式，表示操作不同的资源</p></li><li><p>过滤：以问号的形式携带</p></li><li><p>状态：200,201,204，401,403,404,500</p></li><li><p>返回值：json</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django REST framework</title>
      <link href="/2021/06301.html"/>
      <url>/2021/06301.html</url>
      
        <content type="html"><![CDATA[<h1 id="Django-REST-framework-简介"><a href="#Django-REST-framework-简介" class="headerlink" title="Django REST framework 简介"></a>Django REST framework 简介</h1><ol><li>在序列化与反序列化时，虽然操作的数据不尽相同，但是执行的过程却是相似的，也就是说这部分代码是可以复用简化编写的。</li><li>在开发REST API的视图中，虽然每个视图具体操作的数据不同，但增、删、改、查的实现流程基本套路化，所以这部分代码也是可以复用简化编写的：<ul><li><strong>增</strong>：校验请求数据 -&gt; 执行反序列化过程 -&gt; 保存数据库 -&gt; 将保存的对象序列化并返回</li><li><strong>删</strong>：判断要删除的数据是否存在 -&gt; 执行数据库删除</li><li><strong>改</strong>：判断要修改的数据是否存在 -&gt; 校验请求的数据 -&gt; 执行反序列化过程 -&gt; 保存数据库 -&gt; 将保存的对象序列化并返回</li><li><strong>查</strong>：查询数据库 -&gt; 将数据序列化并返回</li></ul></li></ol><p><strong>Django REST framework可以帮助我们简化上述两部分的代码编写，大大提高REST API的开发速度。</strong></p><h2 id="认识Django-REST-framework"><a href="#认识Django-REST-framework" class="headerlink" title="认识Django REST framework"></a>认识Django REST framework</h2><p><img src="file:///D:/BaiduNetdiskDownload/DRF%E9%85%8D%E5%A5%97%E8%B5%84%E6%96%99/%E7%AC%AC1%E5%A4%A9/3_%E8%B5%84%E6%96%99/01_DRF%E8%AE%B2%E4%B9%89/images/drf_logo.png" alt="drf_logo"></p><p>Django REST framework 框架是一个用于构建Web API 的强大而又灵活的工具。</p><p>通常简称为DRF框架 或 REST framework。</p><p>DRF框架是建立在Django框架基础之上，由Tom Christie大牛二次开发的开源项目。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>提供了定义序列化器Serializer的方法，可以快速根据 Django ORM 或者其它库自动序列化/反序列化；</li><li>提供了丰富的类视图、Mixin扩展类，简化视图的编写；</li><li>丰富的定制层级：函数视图、类视图、视图集合到自动生成 API，满足各种需要；</li><li>多种身份认证和权限认证方式的支持；</li><li>内置了限流系统；</li><li>直观的 API web 界面；</li><li>可扩展性，插件丰富</li></ul><h1 id="环境安装与配置"><a href="#环境安装与配置" class="headerlink" title="环境安装与配置"></a>环境安装与配置</h1><p>DRF需要以下依赖：</p><ul><li>Python (2.7, 3.2, 3.3, 3.4, 3.5, 3.6)</li><li>Django (1.10, 1.11, 2.0)</li></ul><p><strong>DRF是以Django扩展应用的方式提供的，所以我们可以直接利用已有的Django环境而无需从新创建。（若没有Django环境，需要先创建环境安装Django）</strong></p><h2 id="1-安装DRF"><a href="#1-安装DRF" class="headerlink" title="1. 安装DRF"></a>1. 安装DRF</h2><pre class=" language-shell"><code class="language-shell">pip install djangorestframework</code></pre><h2 id="2-添加rest-framework应用"><a href="#2-添加rest-framework应用" class="headerlink" title="2. 添加rest_framework应用"></a>2. 添加rest_framework应用</h2><p>我们利用在Django框架学习中创建的demo工程，在<strong>settings.py</strong>的<strong>INSTALLED_APPS</strong>中添加’rest_framework’。</p><pre class=" language-python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token string">'rest_framework'</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>接下来就可以使用DRF进行开发了。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux必知文件夹和常用操作</title>
      <link href="/2021/063017.html"/>
      <url>/2021/063017.html</url>
      
        <content type="html"><![CDATA[<h4 id="9Linux目录结构"><a href="#9Linux目录结构" class="headerlink" title="9Linux目录结构"></a>9Linux目录结构</h4><p>​    var:存放经常变化的文件</p><p>​    home：普通用户目录</p><p>​    etc：存放配置文件目录</p><p>​    root：特权用户目录</p><p>​    opt：大型软件存放目录</p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><pre><code>命令     条件/参数    对象/文件/目录</code></pre><p>修改linux支持中文的命令</p><pre><code>export LC_ALL=zh_CN.UTF-8</code></pre><h5 id="对文件的增删改查"><a href="#对文件的增删改查" class="headerlink" title="对文件的增删改查"></a>对文件的增删改查</h5><h6 id="查"><a href="#查" class="headerlink" title="查"></a>查</h6><pre><code>1.ls2.ls . 查看当前目录所有文件3.ls .. 查看上一级目录所有文件4.pwd 查看当前路径查看文件夹所有内容（包括隐藏）： ls -a 文件夹</code></pre><h6 id="改-路径"><a href="#改-路径" class="headerlink" title="改(路径)"></a>改(路径)</h6><pre><code>cd </code></pre><h6 id="删"><a href="#删" class="headerlink" title="删"></a>删</h6><pre><code>rm 操作对象  删除文件rm -r 文件夹名  #递归删除文件夹，以及内部rm -f 文件名 强制删除文件，不需要提醒</code></pre><h6 id="增"><a href="#增" class="headerlink" title="增"></a>增</h6><pre><code>mkdir 新建文件夹名称创建普通文件、隐藏文件touch 文件名 、 touch  .文件名</code></pre><p>绝对路径：从根目录开始</p><p>相对路径：非从根目录开始</p><p>远程连接命令（xshell）：</p><pre><code>ssh root@ip</code></pre><p>输出命令所在绝对路径</p><pre><code>[root@localhost ~]# which python  /usr/bin/python</code></pre><p>python3添加环境变量</p><p><img src="/2021/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210326164529669.png" alt="image-20210326164529669"></p><h5 id="linux系统全局环境变量"><a href="#linux系统全局环境变量" class="headerlink" title="linux系统全局环境变量"></a>linux系统全局环境变量</h5><pre><code>etc/profilevim /etc/profile</code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>crm项目开发</title>
      <link href="/2021/062910.html"/>
      <url>/2021/062910.html</url>
      
        <content type="html"><![CDATA[<h5 id="第一部分：权限组件"><a href="#第一部分：权限组件" class="headerlink" title="第一部分：权限组件"></a>第一部分：权限组件</h5><p>…</p><h5 id="第二部分：stark组件"><a href="#第二部分：stark组件" class="headerlink" title="第二部分：stark组件"></a>第二部分：stark组件</h5><ol><li><p>如何使用：</p><ol><li><p>在app编写 stark.py</p></li><li><p>在stark.py中进行定制</p><ul><li><p>默认配置：</p><p><code>site.register(models.Project)</code></p></li><li><p>自定义配置：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Projfig</span><span class="token punctuation">(</span>StarkConfig<span class="token punctuation">)</span><span class="token punctuation">:</span>     list_filter <span class="token operator">=</span> <span class="token punctuation">[</span>Option<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span>    组合搜搜    search_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#模糊搜索</span>    action_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#批量操作</span>    list_display <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#表格式列表上显示的字段</span>    order_by <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#排序</span>    add_btn <span class="token comment" spellcheck="true">#是否显示添加按钮</span>    model_from_class    <span class="token comment" spellcheck="true">#自定义ModelFrom</span>        <span class="token keyword">def</span> <span class="token function">extra_url</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#自己扩展URl</span>        <span class="token keyword">pass</span>     <span class="token keyword">def</span> <span class="token function">get_url</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#自定义url</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">add_view</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#如果配置有逻辑，优先加载当前配置</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">change_view</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">delete_view</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">changelist_view</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Project<span class="token punctuation">,</span>Projfig<span class="token punctuation">)</span></code></pre></li></ul></li></ol></li></ol><h5 id="crm业务开发："><a href="#crm业务开发：" class="headerlink" title="crm业务开发："></a>crm业务开发：</h5><h6 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h6><ul><li><p>闭包：</p><ul><li><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ret <span class="token operator">=</span> a1<span class="token operator">+</span>a3        <span class="token keyword">return</span> ret    <span class="token keyword">return</span> innern1 <span class="token operator">=</span> f1<span class="token punctuation">(</span><span class="token string">'ss'</span><span class="token punctuation">,</span><span class="token string">'xx'</span><span class="token punctuation">)</span>n2 <span class="token operator">=</span> f1<span class="token punctuation">(</span><span class="token string">'sws'</span><span class="token punctuation">,</span><span class="token string">'wxx'</span><span class="token punctuation">)</span>n3 <span class="token operator">=</span> f1<span class="token punctuation">(</span><span class="token string">'ws'</span><span class="token punctuation">,</span><span class="token string">'xxw'</span><span class="token punctuation">)</span>n1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#作用：帮助开发者维护一个“私密”的空间，用于为以后执行提供数据</span></code></pre></li></ul></li><li><p>Form和ModelForm的区别：前者字段手动生成，后者自带</p><ul><li>Form</li></ul></li><li><p>反射</p><ul><li><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#根据字符串的形式导入模块</span><span class="token comment" spellcheck="true">#自定义</span>path <span class="token operator">=</span> <span class="token string">"x1.xx.Foo"</span>module_path<span class="token punctuation">,</span>class_name <span class="token operator">=</span> path<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">.</span>maxsplit<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">import</span> importlibm <span class="token operator">=</span> importlib<span class="token punctuation">.</span>import_module<span class="token punctuation">(</span>module_path<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#Foo类</span>cls <span class="token operator">=</span> getattr<span class="token punctuation">(</span>m<span class="token punctuation">,</span>class_name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#&lt;class 'x1.xx.Foo'></span><span class="token comment" spellcheck="true">#基于django内置模块</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>module_loading <span class="token keyword">import</span> import_stringv<span class="token operator">=</span> import_string<span class="token punctuation">(</span><span class="token string">'x1.xx.Foo'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#&lt;class 'x1.xx.Foo'></span></code></pre></li><li><p>开放封闭原则：对代码封闭对配置开放</p></li></ul></li></ul><h4 id="客户管理"><a href="#客户管理" class="headerlink" title="客户管理"></a>客户管理</h4><ol><li><p>客户管理</p><ol><li>公户、私户、所有客户管理完成<ol><li>所有客户crud操作：销售主管    CustConfig</li><li>公户客户操作：推广、渠道、销售    PublicCustConfig</li><li>私户客户操作：销售  PrivateCustConfig</li></ol></li><li>公户和私户之间操作：<ol><li>公：申请</li><li>私：移除</li></ol></li><li>跟进记录<ol><li>所有跟进记录操作</li><li>私户跟进记录</li></ol></li></ol></li><li><p>教学管理</p><ol><li>直接操作学生表，伪造信息</li><li>上课记录<ol><li>创建上课记录</li><li>初始化学生的学习记录</li></ol></li></ol></li><li><p>公户</p><ol><li>渠道部</li><li>推广部</li></ol></li><li><p>私户</p><ol><li>— 销售</li></ol></li><li><p>跟进记录</p></li><li><p>缴费 +分班</p><h6 id="内容回顾"><a href="#内容回顾" class="headerlink" title="内容回顾"></a>内容回顾</h6><p>第一部分：权限管理</p><p>第二部分：stark组件</p><p>第三部分：crm业务</p><ol><li><p>crm系统主要用于：</p><ol><li>客户关系·管理</li></ol></li><li><p>主要给谁用：</p><ol><li>销售<ol><li>客户分类：<ol><li>公户</li><li>私户</li><li>全户</li></ol></li><li>客户跟进</li><li>缴费申请</li></ol></li><li>推广<ol><li>在公户中录入有效数据</li></ol></li><li>渠道<ol><li>在公户中录入有效数据</li></ol></li><li>教学，老师<ol><li>上课</li><li>作业</li><li>成绩</li></ol></li><li>教质<ol><li>考勤</li></ol></li><li>学生<ol><li>作业</li><li>查看个人信息</li></ol></li></ol></li><li><h6 id="技术点："><a href="#技术点：" class="headerlink" title="技术点："></a>技术点：</h6><ol><li><p>Form的作用：</p><ol><li>​    对用户提交的一组数据进行校验。</li></ol></li><li><p>ModelForm的作用:</p><ol><li>对用户提交的一组数据进行校验。</li><li>快速实现增加、修改</li></ol></li><li><p>FormSet的作用：</p><ol><li><p>对用户提交的多组数据进行校验。</p></li><li><p>快速实现增加、修改</p></li></ol></li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRM </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
